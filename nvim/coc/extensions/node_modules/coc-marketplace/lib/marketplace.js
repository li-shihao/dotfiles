"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const axios_1 = __importDefault(require("axios"));
class Marketplace extends coc_nvim_1.BasicList {
    constructor(nvim) {
        super(nvim);
        this.name = 'marketplace';
        this.description = 'coc.nvim extensions marketplace';
        this.detail = 'display all coc.nvim extensions in list, with an install action';
        this.defaultAction = 'install';
        this.addAction('install', async (item) => {
            const name = item.data.name;
            let res = await coc_nvim_1.workspace.showPrompt(`Install extension ${name}?`);
            if (!res) {
                return;
            }
            await nvim.command(`CocInstall ${name}`);
        });
        this.addAction('uninstall', async (item) => {
            if (!item.data.installed) {
                return;
            }
            const name = item.data.name;
            let res = await coc_nvim_1.workspace.showPrompt(`Uninstall extension ${name}?`);
            if (!res) {
                return;
            }
            await nvim.command(`CocUninstall ${name}`);
        });
    }
    async loadItems(context) {
        const { args } = context;
        let query = args.length ? args[0] : '';
        let items = [];
        const exts = await this.fetchExtensions();
        for (const ext of exts) {
            if (query && query.length > 0) {
                if (ext.name.indexOf(query) < 0) {
                    continue;
                }
            }
            items.push({
                label: ext.label,
                data: {
                    installed: ext.installed,
                    name: ext.name
                }
            });
        }
        items.sort((a, b) => {
            return b.label.localeCompare(a.label);
        });
        return items;
    }
    async fetchExtensions() {
        let statusItem = coc_nvim_1.workspace.createStatusBarItem(0, { progress: true });
        statusItem.text = 'Loading...';
        statusItem.show();
        const uri = 'http://registry.npmjs.com/-/v1/search?text=keywords:coc.nvim&size=200';
        return axios_1.default
            .get(uri)
            .then(res => {
            statusItem.hide();
            if (res.status !== 200) {
                return [];
            }
            return this.format(res.data);
        })
            .catch(_ => {
            statusItem.hide();
            return [];
        });
    }
    format(body) {
        // TODO check body.total for paging
        let exts = [];
        for (const item of body.objects) {
            let pkg = item.package;
            if (pkg.name === 'coc.nvim' || pkg.name === 'coc-marketplace') {
                continue;
            }
            let sign = '';
            if (pkg.publisher.username === 'chemzqm' || pkg.publisher.email === 'chemzqm@gmail.com') {
                sign = '*';
            }
            let status = '×';
            let isInstalled = false;
            for (const e of coc_nvim_1.extensions.all) {
                if (e.id === pkg.name) {
                    status = '√';
                    isInstalled = true;
                    break;
                }
            }
            exts.push({
                name: pkg.name,
                label: `[${status}] ${pkg.name}${sign} ${pkg.version}`.padEnd(30) + pkg.description,
                installed: isInstalled
            });
        }
        return exts;
    }
    doHighlight() {
        let { nvim } = this;
        nvim.pauseNotification();
        nvim.command('syntax match CocMarketplaceExtName /\\v%5v\\S+/', true);
        nvim.command('syntax match CocMarketplaceExtStatus /\\v^\\[[√×\\*]\\]/', true);
        nvim.command('syntax match CocMarketplaceExtVersion /\\v\\d+(\\.\\d+)*/', true);
        nvim.command('syntax match CocMarketplaceExtDescription /\\v%30v.*$/', true);
        nvim.command('highlight default link CocMarketplaceExtName String', true);
        nvim.command('highlight default link CocMarketplaceExtStatus Type', true);
        nvim.command('highlight default link CocMarketplaceExtVersion Tag', true);
        nvim.command('highlight default link CocMarketplaceExtDescription Comment', true);
        nvim.resumeNotification().catch(_e => {
            // noop
        });
    }
}
exports.default = Marketplace;
//# sourceMappingURL=marketplace.js.map