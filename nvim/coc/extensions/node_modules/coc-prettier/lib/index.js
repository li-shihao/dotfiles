"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const configCacheHandler_1 = tslib_1.__importDefault(require("./configCacheHandler"));
const errorHandler_1 = require("./errorHandler");
const ignoreFileHandler_1 = tslib_1.__importDefault(require("./ignoreFileHandler"));
const PrettierEditProvider_1 = tslib_1.__importStar(require("./PrettierEditProvider"));
const utils_1 = require("./utils");
let formatterHandler;
let rangeFormatterHandler;
/**
 * Dispose formatters
 */
function disposeHandlers() {
    if (formatterHandler) {
        formatterHandler.dispose();
    }
    if (rangeFormatterHandler) {
        rangeFormatterHandler.dispose();
    }
    formatterHandler = undefined;
    rangeFormatterHandler = undefined;
}
/**
 * Build formatter selectors
 */
function selectors() {
    let languageSelector = utils_1.enabledLanguages().reduce((curr, language) => {
        return curr.concat([{ language, scheme: 'file' }, { language, scheme: 'untitled' }]);
    }, []);
    let rangeLanguageSelector = utils_1.rangeLanguages().reduce((curr, language) => {
        return curr.concat([{ language, scheme: 'file' }, { language, scheme: 'untitled' }]);
    }, []);
    return {
        languageSelector,
        rangeLanguageSelector,
    };
}
function wait(ms) {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve();
        }, ms);
    });
}
function activate(context) {
    const { fileIsIgnored } = ignoreFileHandler_1.default(context.subscriptions);
    const editProvider = new PrettierEditProvider_1.default(fileIsIgnored);
    const statusItem = coc_nvim_1.workspace.createStatusBarItem(0);
    const config = coc_nvim_1.workspace.getConfiguration('prettier');
    statusItem.text = config.get('statusItemText', 'Prettier');
    let priority = config.get('formatterPriority', 1);
    function checkDocuemnt() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield wait(30);
            let doc = coc_nvim_1.workspace.getDocument(coc_nvim_1.workspace.bufnr);
            let languageIds = utils_1.enabledLanguages();
            if (doc && languageIds.indexOf(doc.filetype) !== -1) {
                statusItem.show();
            }
            else {
                statusItem.hide();
            }
        });
    }
    function registerFormatter() {
        disposeHandlers();
        const { languageSelector, rangeLanguageSelector } = selectors();
        rangeFormatterHandler = coc_nvim_1.languages.registerDocumentRangeFormatProvider(rangeLanguageSelector, editProvider, priority);
        formatterHandler = coc_nvim_1.languages.registerDocumentFormatProvider(languageSelector, editProvider, priority);
    }
    registerFormatter();
    checkDocuemnt().catch(_e => {
        // noop
    });
    coc_nvim_1.events.on('BufEnter', () => tslib_1.__awaiter(this, void 0, void 0, function* () {
        yield checkDocuemnt();
    }), null, context.subscriptions);
    context.subscriptions.push(errorHandler_1.setupErrorHandler(), configCacheHandler_1.default());
    context.subscriptions.push(coc_nvim_1.commands.registerCommand('prettier.formatFile', () => tslib_1.__awaiter(this, void 0, void 0, function* () {
        let document = yield coc_nvim_1.workspace.document;
        let languageId = document.filetype;
        let languages = utils_1.allLanguages();
        if (languages.indexOf(languageId) == -1) {
            coc_nvim_1.workspace.showMessage(`${document.filetype} not supported by prettier`, 'error');
            return;
        }
        let edits = yield PrettierEditProvider_1.format(document.content, document.textDocument, {}).then(code => [
            vscode_languageserver_protocol_1.TextEdit.replace(PrettierEditProvider_1.fullDocumentRange(document.textDocument), code),
        ]);
        if (edits && edits.length) {
            yield document.applyEdits(coc_nvim_1.workspace.nvim, edits);
        }
    })));
}
exports.activate = activate;
//# sourceMappingURL=index.js.map