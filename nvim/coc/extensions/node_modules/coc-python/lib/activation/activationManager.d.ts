import { TextDocument } from 'vscode-languageserver-protocol';
import { IApplicationDiagnostics } from '../application/types';
import { IDocumentManager, IWorkspaceService } from '../common/application/types';
import { Resource } from '../common/types';
import { IInterpreterAutoSelectionService } from '../interpreter/autoSelection/types';
import { IInterpreterService } from '../interpreter/contracts';
import { IExtensionActivationManager, IExtensionActivationService } from './types';
export declare class ExtensionActivationManager implements IExtensionActivationManager {
    private readonly activationServices;
    private readonly documentManager;
    private readonly interpreterService;
    private readonly autoSelection;
    private readonly appDiagnostics;
    private readonly workspaceService;
    private readonly disposables;
    private docOpenedHandler?;
    private readonly activatedWorkspaces;
    constructor(activationServices: IExtensionActivationService[], documentManager: IDocumentManager, interpreterService: IInterpreterService, autoSelection: IInterpreterAutoSelectionService, appDiagnostics: IApplicationDiagnostics, workspaceService: IWorkspaceService);
    dispose(): void;
    activate(): Promise<void>;
    activateWorkspace(resource: Resource): Promise<void>;
    protected initialize(): Promise<void>;
    protected addRemoveDocOpenedHandlers(): void;
    protected hasMultipleWorkspaces(): boolean;
    protected onDocOpened(doc: TextDocument): void;
    protected getWorkspaceKey(resource: Resource): string;
    private getActiveResource;
}
