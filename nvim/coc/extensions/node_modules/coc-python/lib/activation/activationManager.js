// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const coc_nvim_1 = require("coc.nvim");
const types_1 = require("../application/types");
const types_2 = require("../common/application/types");
const constants_1 = require("../common/constants");
const logger_1 = require("../common/logger");
const types_3 = require("../interpreter/autoSelection/types");
const contracts_1 = require("../interpreter/contracts");
const types_4 = require("./types");
const vscode_uri_1 = __importDefault(require("vscode-uri"));
const function_1 = require("../common/function");
let ExtensionActivationManager = class ExtensionActivationManager {
    constructor(activationServices, documentManager, interpreterService, autoSelection, appDiagnostics, workspaceService) {
        this.activationServices = activationServices;
        this.documentManager = documentManager;
        this.interpreterService = interpreterService;
        this.autoSelection = autoSelection;
        this.appDiagnostics = appDiagnostics;
        this.workspaceService = workspaceService;
        this.disposables = [];
        this.activatedWorkspaces = new Set();
    }
    dispose() {
        while (this.disposables.length > 0) {
            const disposable = this.disposables.shift();
            disposable.dispose();
        }
        if (this.docOpenedHandler) {
            this.docOpenedHandler.dispose();
            this.docOpenedHandler = undefined;
        }
    }
    async activate() {
        await this.initialize();
        await this.activateWorkspace(this.getActiveResource());
        await this.autoSelection.autoSelectInterpreter(undefined);
    }
    async activateWorkspace(resource) {
        const key = this.getWorkspaceKey(resource);
        if (this.activatedWorkspaces.has(key)) {
            return;
        }
        this.activatedWorkspaces.add(key);
        // Get latest interpreter list in the background.
        this.interpreterService.getInterpreters(resource).catch(() => { });
        await this.autoSelection.autoSelectInterpreter(resource);
        await Promise.all(this.activationServices.map(item => item.activate(resource)));
        await this.appDiagnostics.performPreStartupHealthCheck(resource);
    }
    async initialize() {
        this.addRemoveDocOpenedHandlers();
    }
    addRemoveDocOpenedHandlers() {
        if (this.hasMultipleWorkspaces()) {
            if (!this.docOpenedHandler) {
                this.docOpenedHandler = this.documentManager.onDidOpenTextDocument(this.onDocOpened, this);
            }
            return;
        }
        if (this.docOpenedHandler) {
            this.docOpenedHandler.dispose();
            this.docOpenedHandler = undefined;
        }
    }
    hasMultipleWorkspaces() {
        return false;
    }
    onDocOpened(doc) {
        if (doc.languageId !== constants_1.PYTHON_LANGUAGE) {
            return;
        }
        const key = this.getWorkspaceKey(vscode_uri_1.default.parse(doc.uri));
        // If we have opened a doc that does not belong to workspace, then do nothing.
        if (key === '') {
            return;
        }
        if (this.activatedWorkspaces.has(key)) {
            return;
        }
        const folder = coc_nvim_1.workspace.workspaceFolder;
        this.activateWorkspace(folder ? vscode_uri_1.default.parse(folder.uri) : undefined).catch(function_1.emptyFn);
    }
    getWorkspaceKey(resource) {
        return coc_nvim_1.workspace.rootPath;
    }
    getActiveResource() {
        let doc = coc_nvim_1.workspace.getDocument(coc_nvim_1.workspace.bufnr);
        if (!doc || doc.filetype !== 'python')
            return null;
        return vscode_uri_1.default.parse(doc.uri);
    }
};
__decorate([
    logger_1.traceDecorators.error('Failed to activate a workspace')
], ExtensionActivationManager.prototype, "activateWorkspace", null);
ExtensionActivationManager = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.multiInject(types_4.IExtensionActivationService)),
    __param(1, inversify_1.inject(types_2.IDocumentManager)),
    __param(2, inversify_1.inject(contracts_1.IInterpreterService)),
    __param(3, inversify_1.inject(types_3.IInterpreterAutoSelectionService)),
    __param(4, inversify_1.inject(types_1.IApplicationDiagnostics)),
    __param(5, inversify_1.inject(types_2.IWorkspaceService))
], ExtensionActivationManager);
exports.ExtensionActivationManager = ExtensionActivationManager;
//# sourceMappingURL=activationManager.js.map