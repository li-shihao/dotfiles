// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const inversify_1 = require("inversify");
const lsNotSupported_1 = require("../application/diagnostics/checks/lsNotSupported");
const types_1 = require("../application/diagnostics/types");
const types_2 = require("../common/application/types");
const constants_1 = require("../common/constants");
const types_3 = require("../common/types");
const types_4 = require("../ioc/types");
const types_5 = require("./types");
const function_1 = require("../common/function");
const jediEnabledSetting = 'jediEnabled';
const workspacePathNameForGlobalWorkspaces = '';
let LanguageServerExtensionActivationService = class LanguageServerExtensionActivationService {
    constructor(serviceContainer) {
        this.serviceContainer = serviceContainer;
        this.lsActivatedWorkspaces = new Map();
        this.jediActivatedOnce = false;
        this.workspaceService = this.serviceContainer.get(types_2.IWorkspaceService);
        this.output = this.serviceContainer.get(types_3.IOutputChannel, constants_1.STANDARD_OUTPUT_CHANNEL);
        this.lsNotSupportedDiagnosticService = this.serviceContainer.get(types_1.IDiagnosticsService, lsNotSupported_1.LSNotSupportedDiagnosticServiceId);
        const disposables = serviceContainer.get(types_3.IDisposableRegistry);
        disposables.push(this);
        disposables.push(this.workspaceService.onDidChangeConfiguration(this.onDidChangeConfiguration.bind(this)));
        // disposables.push(this.workspaceService.onDidChangeWorkspaceFolders(this.onWorkspaceFoldersChanged, this))
    }
    async activate(resource) {
        let jedi = this.useJedi();
        if (!jedi) {
            if (this.lsActivatedWorkspaces.has(this.getWorkspacePathKey(resource))) {
                return;
            }
            const diagnostic = await this.lsNotSupportedDiagnosticService.diagnose(undefined);
            this.lsNotSupportedDiagnosticService.handle(diagnostic).catch(function_1.emptyFn);
            if (diagnostic.length) {
                jedi = true;
            }
        }
        else {
            if (this.jediActivatedOnce) {
                return;
            }
            this.jediActivatedOnce = true;
        }
        this.resource = resource;
        await this.logStartup(jedi);
        let activatorName = jedi ? types_5.LanguageServerActivator.Jedi : types_5.LanguageServerActivator.DotNet;
        let activator = this.serviceContainer.get(types_5.ILanguageServerActivator, activatorName);
        this.currentActivator = { jedi, activator };
        try {
            await activator.activate(resource);
            if (!jedi) {
                this.lsActivatedWorkspaces.set(this.getWorkspacePathKey(resource), activator);
            }
        }
        catch (ex) {
            if (jedi) {
                return;
            }
            // Language server fails, reverting to jedi
            if (this.jediActivatedOnce) {
                return;
            }
            this.jediActivatedOnce = true;
            jedi = true;
            await this.logStartup(jedi);
            activatorName = types_5.LanguageServerActivator.Jedi;
            activator = this.serviceContainer.get(types_5.ILanguageServerActivator, activatorName);
            this.currentActivator = { jedi, activator };
            await activator.activate(resource);
        }
    }
    dispose() {
        if (this.currentActivator) {
            this.currentActivator.activator.dispose();
        }
    }
    onWorkspaceFoldersChanged() {
        // If an activated workspace folder was removed, dispose its activator
        // const workspaceKeys = this.workspaceService.workspaceFolders!.map(workspaceFolder => this.getWorkspacePathKey(workspaceFolder.uri))
        // const activatedWkspcKeys = Array.from(this.lsActivatedWorkspaces.keys())
        // const activatedWkspcFoldersRemoved = activatedWkspcKeys.filter(item => workspaceKeys.indexOf(item) < 0)
        // if (activatedWkspcFoldersRemoved.length > 0) {
        //   for (const folder of activatedWkspcFoldersRemoved) {
        //     this.lsActivatedWorkspaces.get(folder)!.dispose()
        //     this.lsActivatedWorkspaces!.delete(folder)
        //   }
        // }
    }
    async logStartup(isJedi) {
        const outputLine = isJedi
            ? 'Starting Jedi Python language engine.'
            : 'Starting Microsoft Python language server.';
        this.output.appendLine(outputLine);
    }
    async onDidChangeConfiguration(event) {
        if (!event.affectsConfiguration(`python.${jediEnabledSetting}`)) {
            return;
        }
        const jedi = this.useJedi();
        if (this.currentActivator && this.currentActivator.jedi === jedi) {
            return;
        }
        const reload = await coc_nvim_1.workspace.showPrompt(`Reload coc server to switching between language engines?`);
        if (reload) {
            coc_nvim_1.workspace.nvim.command(`CocRestart`, true);
        }
    }
    useJedi() {
        const configurationService = this.serviceContainer.get(types_3.IConfigurationService);
        return configurationService.getSettings(this.resource).jediEnabled;
    }
    getWorkspacePathKey(_resource) {
        return coc_nvim_1.workspace.rootPath;
    }
};
LanguageServerExtensionActivationService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_4.IServiceContainer))
], LanguageServerExtensionActivationService);
exports.LanguageServerExtensionActivationService = LanguageServerExtensionActivationService;
//# sourceMappingURL=activationService.js.map