// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const path = __importStar(require("path"));
const types_1 = require("../../common/application/types");
const logger_1 = require("../../common/logger");
const types_2 = require("../../common/platform/types");
const vscode_uri_1 = __importDefault(require("vscode-uri"));
const types_3 = require("../../common/types");
const types_4 = require("../types");
/**
 * Starts the language server managers per workspaces (currently one for first workspace).
 *
 * @export
 * @class LanguageServerExtensionActivator
 * @implements {ILanguageServerActivator}
 */
let LanguageServerExtensionActivator = class LanguageServerExtensionActivator {
    constructor(manager, workspace, fs, lsDownloader, languageServerFolderService, configurationService, context) {
        this.manager = manager;
        this.workspace = workspace;
        this.fs = fs;
        this.lsDownloader = lsDownloader;
        this.languageServerFolderService = languageServerFolderService;
        this.configurationService = configurationService;
        this.context = context;
    }
    async activate(resource) {
        if (!resource) {
            resource = vscode_uri_1.default.file(this.workspace.rootPath);
        }
        await this.ensureLanguageServerIsAvailable(resource);
        await this.manager.start(resource);
    }
    dispose() {
        this.manager.dispose();
    }
    async ensureLanguageServerIsAvailable(resource) {
        const settings = this.configurationService.getSettings(resource);
        if (!settings.downloadLanguageServer) {
            return;
        }
        const languageServerFolder = await this.languageServerFolderService.getLanguageServerFolderName();
        const languageServerFolderPath = path.join(this.context.storagePath, languageServerFolder);
        const mscorlib = path.join(languageServerFolderPath, 'mscorlib.dll');
        if (!(await this.fs.fileExists(mscorlib))) {
            await this.lsDownloader.downloadLanguageServer(languageServerFolderPath);
        }
    }
};
__decorate([
    logger_1.traceDecorators.error('Failed to activate language server')
], LanguageServerExtensionActivator.prototype, "activate", null);
__decorate([
    logger_1.traceDecorators.error('Failed to ensure language server is available')
], LanguageServerExtensionActivator.prototype, "ensureLanguageServerIsAvailable", null);
LanguageServerExtensionActivator = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_4.ILanguageServerManager)),
    __param(1, inversify_1.inject(types_1.IWorkspaceService)),
    __param(2, inversify_1.inject(types_2.IFileSystem)),
    __param(3, inversify_1.inject(types_4.ILanguageServerDownloader)),
    __param(4, inversify_1.inject(types_4.ILanguageServerFolderService)),
    __param(5, inversify_1.inject(types_3.IConfigurationService)),
    __param(6, inversify_1.inject(types_3.IExtensionContext))
], LanguageServerExtensionActivator);
exports.LanguageServerExtensionActivator = LanguageServerExtensionActivator;
//# sourceMappingURL=activator.js.map