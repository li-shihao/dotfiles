import { LanguageClientOptions, ConfigurationChangeEvent, OutputChannel } from 'coc.nvim';
import { Event } from 'vscode-languageserver-protocol';
import { IWorkspaceService } from '../../common/application/types';
import { IConfigurationService, IExtensionContext, IPathUtils, IPythonExtensionBanner, Resource } from '../../common/types';
import { IEnvironmentVariablesProvider } from '../../common/variables/types';
import { IInterpreterService } from '../../interpreter/contracts';
import { ILanguageServerAnalysisOptions, ILanguageServerFolderService } from '../types';
export declare class LanguageServerAnalysisOptions implements ILanguageServerAnalysisOptions {
    private readonly context;
    private readonly envVarsProvider;
    private readonly configuration;
    private readonly workspace;
    private readonly surveyBanner;
    private readonly interpreterService;
    private readonly output;
    private readonly pathUtils;
    private readonly languageServerFolderService;
    private envPythonPath;
    private excludedFiles;
    private typeshedPaths;
    private disposables;
    private languageServerFolder;
    private resource;
    private readonly didChange;
    constructor(context: IExtensionContext, envVarsProvider: IEnvironmentVariablesProvider, configuration: IConfigurationService, workspace: IWorkspaceService, surveyBanner: IPythonExtensionBanner, interpreterService: IInterpreterService, output: OutputChannel, pathUtils: IPathUtils, languageServerFolderService: ILanguageServerFolderService);
    initialize(resource: Resource): Promise<void>;
    readonly onDidChange: Event<void>;
    dispose(): void;
    getAnalysisOptions(): Promise<LanguageClientOptions>;
    protected getExcludedFiles(): string[];
    protected getVsCodeExcludeSection(setting: string, list: string[]): void;
    protected getPythonExcludeSection(list: string[]): void;
    protected getTypeshedPaths(): string[];
    protected onSettingsChangedHandler(e?: ConfigurationChangeEvent): Promise<void>;
    protected onSettingsChanged(): void;
    protected notifyIfSettingsChanged(): Promise<void>;
    protected notifyIfValuesHaveChanged(oldArray: string[], newArray: string[]): Promise<void>;
    protected onEnvVarChange(): void;
    protected notifyifEnvPythonPathChanged(): Promise<void>;
}
