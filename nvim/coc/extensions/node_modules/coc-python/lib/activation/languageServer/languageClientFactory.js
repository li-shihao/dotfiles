// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const inversify_1 = require("inversify");
const path = __importStar(require("path"));
const types_1 = require("../../common/types");
const types_2 = require("../../common/variables/types");
const types_3 = require("../../interpreter/activation/types");
const types_4 = require("../types");
// tslint:disable:no-require-imports no-require-imports no-var-requires max-classes-per-file
const dotNetCommand = 'dotnet';
const languageClientName = 'Python Tools';
let BaseLanguageClientFactory = class BaseLanguageClientFactory {
    constructor(downloadedFactory, simpleFactory, configurationService, envVarsProvider, environmentActivationService) {
        this.downloadedFactory = downloadedFactory;
        this.simpleFactory = simpleFactory;
        this.configurationService = configurationService;
        this.envVarsProvider = envVarsProvider;
        this.environmentActivationService = environmentActivationService;
    }
    async createLanguageClient(resource, clientOptions) {
        const settings = this.configurationService.getSettings(resource);
        const factory = settings.downloadLanguageServer ? this.downloadedFactory : this.simpleFactory;
        const env = await this.getEnvVars(resource);
        return factory.createLanguageClient(resource, clientOptions, env);
    }
    async getEnvVars(resource) {
        const envVars = await this.environmentActivationService.getActivatedEnvironmentVariables(resource);
        if (envVars && Object.keys(envVars).length > 0) {
            return envVars;
        }
        return this.envVarsProvider.getEnvironmentVariables(resource);
    }
};
BaseLanguageClientFactory = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_4.ILanguageClientFactory)), __param(0, inversify_1.named(types_4.LanguageClientFactory.downloaded)),
    __param(1, inversify_1.inject(types_4.ILanguageClientFactory)), __param(1, inversify_1.named(types_4.LanguageClientFactory.simple)),
    __param(2, inversify_1.inject(types_1.IConfigurationService)),
    __param(3, inversify_1.inject(types_2.IEnvironmentVariablesProvider)),
    __param(4, inversify_1.inject(types_3.IEnvironmentActivationService))
], BaseLanguageClientFactory);
exports.BaseLanguageClientFactory = BaseLanguageClientFactory;
/**
 * Creates a langauge client for use by users of the extension.
 *
 * @export
 * @class DownloadedLanguageClientFactory
 * @implements {ILanguageClientFactory}
 */
let DownloadedLanguageClientFactory = class DownloadedLanguageClientFactory {
    constructor(platformData, languageServerFolderService, context) {
        this.platformData = platformData;
        this.languageServerFolderService = languageServerFolderService;
        this.context = context;
    }
    async createLanguageClient(_resource, clientOptions, env) {
        const languageServerFolder = await this.languageServerFolderService.getLanguageServerFolderName();
        const serverModule = path.join(this.context.storagePath, languageServerFolder, this.platformData.engineExecutableName);
        const serverOptions = {
            command: serverModule,
            args: [],
            options: { stdio: 'pipe', env }
        };
        return new coc_nvim_1.LanguageClient('python', serverOptions, clientOptions, false);
    }
};
DownloadedLanguageClientFactory = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_4.IPlatformData)),
    __param(1, inversify_1.inject(types_4.ILanguageServerFolderService)),
    __param(2, inversify_1.inject(types_1.IExtensionContext))
], DownloadedLanguageClientFactory);
exports.DownloadedLanguageClientFactory = DownloadedLanguageClientFactory;
/**
 * Creates a language client factory primarily used for LS development purposes.
 *
 * @export
 * @class SimpleLanguageClientFactory
 * @implements {ILanguageClientFactory}
 */
let SimpleLanguageClientFactory = class SimpleLanguageClientFactory {
    constructor(platformData, languageServerFolderService, context) {
        this.platformData = platformData;
        this.languageServerFolderService = languageServerFolderService;
        this.context = context;
    }
    async createLanguageClient(_resource, clientOptions, env) {
        const languageServerFolder = await this.languageServerFolderService.getLanguageServerFolderName();
        const serverModule = path.join(this.context.storagePath, languageServerFolder, this.platformData.engineDllName);
        const serverOptions = {
            command: dotNetCommand,
            args: [serverModule],
            options: { stdio: 'pipe', env }
        };
        return new coc_nvim_1.LanguageClient('python', languageClientName, serverOptions, clientOptions);
    }
};
SimpleLanguageClientFactory = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_4.IPlatformData)),
    __param(1, inversify_1.inject(types_4.ILanguageServerFolderService)),
    __param(2, inversify_1.inject(types_1.IExtensionContext))
], SimpleLanguageClientFactory);
exports.SimpleLanguageClientFactory = SimpleLanguageClientFactory;
//# sourceMappingURL=languageClientFactory.js.map