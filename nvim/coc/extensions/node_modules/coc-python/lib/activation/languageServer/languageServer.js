// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const logger_1 = require("../../common/logger");
const types_1 = require("../../common/types");
const async_1 = require("../../common/utils/async");
const misc_1 = require("../../common/utils/misc");
const types_2 = require("../types");
const progress_1 = require("./progress");
const function_1 = require("../../common/function");
let LanguageServer = class LanguageServer {
    constructor(factory, configurationService) {
        this.factory = factory;
        this.configurationService = configurationService;
        this.disposables = [];
        this.extensionLoadedArgs = new Set();
        this.startupCompleted = async_1.createDeferred();
    }
    dispose() {
        if (this.languageClient) {
            // Do not await on this.
            this.languageClient.stop().then(misc_1.noop, ex => logger_1.traceError('Stopping language client failed', ex));
            this.languageClient = undefined;
        }
        while (this.disposables.length > 0) {
            const d = this.disposables.shift();
            d.dispose();
        }
        if (this.startupCompleted.completed) {
            this.startupCompleted.reject(new Error('Disposed Language Server'));
        }
    }
    async start(resource, options) {
        this.languageClient = await this.factory.createLanguageClient(resource, options);
        this.disposables.push(this.languageClient.start());
        await this.serverReady();
        const progressReporting = new progress_1.ProgressReporting(this.languageClient);
        this.disposables.push(progressReporting);
    }
    loadExtension(args) {
        if (this.extensionLoadedArgs.has(args || '')) {
            return;
        }
        this.extensionLoadedArgs.add(args || '');
        this.startupCompleted.promise
            .then(() => this.languageClient.sendRequest('python/loadExtension', args).then(misc_1.noop, ex => logger_1.traceError('Request python/loadExtension failed', ex)))
            .catch(function_1.emptyFn);
    }
    async serverReady() {
        while (this.languageClient && !this.languageClient.initializeResult) {
            await async_1.sleep(100);
        }
        this.startupCompleted.resolve();
    }
};
__decorate([
    logger_1.traceDecorators.verbose('Stopping Language Server')
], LanguageServer.prototype, "dispose", null);
__decorate([
    logger_1.traceDecorators.error('Failed to start language server')
], LanguageServer.prototype, "start", null);
__decorate([
    logger_1.traceDecorators.error('Failed to load Language Server extension')
], LanguageServer.prototype, "loadExtension", null);
LanguageServer = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_2.ILanguageClientFactory)),
    __param(0, inversify_1.named(types_2.LanguageClientFactory.base)),
    __param(1, inversify_1.inject(types_1.IConfigurationService))
], LanguageServer);
exports.LanguageServer = LanguageServer;
//# sourceMappingURL=languageServer.js.map