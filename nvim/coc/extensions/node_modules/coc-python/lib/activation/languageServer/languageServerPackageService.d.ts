import { IApplicationEnvironment } from '../../common/application/types';
import { NugetPackage } from '../../common/nuget/types';
import { IPlatformService } from '../../common/platform/types';
import { LanguageServerDownloadChannels } from '../../common/types';
import { IServiceContainer } from '../../ioc/types';
import { ILanguageServerPackageService, PlatformName } from '../types';
export declare const maxMajorVersion = 0;
export declare const PackageNames: {
    [PlatformName.Windows32Bit]: string;
    [PlatformName.Windows64Bit]: string;
    [PlatformName.Linux64Bit]: string;
    [PlatformName.Mac64Bit]: string;
};
export declare class LanguageServerPackageService implements ILanguageServerPackageService {
    protected readonly serviceContainer: IServiceContainer;
    private readonly appEnv;
    private readonly platform;
    maxMajorVersion: number;
    constructor(serviceContainer: IServiceContainer, appEnv: IApplicationEnvironment, platform: IPlatformService);
    getNugetPackageName(): string;
    getLatestNugetPackageVersion(): Promise<NugetPackage>;
    getLanguageServerDownloadChannel(): LanguageServerDownloadChannels;
    protected getValidPackage(packages: NugetPackage[]): NugetPackage;
    private isAlphaVersionOfExtension;
}
