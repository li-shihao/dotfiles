// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const logger_1 = require("../../common/logger");
const decorators_1 = require("../../common/utils/decorators");
const types_1 = require("../../ioc/types");
const types_2 = require("../types");
const function_1 = require("../../common/function");
let LanguageServerManager = class LanguageServerManager {
    constructor(serviceContainer, analysisOptions, lsExtension) {
        this.serviceContainer = serviceContainer;
        this.analysisOptions = analysisOptions;
        this.lsExtension = lsExtension;
        this.disposables = [];
    }
    dispose() {
        if (this.languageServer) {
            this.languageServer.dispose();
        }
        this.disposables.forEach(d => d.dispose());
    }
    async start(resource) {
        if (this.languageServer) {
            throw new Error('Language Server already started');
        }
        this.registerCommandHandler();
        this.resource = resource;
        this.analysisOptions.onDidChange(this.restartLanguageServerDebounced, this, this.disposables);
        await this.analysisOptions.initialize(resource);
        await this.startLanguageServer();
    }
    registerCommandHandler() {
        this.lsExtension.invoked(this.loadExtensionIfNecessary, this, this.disposables);
    }
    loadExtensionIfNecessary() {
        if (this.languageServer && this.lsExtension.loadExtensionArgs) {
            this.languageServer.loadExtension(this.lsExtension.loadExtensionArgs);
        }
    }
    restartLanguageServerDebounced() {
        this.restartLanguageServer().catch(function_1.emptyFn);
    }
    async restartLanguageServer() {
        if (this.languageServer) {
            this.languageServer.dispose();
        }
        await this.startLanguageServer();
    }
    async startLanguageServer() {
        this.languageServer = this.serviceContainer.get(types_2.ILanguageServer);
        const options = await this.analysisOptions.getAnalysisOptions();
        await this.languageServer.start(this.resource, options);
        this.loadExtensionIfNecessary();
    }
};
__decorate([
    logger_1.traceDecorators.error('Failed to start Language Server')
], LanguageServerManager.prototype, "start", null);
__decorate([
    decorators_1.debounce(1000)
], LanguageServerManager.prototype, "restartLanguageServerDebounced", null);
__decorate([
    logger_1.traceDecorators.error('Failed to restart Language Server'),
    logger_1.traceDecorators.verbose('Restarting Language Server')
], LanguageServerManager.prototype, "restartLanguageServer", null);
__decorate([
    logger_1.traceDecorators.verbose('Starting Language Server')
], LanguageServerManager.prototype, "startLanguageServer", null);
LanguageServerManager = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_1.IServiceContainer)),
    __param(1, inversify_1.inject(types_2.ILanguageServerAnalysisOptions)),
    __param(2, inversify_1.inject(types_2.ILanguageServerExtension))
], LanguageServerManager);
exports.LanguageServerManager = LanguageServerManager;
//# sourceMappingURL=manager.js.map