// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const types_1 = require("../../common/platform/types");
var PlatformName;
(function (PlatformName) {
    PlatformName["Windows32Bit"] = "win-x86";
    PlatformName["Windows64Bit"] = "win-x64";
    PlatformName["Mac64Bit"] = "osx-x64";
    PlatformName["Linux64Bit"] = "linux-x64";
})(PlatformName = exports.PlatformName || (exports.PlatformName = {}));
var PlatformLSExecutables;
(function (PlatformLSExecutables) {
    PlatformLSExecutables["Windows"] = "Microsoft.Python.LanguageServer.exe";
    PlatformLSExecutables["MacOS"] = "Microsoft.Python.LanguageServer";
    PlatformLSExecutables["Linux"] = "Microsoft.Python.LanguageServer";
})(PlatformLSExecutables = exports.PlatformLSExecutables || (exports.PlatformLSExecutables = {}));
let PlatformData = class PlatformData {
    constructor(platform) {
        this.platform = platform;
    }
    get platformName() {
        if (this.platform.isWindows) {
            return this.platform.is64bit ? PlatformName.Windows64Bit : PlatformName.Windows32Bit;
        }
        if (this.platform.isMac) {
            return PlatformName.Mac64Bit;
        }
        if (this.platform.isLinux) {
            if (!this.platform.is64bit) {
                throw new Error('Microsoft Python Language Server does not support 32-bit Linux.');
            }
            return PlatformName.Linux64Bit;
        }
        throw new Error('Unknown OS platform.');
    }
    get engineDllName() {
        return 'Microsoft.Python.LanguageServer.dll';
    }
    get engineExecutableName() {
        if (this.platform.isWindows) {
            return PlatformLSExecutables.Windows;
        }
        else if (this.platform.isLinux) {
            return PlatformLSExecutables.Linux;
        }
        else if (this.platform.isMac) {
            return PlatformLSExecutables.MacOS;
        }
        else {
            return 'unknown-platform';
        }
    }
};
PlatformData = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_1.IPlatformService))
], PlatformData);
exports.PlatformData = PlatformData;
//# sourceMappingURL=platformData.js.map