// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../common/nuget/types");
const types_2 = require("../common/types");
const languageServerSurveyBanner_1 = require("../languageServices/languageServerSurveyBanner");
const proposeLanguageServerBanner_1 = require("../languageServices/proposeLanguageServerBanner");
const activationManager_1 = require("./activationManager");
const activationService_1 = require("./activationService");
const jedi_1 = require("./jedi");
const activator_1 = require("./languageServer/activator");
const analysisOptions_1 = require("./languageServer/analysisOptions");
const downloadChannelRules_1 = require("./languageServer/downloadChannelRules");
const downloader_1 = require("./languageServer/downloader");
const languageClientFactory_1 = require("./languageServer/languageClientFactory");
const languageServer_1 = require("./languageServer/languageServer");
const languageServerCompatibilityService_1 = require("./languageServer/languageServerCompatibilityService");
const languageServerExtension_1 = require("./languageServer/languageServerExtension");
const languageServerFolderService_1 = require("./languageServer/languageServerFolderService");
const languageServerPackageRepository_1 = require("./languageServer/languageServerPackageRepository");
const languageServerPackageService_1 = require("./languageServer/languageServerPackageService");
const manager_1 = require("./languageServer/manager");
const platformData_1 = require("./languageServer/platformData");
const types_3 = require("./types");
function registerTypes(serviceManager) {
    serviceManager.addSingleton(types_3.IExtensionActivationService, activationService_1.LanguageServerExtensionActivationService);
    serviceManager.addSingleton(types_3.ILanguageServerExtension, languageServerExtension_1.LanguageServerExtension);
    serviceManager.add(types_3.IExtensionActivationManager, activationManager_1.ExtensionActivationManager);
    serviceManager.add(types_3.ILanguageServerActivator, jedi_1.JediExtensionActivator, types_3.LanguageServerActivator.Jedi);
    serviceManager.add(types_3.ILanguageServerActivator, activator_1.LanguageServerExtensionActivator, types_3.LanguageServerActivator.DotNet);
    serviceManager.addSingleton(types_2.IPythonExtensionBanner, languageServerSurveyBanner_1.LanguageServerSurveyBanner, types_2.BANNER_NAME_LS_SURVEY);
    serviceManager.addSingleton(types_2.IPythonExtensionBanner, proposeLanguageServerBanner_1.ProposeLanguageServerBanner, types_2.BANNER_NAME_PROPOSE_LS);
    serviceManager.addSingleton(types_3.ILanguageServerFolderService, languageServerFolderService_1.LanguageServerFolderService);
    serviceManager.addSingleton(types_3.ILanguageServerPackageService, languageServerPackageService_1.LanguageServerPackageService);
    serviceManager.addSingleton(types_1.INugetRepository, languageServerPackageRepository_1.StableLanguageServerPackageRepository, languageServerPackageRepository_1.LanguageServerDownloadChannel.stable);
    serviceManager.addSingleton(types_1.INugetRepository, languageServerPackageRepository_1.BetaLanguageServerPackageRepository, languageServerPackageRepository_1.LanguageServerDownloadChannel.beta);
    serviceManager.addSingleton(types_1.INugetRepository, languageServerPackageRepository_1.DailyLanguageServerPackageRepository, languageServerPackageRepository_1.LanguageServerDownloadChannel.daily);
    serviceManager.addSingleton(types_3.IDownloadChannelRule, downloadChannelRules_1.DownloadDailyChannelRule, languageServerPackageRepository_1.LanguageServerDownloadChannel.daily);
    serviceManager.addSingleton(types_3.IDownloadChannelRule, downloadChannelRules_1.DownloadBetaChannelRule, languageServerPackageRepository_1.LanguageServerDownloadChannel.beta);
    serviceManager.addSingleton(types_3.IDownloadChannelRule, downloadChannelRules_1.DownloadStableChannelRule, languageServerPackageRepository_1.LanguageServerDownloadChannel.stable);
    serviceManager.addSingleton(types_3.ILanguageServerCompatibilityService, languageServerCompatibilityService_1.LanguageServerCompatibilityService);
    serviceManager.addSingleton(types_3.ILanguageClientFactory, languageClientFactory_1.BaseLanguageClientFactory, types_3.LanguageClientFactory.base);
    serviceManager.addSingleton(types_3.ILanguageClientFactory, languageClientFactory_1.DownloadedLanguageClientFactory, types_3.LanguageClientFactory.downloaded);
    serviceManager.addSingleton(types_3.ILanguageClientFactory, languageClientFactory_1.SimpleLanguageClientFactory, types_3.LanguageClientFactory.simple);
    serviceManager.addSingleton(types_3.ILanguageServerDownloader, downloader_1.LanguageServerDownloader);
    serviceManager.addSingleton(types_3.IPlatformData, platformData_1.PlatformData);
    serviceManager.add(types_3.ILanguageServerAnalysisOptions, analysisOptions_1.LanguageServerAnalysisOptions);
    serviceManager.add(types_3.ILanguageServer, languageServer_1.LanguageServer);
    serviceManager.add(types_3.ILanguageServerManager, manager_1.LanguageServerManager);
}
exports.registerTypes = registerTypes;
//# sourceMappingURL=serviceRegistry.js.map