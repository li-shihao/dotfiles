/// <reference types="node" />
import { Request as RequestResult } from 'request';
import { SemVer } from 'semver';
import { Event } from 'vscode-languageserver-protocol';
import { LanguageClient, LanguageClientOptions } from 'coc.nvim';
import { NugetPackage } from '../common/nuget/types';
import { IDisposable, LanguageServerDownloadChannels, Resource } from '../common/types';
export declare const IExtensionActivationManager: unique symbol;
export interface IExtensionActivationManager extends IDisposable {
    activate(): Promise<void>;
    activateWorkspace(resource: Resource): Promise<void>;
}
export declare const IExtensionActivationService: unique symbol;
export interface IExtensionActivationService {
    activate(resource: Resource): Promise<void>;
}
export declare enum LanguageServerActivator {
    Jedi = "Jedi",
    DotNet = "DotNet"
}
export declare const ILanguageServerActivator: unique symbol;
export interface ILanguageServerActivator extends IDisposable {
    activate(resource: Resource): Promise<void>;
}
export declare const IHttpClient: unique symbol;
export interface IHttpClient {
    downloadFile(uri: string): Promise<RequestResult>;
    getJSON<T>(uri: string): Promise<T>;
}
export interface FolderVersionPair {
    path: string;
    version: SemVer;
}
export declare const ILanguageServerFolderService: unique symbol;
export interface ILanguageServerFolderService {
    getLanguageServerFolderName(): Promise<string>;
    getLatestLanguageServerVersion(): Promise<NugetPackage | undefined>;
    getCurrentLanguageServerDirectory(): Promise<FolderVersionPair | undefined>;
}
export declare const ILanguageServerDownloader: unique symbol;
export interface ILanguageServerDownloader {
    getDownloadInfo(): Promise<NugetPackage>;
    downloadLanguageServer(destinationFolder: string): Promise<void>;
}
export declare const ILanguageServerPackageService: unique symbol;
export interface ILanguageServerPackageService {
    getNugetPackageName(): string;
    getLatestNugetPackageVersion(): Promise<NugetPackage>;
    getLanguageServerDownloadChannel(): LanguageServerDownloadChannels;
}
export declare const MajorLanguageServerVersion: unique symbol;
export declare const IDownloadChannelRule: unique symbol;
export interface IDownloadChannelRule {
    shouldLookForNewLanguageServer(currentFolder?: FolderVersionPair): Promise<boolean>;
}
export declare const ILanguageServerCompatibilityService: unique symbol;
export interface ILanguageServerCompatibilityService {
    isSupported(): Promise<boolean>;
}
export declare enum LanguageClientFactory {
    base = "base",
    simple = "simple",
    downloaded = "downloaded"
}
export declare const ILanguageClientFactory: unique symbol;
export interface ILanguageClientFactory {
    createLanguageClient(resource: Resource, clientOptions: LanguageClientOptions, env?: NodeJS.ProcessEnv): Promise<LanguageClient>;
}
export declare const ILanguageServerAnalysisOptions: unique symbol;
export interface ILanguageServerAnalysisOptions extends IDisposable {
    readonly onDidChange: Event<void>;
    initialize(resource: Resource): Promise<void>;
    getAnalysisOptions(): Promise<LanguageClientOptions>;
}
export declare const ILanguageServerManager: unique symbol;
export interface ILanguageServerManager extends IDisposable {
    start(resource: Resource): Promise<void>;
}
export declare const ILanguageServerExtension: unique symbol;
export interface ILanguageServerExtension extends IDisposable {
    readonly invoked: Event<void>;
    loadExtensionArgs?: {};
    register(): void;
}
export declare const ILanguageServer: unique symbol;
export interface ILanguageServer extends IDisposable {
    start(resource: Resource, options: LanguageClientOptions): Promise<void>;
    /**
     * Sends a request to LS so as to load other extensions.
     * This is used as a plugin loader mechanism.
     * Anyone (such as intellicode) wanting to interact with LS, needs to send this request to LS.
     * @param {{}} [args]
     * @memberof ILanguageServer
     */
    loadExtension(args?: {}): void;
}
export declare enum PlatformName {
    Windows32Bit = "win-x86",
    Windows64Bit = "win-x64",
    Mac64Bit = "osx-x64",
    Linux64Bit = "linux-x64"
}
export declare const IPlatformData: unique symbol;
export interface IPlatformData {
    readonly platformName: PlatformName;
    readonly engineDllName: string;
    readonly engineExecutableName: string;
}
