// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const constants_1 = require("../../common/constants");
const types_1 = require("../../common/types");
const types_2 = require("../../ioc/types");
const types_3 = require("./types");
const function_1 = require("../../common/function");
let ApplicationDiagnostics = class ApplicationDiagnostics {
    constructor(serviceContainer, outputChannel) {
        this.serviceContainer = serviceContainer;
        this.outputChannel = outputChannel;
    }
    register() {
        this.serviceContainer.get(types_3.ISourceMapSupportService).register();
    }
    async performPreStartupHealthCheck(resource) {
        // When testing, do not perform health checks, as modal dialogs can be displayed.
        if (constants_1.isTestExecution()) {
            return;
        }
        const services = this.serviceContainer.getAll(types_3.IDiagnosticsService);
        // Perform these validation checks in the foreground.
        await this.runDiagnostics(services.filter(item => !item.runInBackground), resource);
        // Perform these validation checks in the background.
        this.runDiagnostics(services.filter(item => item.runInBackground), resource).catch(function_1.emptyFn);
    }
    async runDiagnostics(diagnosticServices, resource) {
        await Promise.all(diagnosticServices.map(async (diagnosticService) => {
            const diagnostics = await diagnosticService.diagnose(resource);
            if (diagnostics.length > 0) {
                this.log(diagnostics);
                await diagnosticService.handle(diagnostics);
            }
        }));
    }
    log(diagnostics) {
        const logger = this.serviceContainer.get(types_1.ILogger);
        diagnostics.forEach(item => {
            const message = `Diagnostic Code: ${item.code}, Message: ${item.message}`;
            switch (item.severity) {
                case vscode_languageserver_protocol_1.DiagnosticSeverity.Error: {
                    logger.logError(message);
                    this.outputChannel.appendLine(message);
                    break;
                }
                case vscode_languageserver_protocol_1.DiagnosticSeverity.Warning: {
                    logger.logWarning(message);
                    this.outputChannel.appendLine(message);
                    break;
                }
                default: {
                    logger.logInformation(message);
                }
            }
        });
    }
};
ApplicationDiagnostics = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_2.IServiceContainer)),
    __param(1, inversify_1.inject(types_1.IOutputChannel)), __param(1, inversify_1.named(constants_1.STANDARD_OUTPUT_CHANNEL))
], ApplicationDiagnostics);
exports.ApplicationDiagnostics = ApplicationDiagnostics;
//# sourceMappingURL=applicationDiagnostics.js.map