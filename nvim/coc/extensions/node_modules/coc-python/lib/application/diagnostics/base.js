"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var BaseDiagnosticsService_1;
'use strict';
const inversify_1 = require("inversify");
const coc_nvim_1 = require("coc.nvim");
const types_1 = require("./types");
let BaseDiagnostic = class BaseDiagnostic {
    constructor(code, message, severity, scope, resource, invokeHandler = 'default') {
        this.code = code;
        this.message = message;
        this.severity = severity;
        this.scope = scope;
        this.resource = resource;
        this.invokeHandler = invokeHandler;
    }
};
BaseDiagnostic = __decorate([
    inversify_1.injectable()
], BaseDiagnostic);
exports.BaseDiagnostic = BaseDiagnostic;
let BaseDiagnosticsService = BaseDiagnosticsService_1 = class BaseDiagnosticsService {
    constructor(supportedDiagnosticCodes, serviceContainer, runInBackground = false) {
        this.supportedDiagnosticCodes = supportedDiagnosticCodes;
        this.serviceContainer = serviceContainer;
        this.runInBackground = runInBackground;
        this.filterService = serviceContainer.get(types_1.IDiagnosticFilterService);
    }
    async handle(diagnostics) {
        if (diagnostics.length === 0) {
            return;
        }
        const diagnosticsToHandle = diagnostics.filter(item => {
            if (item.invokeHandler && item.invokeHandler === 'always') {
                return true;
            }
            const key = this.getDiagnosticsKey(item);
            if (BaseDiagnosticsService_1.handledDiagnosticCodeKeys.indexOf(key) !== -1) {
                return false;
            }
            BaseDiagnosticsService_1.handledDiagnosticCodeKeys.push(key);
            return true;
        });
        await this.onHandle(diagnosticsToHandle);
    }
    async canHandle(diagnostic) {
        // sendTelemetryEvent(EventName.DIAGNOSTICS_MESSAGE, undefined, { code: diagnostic.code })
        return this.supportedDiagnosticCodes.filter(item => item === diagnostic.code).length > 0;
    }
    /**
     * Returns a key used to keep track of whether a diagnostic was handled or not.
     * So as to prevent handling/displaying messages multiple times for the same diagnostic.
     *
     * @protected
     * @param {IDiagnostic} diagnostic
     * @returns {string}
     * @memberof BaseDiagnosticsService
     */
    getDiagnosticsKey(diagnostic) {
        if (diagnostic.scope === types_1.DiagnosticScope.Global) {
            return diagnostic.code;
        }
        const workspaceFolder = diagnostic.resource ? coc_nvim_1.workspace.workspaceFolder : undefined;
        return `${diagnostic.code}dbe75733-0407-4124-a1b2-ca769dc30523${workspaceFolder ? coc_nvim_1.workspace.rootPath : ''}`;
    }
};
BaseDiagnosticsService.handledDiagnosticCodeKeys = [];
BaseDiagnosticsService = BaseDiagnosticsService_1 = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.unmanaged()),
    __param(1, inversify_1.unmanaged()),
    __param(2, inversify_1.unmanaged())
], BaseDiagnosticsService);
exports.BaseDiagnosticsService = BaseDiagnosticsService;
//# sourceMappingURL=base.js.map