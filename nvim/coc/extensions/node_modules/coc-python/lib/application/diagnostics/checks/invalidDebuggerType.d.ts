import { IFileSystem } from '../../../common/platform/types';
import { Resource } from '../../../common/types';
import { IServiceContainer } from '../../../ioc/types';
import { BaseDiagnostic, BaseDiagnosticsService } from '../base';
import { MessageCommandPrompt } from '../promptHandler';
import { IDiagnostic, IDiagnosticHandlerService } from '../types';
export declare class InvalidDebuggerTypeDiagnostic extends BaseDiagnostic {
    constructor(message: string, resource: Resource);
}
export declare const InvalidDebuggerTypeDiagnosticsServiceId = "InvalidDebuggerTypeDiagnosticsServiceId";
export declare class InvalidDebuggerTypeDiagnosticsService extends BaseDiagnosticsService {
    protected readonly messageService: IDiagnosticHandlerService<MessageCommandPrompt>;
    protected readonly fs: IFileSystem;
    constructor(serviceContainer: IServiceContainer);
    diagnose(resource: Resource): Promise<IDiagnostic[]>;
    protected onHandle(diagnostics: IDiagnostic[]): Promise<void>;
}
