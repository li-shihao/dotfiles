// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const types_1 = require("../../../common/platform/types");
const types_2 = require("../../../ioc/types");
const base_1 = require("../base");
const constants_1 = require("../constants");
const promptHandler_1 = require("../promptHandler");
const types_3 = require("../types");
const InvalidDebuggerTypeMessage = 'Your launch.json file needs to be updated to change the "pythonExperimental" debug ' +
    'configurations to use the "python" debugger type, otherwise Python debugging may ' +
    'not work. Would you like to automatically update your launch.json file now?';
class InvalidDebuggerTypeDiagnostic extends base_1.BaseDiagnostic {
    constructor(message, resource) {
        super(constants_1.DiagnosticCodes.InvalidDebuggerTypeDiagnostic, message, vscode_languageserver_protocol_1.DiagnosticSeverity.Error, types_3.DiagnosticScope.WorkspaceFolder, resource, 'always');
    }
}
exports.InvalidDebuggerTypeDiagnostic = InvalidDebuggerTypeDiagnostic;
exports.InvalidDebuggerTypeDiagnosticsServiceId = 'InvalidDebuggerTypeDiagnosticsServiceId';
let InvalidDebuggerTypeDiagnosticsService = class InvalidDebuggerTypeDiagnosticsService extends base_1.BaseDiagnosticsService {
    constructor(serviceContainer) {
        super([constants_1.DiagnosticCodes.InvalidEnvironmentPathVariableDiagnostic], serviceContainer, true);
        this.messageService = serviceContainer.get(types_3.IDiagnosticHandlerService, promptHandler_1.DiagnosticCommandPromptHandlerServiceId);
        this.fs = this.serviceContainer.get(types_1.IFileSystem);
    }
    async diagnose(resource) {
        return [];
    }
    async onHandle(diagnostics) {
        // This class can only handle one type of diagnostic, hence just use first item in list.
        if (diagnostics.length === 0 || !this.canHandle(diagnostics[0])) {
            return;
        }
    }
};
InvalidDebuggerTypeDiagnosticsService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_2.IServiceContainer))
], InvalidDebuggerTypeDiagnosticsService);
exports.InvalidDebuggerTypeDiagnosticsService = InvalidDebuggerTypeDiagnosticsService;
//# sourceMappingURL=invalidDebuggerType.js.map