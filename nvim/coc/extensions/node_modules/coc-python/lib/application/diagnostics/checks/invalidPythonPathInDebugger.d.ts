import Uri from 'vscode-uri';
import { IDocumentManager } from '../../../common/application/types';
import { IConfigurationService, Resource } from '../../../common/types';
import { IInterpreterHelper } from '../../../interpreter/contracts';
import { IServiceContainer } from '../../../ioc/types';
import { BaseDiagnostic, BaseDiagnosticsService } from '../base';
import { IDiagnosticsCommandFactory } from '../commands/types';
import { DiagnosticCodes } from '../constants';
import { MessageCommandPrompt } from '../promptHandler';
import { IDiagnostic, IDiagnosticHandlerService, IInvalidPythonPathInDebuggerService } from '../types';
export declare class InvalidPythonPathInDebuggerDiagnostic extends BaseDiagnostic {
    constructor(code: DiagnosticCodes.InvalidPythonPathInDebuggerLaunchDiagnostic | DiagnosticCodes.InvalidPythonPathInDebuggerSettingsDiagnostic, resource: Resource);
}
export declare const InvalidPythonPathInDebuggerServiceId = "InvalidPythonPathInDebuggerServiceId";
export declare class InvalidPythonPathInDebuggerService extends BaseDiagnosticsService implements IInvalidPythonPathInDebuggerService {
    private readonly commandFactory;
    private readonly interpreterHelper;
    private readonly documentManager;
    private readonly configService;
    protected readonly messageService: IDiagnosticHandlerService<MessageCommandPrompt>;
    constructor(serviceContainer: IServiceContainer, commandFactory: IDiagnosticsCommandFactory, interpreterHelper: IInterpreterHelper, documentManager: IDocumentManager, configService: IConfigurationService, messageService: IDiagnosticHandlerService<MessageCommandPrompt>);
    diagnose(_resource: Resource): Promise<IDiagnostic[]>;
    validatePythonPath(pythonPath?: string, pythonPathSource?: any, resource?: Uri): Promise<boolean>;
    protected onHandle(diagnostics: IDiagnostic[]): Promise<void>;
    protected resolveVariables(pythonPath: string, _resource: Uri | undefined): string;
    private getCommandPrompts;
}
