// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const inversify_1 = require("inversify");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const types_1 = require("../../../common/application/types");
const types_2 = require("../../../common/types");
const localize_1 = require("../../../common/utils/localize");
const systemVariables_1 = require("../../../common/variables/systemVariables");
const contracts_1 = require("../../../interpreter/contracts");
const types_3 = require("../../../ioc/types");
const base_1 = require("../base");
const types_4 = require("../commands/types");
const constants_1 = require("../constants");
const promptHandler_1 = require("../promptHandler");
const types_5 = require("../types");
const messages = {
    [constants_1.DiagnosticCodes.InvalidPythonPathInDebuggerSettingsDiagnostic]: localize_1.Diagnostics.invalidPythonPathInDebuggerSettings(),
    [constants_1.DiagnosticCodes.InvalidPythonPathInDebuggerLaunchDiagnostic]: localize_1.Diagnostics.invalidPythonPathInDebuggerLaunch()
};
class InvalidPythonPathInDebuggerDiagnostic extends base_1.BaseDiagnostic {
    constructor(code, resource) {
        super(code, messages[code], vscode_languageserver_protocol_1.DiagnosticSeverity.Error, types_5.DiagnosticScope.WorkspaceFolder, resource, 'always');
    }
}
exports.InvalidPythonPathInDebuggerDiagnostic = InvalidPythonPathInDebuggerDiagnostic;
exports.InvalidPythonPathInDebuggerServiceId = 'InvalidPythonPathInDebuggerServiceId';
let InvalidPythonPathInDebuggerService = class InvalidPythonPathInDebuggerService extends base_1.BaseDiagnosticsService {
    constructor(serviceContainer, commandFactory, interpreterHelper, documentManager, configService, messageService) {
        super([
            constants_1.DiagnosticCodes.InvalidPythonPathInDebuggerSettingsDiagnostic,
            constants_1.DiagnosticCodes.InvalidPythonPathInDebuggerLaunchDiagnostic
        ], serviceContainer, true);
        this.commandFactory = commandFactory;
        this.interpreterHelper = interpreterHelper;
        this.documentManager = documentManager;
        this.configService = configService;
        this.messageService = messageService;
    }
    async diagnose(_resource) {
        return [];
    }
    async validatePythonPath(pythonPath, pythonPathSource, resource) {
        // pythonPath = pythonPath ? this.resolveVariables(pythonPath, resource) : undefined
        // // tslint:disable-next-line:no-invalid-template-strings
        // if (pythonPath === '${config:python.pythonPath}' || !pythonPath) {
        //   pythonPath = this.configService.getSettings(resource).pythonPath
        // }
        // if (await this.interpreterHelper.getInterpreterInformation(pythonPath).catch(() => undefined)) {
        //   return true
        // }
        // traceError(`Invalid Python Path '${pythonPath}'`)
        // if (pythonPathSource === pythonPathSource.launchJson) {
        //   this.handle([new InvalidPythonPathInDebuggerDiagnostic(DiagnosticCodes.InvalidPythonPathInDebuggerLaunchDiagnostic, resource)])
        //     .catch(ex => traceError('Failed to handle invalid python path in launch.json debugger', ex))
        //     .catch(emptyFn)
        // } else {
        //   this.handle([new InvalidPythonPathInDebuggerDiagnostic(DiagnosticCodes.InvalidPythonPathInDebuggerSettingsDiagnostic, resource)])
        //     .catch(ex => traceError('Failed to handle invalid python path in settings.json debugger', ex))
        //     .catch(emptyFn)
        // }
        return false;
    }
    async onHandle(diagnostics) {
        // This class can only handle one type of diagnostic, hence just use first item in list.
        if (diagnostics.length === 0 || !this.canHandle(diagnostics[0])) {
            return;
        }
        const diagnostic = diagnostics[0];
        const commandPrompts = this.getCommandPrompts(diagnostic);
        await this.messageService.handle(diagnostic, { commandPrompts });
    }
    resolveVariables(pythonPath, _resource) {
        const systemVariables = new systemVariables_1.SystemVariables(coc_nvim_1.workspace.rootPath);
        return systemVariables.resolveAny(pythonPath);
    }
    getCommandPrompts(diagnostic) {
        switch (diagnostic.code) {
            case constants_1.DiagnosticCodes.InvalidPythonPathInDebuggerSettingsDiagnostic: {
                return [
                    {
                        prompt: 'Select Python Interpreter',
                        command: this.commandFactory.createCommand(diagnostic, {
                            type: 'executeVSCCommand',
                            options: 'python.setInterpreter'
                        })
                    }
                ];
            }
            case constants_1.DiagnosticCodes.InvalidPythonPathInDebuggerLaunchDiagnostic: {
                return [
                    {
                        prompt: 'Open launch.json',
                        command: {
                            diagnostic,
                            invoke: async () => {
                                // const launchJson = this.getLaunchJsonFile(workspc.workspaceFolders![0])
                                // const doc = await this.documentManager.openTextDocument(launchJson)
                                // await this.documentManager.showTextDocument(doc)
                            }
                        }
                    }
                ];
            }
            default: {
                throw new Error('Invalid diagnostic for \'InvalidPythonPathInDebuggerService\'');
            }
        }
    }
};
InvalidPythonPathInDebuggerService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_3.IServiceContainer)),
    __param(1, inversify_1.inject(types_4.IDiagnosticsCommandFactory)),
    __param(2, inversify_1.inject(contracts_1.IInterpreterHelper)),
    __param(3, inversify_1.inject(types_1.IDocumentManager)),
    __param(4, inversify_1.inject(types_2.IConfigurationService)),
    __param(5, inversify_1.inject(types_5.IDiagnosticHandlerService)),
    __param(5, inversify_1.named(promptHandler_1.DiagnosticCommandPromptHandlerServiceId))
], InvalidPythonPathInDebuggerService);
exports.InvalidPythonPathInDebuggerService = InvalidPythonPathInDebuggerService;
//# sourceMappingURL=invalidPythonPathInDebugger.js.map