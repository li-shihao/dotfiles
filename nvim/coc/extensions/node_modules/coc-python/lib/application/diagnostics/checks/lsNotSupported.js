// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const types_1 = require("../../../activation/types");
const localize_1 = require("../../../common/utils/localize");
const types_2 = require("../../../ioc/types");
const base_1 = require("../base");
const types_3 = require("../commands/types");
const constants_1 = require("../constants");
const promptHandler_1 = require("../promptHandler");
const types_4 = require("../types");
class LSNotSupportedDiagnostic extends base_1.BaseDiagnostic {
    constructor(message, resource) {
        super(constants_1.DiagnosticCodes.LSNotSupportedDiagnostic, message, vscode_languageserver_protocol_1.DiagnosticSeverity.Warning, types_4.DiagnosticScope.Global, resource);
    }
}
exports.LSNotSupportedDiagnostic = LSNotSupportedDiagnostic;
exports.LSNotSupportedDiagnosticServiceId = 'LSNotSupportedDiagnosticServiceId';
let LSNotSupportedDiagnosticService = class LSNotSupportedDiagnosticService extends base_1.BaseDiagnosticsService {
    constructor(serviceContainer, lsCompatibility, messageService) {
        super([constants_1.DiagnosticCodes.LSNotSupportedDiagnostic], serviceContainer, false);
        this.lsCompatibility = lsCompatibility;
        this.messageService = messageService;
    }
    async diagnose(resource) {
        if (await this.lsCompatibility.isSupported()) {
            return [];
        }
        else {
            return [new LSNotSupportedDiagnostic(localize_1.Diagnostics.lsNotSupported(), resource)];
        }
    }
    async onHandle(diagnostics) {
        if (diagnostics.length === 0 || !this.canHandle(diagnostics[0])) {
            return;
        }
        const diagnostic = diagnostics[0];
        if (await this.filterService.shouldIgnoreDiagnostic(diagnostic.code)) {
            return;
        }
        const commandFactory = this.serviceContainer.get(types_3.IDiagnosticsCommandFactory);
        const options = [
            {
                prompt: 'More Info',
                command: commandFactory.createCommand(diagnostic, { type: 'launch', options: 'https://aka.ms/AA3qqka' })
            },
            {
                prompt: 'Do not show again',
                command: commandFactory.createCommand(diagnostic, { type: 'ignore', options: types_4.DiagnosticScope.Global })
            }
        ];
        await this.messageService.handle(diagnostic, { commandPrompts: options });
    }
};
LSNotSupportedDiagnosticService = __decorate([
    __param(0, inversify_1.inject(types_2.IServiceContainer)),
    __param(1, inversify_1.inject(types_1.ILanguageServerCompatibilityService)),
    __param(2, inversify_1.inject(types_4.IDiagnosticHandlerService)),
    __param(2, inversify_1.named(promptHandler_1.DiagnosticCommandPromptHandlerServiceId))
], LSNotSupportedDiagnosticService);
exports.LSNotSupportedDiagnosticService = LSNotSupportedDiagnosticService;
//# sourceMappingURL=lsNotSupported.js.map