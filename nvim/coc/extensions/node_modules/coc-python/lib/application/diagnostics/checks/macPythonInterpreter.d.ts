import { ConfigurationChangeEvent } from 'coc.nvim';
import { IPlatformService } from '../../../common/platform/types';
import { Resource } from '../../../common/types';
import { IInterpreterHelper, IInterpreterService } from '../../../interpreter/contracts';
import { IServiceContainer } from '../../../ioc/types';
import { BaseDiagnostic, BaseDiagnosticsService } from '../base';
import { DiagnosticCodes } from '../constants';
import { IDiagnostic } from '../types';
export declare class InvalidMacPythonInterpreterDiagnostic extends BaseDiagnostic {
    constructor(code: DiagnosticCodes.MacInterpreterSelectedAndNoOtherInterpretersDiagnostic | DiagnosticCodes.MacInterpreterSelectedAndHaveOtherInterpretersDiagnostic, resource: Resource);
}
export declare const InvalidMacPythonInterpreterServiceId = "InvalidMacPythonInterpreterServiceId";
export declare class InvalidMacPythonInterpreterService extends BaseDiagnosticsService {
    private readonly interpreterService;
    private readonly platform;
    private readonly helper;
    protected changeThrottleTimeout: number;
    private timeOut?;
    constructor(serviceContainer: IServiceContainer, interpreterService: IInterpreterService, platform: IPlatformService, helper: IInterpreterHelper);
    diagnose(resource: Resource): Promise<IDiagnostic[]>;
    protected onHandle(diagnostics: IDiagnostic[]): Promise<void>;
    protected addPythonPathChangedHandler(): void;
    protected onDidChangeConfiguration(event: ConfigurationChangeEvent): Promise<void>;
    private getCommandPrompts;
}
