// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const coc_nvim_1 = require("coc.nvim");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const vscode_uri_1 = __importDefault(require("vscode-uri"));
const types_1 = require("../../../common/application/types");
const types_2 = require("../../../common/platform/types");
const types_3 = require("../../../common/types");
const contracts_1 = require("../../../interpreter/contracts");
const types_4 = require("../../../ioc/types");
const base_1 = require("../base");
const types_5 = require("../commands/types");
const constants_1 = require("../constants");
const promptHandler_1 = require("../promptHandler");
const types_6 = require("../types");
const messages = {
    [constants_1.DiagnosticCodes.MacInterpreterSelectedAndHaveOtherInterpretersDiagnostic]: 'You have selected the macOS system install of Python, which is not recommended for use with the Python extension. Some functionality will be limited, please select a different interpreter.',
    [constants_1.DiagnosticCodes.MacInterpreterSelectedAndNoOtherInterpretersDiagnostic]: 'The macOS system install of Python is not recommended, some functionality in the extension will be limited. Install another version of Python for the best experience.'
};
class InvalidMacPythonInterpreterDiagnostic extends base_1.BaseDiagnostic {
    constructor(code, resource) {
        super(code, messages[code], vscode_languageserver_protocol_1.DiagnosticSeverity.Error, types_6.DiagnosticScope.WorkspaceFolder, resource);
    }
}
exports.InvalidMacPythonInterpreterDiagnostic = InvalidMacPythonInterpreterDiagnostic;
exports.InvalidMacPythonInterpreterServiceId = 'InvalidMacPythonInterpreterServiceId';
let InvalidMacPythonInterpreterService = class InvalidMacPythonInterpreterService extends base_1.BaseDiagnosticsService {
    constructor(serviceContainer, interpreterService, platform, helper) {
        super([
            constants_1.DiagnosticCodes.MacInterpreterSelectedAndHaveOtherInterpretersDiagnostic,
            constants_1.DiagnosticCodes.MacInterpreterSelectedAndNoOtherInterpretersDiagnostic
        ], serviceContainer, true);
        this.interpreterService = interpreterService;
        this.platform = platform;
        this.helper = helper;
        this.changeThrottleTimeout = 1000;
        this.addPythonPathChangedHandler();
    }
    async diagnose(resource) {
        if (!this.platform.isMac) {
            return [];
        }
        const configurationService = this.serviceContainer.get(types_3.IConfigurationService);
        const settings = configurationService.getSettings(resource);
        if (settings.disableInstallationChecks === true) {
            return [];
        }
        const hasInterpreters = await this.interpreterService.hasInterpreters;
        if (!hasInterpreters) {
            return [];
        }
        const currentInterpreter = await this.interpreterService.getActiveInterpreter(resource);
        if (!currentInterpreter) {
            return [];
        }
        if (!this.helper.isMacDefaultPythonPath(settings.pythonPath)) {
            return [];
        }
        if (!currentInterpreter || currentInterpreter.type !== contracts_1.InterpreterType.Unknown) {
            return [];
        }
        const interpreters = await this.interpreterService.getInterpreters(resource);
        if (interpreters.filter(i => !this.helper.isMacDefaultPythonPath(i.path)).length === 0) {
            return [
                new InvalidMacPythonInterpreterDiagnostic(constants_1.DiagnosticCodes.MacInterpreterSelectedAndNoOtherInterpretersDiagnostic, resource)
            ];
        }
        return [
            new InvalidMacPythonInterpreterDiagnostic(constants_1.DiagnosticCodes.MacInterpreterSelectedAndHaveOtherInterpretersDiagnostic, resource)
        ];
    }
    async onHandle(diagnostics) {
        if (diagnostics.length === 0) {
            return;
        }
        const messageService = this.serviceContainer.get(types_6.IDiagnosticHandlerService, promptHandler_1.DiagnosticCommandPromptHandlerServiceId);
        await Promise.all(diagnostics.map(async (diagnostic) => {
            const canHandle = await this.canHandle(diagnostic);
            const shouldIgnore = await this.filterService.shouldIgnoreDiagnostic(diagnostic.code);
            if (!canHandle || shouldIgnore) {
                return;
            }
            const commandPrompts = this.getCommandPrompts(diagnostic);
            return messageService.handle(diagnostic, { commandPrompts, message: diagnostic.message });
        }));
    }
    addPythonPathChangedHandler() {
        const workspaceService = this.serviceContainer.get(types_1.IWorkspaceService);
        const disposables = this.serviceContainer.get(types_3.IDisposableRegistry);
        disposables.push(workspaceService.onDidChangeConfiguration(this.onDidChangeConfiguration.bind(this)));
    }
    async onDidChangeConfiguration(event) {
        if (!event.affectsConfiguration('python.pythonPath'))
            return;
        // Lets wait, for more changes, dirty simple throttling.
        if (this.timeOut) {
            clearTimeout(this.timeOut);
            this.timeOut = undefined;
        }
        this.timeOut = setTimeout(() => {
            this.timeOut = undefined;
            this.diagnose(vscode_uri_1.default.parse(coc_nvim_1.workspace.rootPath))
                .then(diagnostics => this.handle(diagnostics))
                .catch(() => {
                // noop
            });
        }, this.changeThrottleTimeout);
    }
    getCommandPrompts(diagnostic) {
        const commandFactory = this.serviceContainer.get(types_5.IDiagnosticsCommandFactory);
        switch (diagnostic.code) {
            case constants_1.DiagnosticCodes.MacInterpreterSelectedAndHaveOtherInterpretersDiagnostic: {
                return [
                    {
                        prompt: 'Select Python Interpreter',
                        command: commandFactory.createCommand(diagnostic, {
                            type: 'executeVSCCommand',
                            options: 'python.setInterpreter'
                        })
                    },
                    {
                        prompt: 'Do not show again',
                        command: commandFactory.createCommand(diagnostic, {
                            type: 'ignore',
                            options: types_6.DiagnosticScope.Global
                        })
                    }
                ];
            }
            case constants_1.DiagnosticCodes.MacInterpreterSelectedAndNoOtherInterpretersDiagnostic: {
                return [
                    {
                        prompt: 'Learn more',
                        command: commandFactory.createCommand(diagnostic, {
                            type: 'launch',
                            options: 'https://code.visualstudio.com/docs/python/python-tutorial#_prerequisites'
                        })
                    },
                    {
                        prompt: 'Download',
                        command: commandFactory.createCommand(diagnostic, {
                            type: 'launch',
                            options: 'https://www.python.org/downloads'
                        })
                    },
                    {
                        prompt: 'Do not show again',
                        command: commandFactory.createCommand(diagnostic, {
                            type: 'ignore',
                            options: types_6.DiagnosticScope.Global
                        })
                    }
                ];
            }
            default: {
                throw new Error('Invalid diagnostic for \'InvalidMacPythonInterpreterService\'');
            }
        }
    }
};
InvalidMacPythonInterpreterService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_4.IServiceContainer)),
    __param(1, inversify_1.inject(contracts_1.IInterpreterService)),
    __param(2, inversify_1.inject(types_2.IPlatformService)),
    __param(3, inversify_1.inject(contracts_1.IInterpreterHelper))
], InvalidMacPythonInterpreterService);
exports.InvalidMacPythonInterpreterService = InvalidMacPythonInterpreterService;
//# sourceMappingURL=macPythonInterpreter.js.map