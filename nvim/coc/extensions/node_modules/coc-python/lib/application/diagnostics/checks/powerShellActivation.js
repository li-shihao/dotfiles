// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const types_1 = require("../../../ioc/types");
const base_1 = require("../base");
const types_2 = require("../commands/types");
const constants_1 = require("../constants");
const promptHandler_1 = require("../promptHandler");
const types_3 = require("../types");
const PowershellActivationNotSupportedWithBatchFilesMessage = 'Activation of the selected Python environment is not supported in PowerShell. Consider changing your shell to Command Prompt.';
class PowershellActivationNotAvailableDiagnostic extends base_1.BaseDiagnostic {
    constructor(resource) {
        super(constants_1.DiagnosticCodes.EnvironmentActivationInPowerShellWithBatchFilesNotSupportedDiagnostic, PowershellActivationNotSupportedWithBatchFilesMessage, vscode_languageserver_protocol_1.DiagnosticSeverity.Warning, types_3.DiagnosticScope.Global, resource, 'always');
    }
}
exports.PowershellActivationNotAvailableDiagnostic = PowershellActivationNotAvailableDiagnostic;
exports.PowerShellActivationHackDiagnosticsServiceId = 'EnvironmentActivationInPowerShellWithBatchFilesNotSupportedDiagnostic';
let PowerShellActivationHackDiagnosticsService = class PowerShellActivationHackDiagnosticsService extends base_1.BaseDiagnosticsService {
    constructor(serviceContainer) {
        super([constants_1.DiagnosticCodes.EnvironmentActivationInPowerShellWithBatchFilesNotSupportedDiagnostic], serviceContainer, true);
        this.messageService = serviceContainer.get(types_3.IDiagnosticHandlerService, promptHandler_1.DiagnosticCommandPromptHandlerServiceId);
    }
    async diagnose(_resource) {
        return [];
    }
    async onHandle(diagnostics) {
        // This class can only handle one type of diagnostic, hence just use first item in list.
        if (diagnostics.length === 0 || !this.canHandle(diagnostics[0])) {
            return;
        }
        const diagnostic = diagnostics[0];
        if (await this.filterService.shouldIgnoreDiagnostic(diagnostic.code)) {
            return;
        }
        const commandFactory = this.serviceContainer.get(types_2.IDiagnosticsCommandFactory);
        const options = [
            {
                prompt: 'Ignore'
            },
            {
                prompt: 'Always Ignore',
                command: commandFactory.createCommand(diagnostic, { type: 'ignore', options: types_3.DiagnosticScope.Global })
            },
            {
                prompt: 'More Info',
                command: commandFactory.createCommand(diagnostic, {
                    type: 'launch',
                    options: 'https://aka.ms/CondaPwsh'
                })
            }
        ];
        await this.messageService.handle(diagnostic, { commandPrompts: options });
    }
};
PowerShellActivationHackDiagnosticsService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_1.IServiceContainer))
], PowerShellActivationHackDiagnosticsService);
exports.PowerShellActivationHackDiagnosticsService = PowerShellActivationHackDiagnosticsService;
//# sourceMappingURL=powerShellActivation.js.map