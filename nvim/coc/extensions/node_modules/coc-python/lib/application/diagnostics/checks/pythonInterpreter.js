// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const types_1 = require("../../../common/types");
const contracts_1 = require("../../../interpreter/contracts");
const types_2 = require("../../../ioc/types");
const base_1 = require("../base");
const types_3 = require("../commands/types");
const constants_1 = require("../constants");
const promptHandler_1 = require("../promptHandler");
const types_4 = require("../types");
const messages = {
    [constants_1.DiagnosticCodes.NoPythonInterpretersDiagnostic]: 'Python is not installed. Please download and install Python before using the extension.',
    [constants_1.DiagnosticCodes.NoCurrentlySelectedPythonInterpreterDiagnostic]: 'No Python interpreter is selected. You need to select a Python interpreter to enable features such as IntelliSense, linting, and debugging.'
};
class InvalidPythonInterpreterDiagnostic extends base_1.BaseDiagnostic {
    constructor(code, resource) {
        super(code, messages[code], vscode_languageserver_protocol_1.DiagnosticSeverity.Error, types_4.DiagnosticScope.WorkspaceFolder, resource);
    }
}
exports.InvalidPythonInterpreterDiagnostic = InvalidPythonInterpreterDiagnostic;
exports.InvalidPythonInterpreterServiceId = 'InvalidPythonInterpreterServiceId';
let InvalidPythonInterpreterService = class InvalidPythonInterpreterService extends base_1.BaseDiagnosticsService {
    constructor(serviceContainer) {
        super([
            constants_1.DiagnosticCodes.NoPythonInterpretersDiagnostic,
            constants_1.DiagnosticCodes.NoCurrentlySelectedPythonInterpreterDiagnostic
        ], serviceContainer, false);
    }
    async diagnose(resource) {
        const configurationService = this.serviceContainer.get(types_1.IConfigurationService);
        const settings = configurationService.getSettings(resource);
        if (settings.disableInstallationChecks === true) {
            return [];
        }
        const interpreterService = this.serviceContainer.get(contracts_1.IInterpreterService);
        const hasInterpreters = await interpreterService.hasInterpreters;
        if (!hasInterpreters) {
            return [new InvalidPythonInterpreterDiagnostic(constants_1.DiagnosticCodes.NoPythonInterpretersDiagnostic, resource)];
        }
        const currentInterpreter = await interpreterService.getActiveInterpreter(resource);
        if (!currentInterpreter) {
            return [
                new InvalidPythonInterpreterDiagnostic(constants_1.DiagnosticCodes.NoCurrentlySelectedPythonInterpreterDiagnostic, resource)
            ];
        }
        return [];
    }
    async onHandle(diagnostics) {
        if (diagnostics.length === 0) {
            return;
        }
        const messageService = this.serviceContainer.get(types_4.IDiagnosticHandlerService, promptHandler_1.DiagnosticCommandPromptHandlerServiceId);
        await Promise.all(diagnostics.map(async (diagnostic) => {
            if (!this.canHandle(diagnostic)) {
                return;
            }
            const commandPrompts = this.getCommandPrompts(diagnostic);
            return messageService.handle(diagnostic, { commandPrompts, message: diagnostic.message });
        }));
    }
    getCommandPrompts(diagnostic) {
        const commandFactory = this.serviceContainer.get(types_3.IDiagnosticsCommandFactory);
        switch (diagnostic.code) {
            case constants_1.DiagnosticCodes.NoPythonInterpretersDiagnostic: {
                return [
                    {
                        prompt: 'Download',
                        command: commandFactory.createCommand(diagnostic, {
                            type: 'launch',
                            options: 'https://www.python.org/downloads'
                        })
                    }
                ];
            }
            case constants_1.DiagnosticCodes.NoCurrentlySelectedPythonInterpreterDiagnostic: {
                return [
                    {
                        prompt: 'Select Python Interpreter',
                        command: commandFactory.createCommand(diagnostic, {
                            type: 'executeVSCCommand',
                            options: 'python.setInterpreter'
                        })
                    }
                ];
            }
            default: {
                throw new Error('Invalid diagnostic for \'InvalidPythonInterpreterService\'');
            }
        }
    }
};
InvalidPythonInterpreterService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_2.IServiceContainer))
], InvalidPythonInterpreterService);
exports.InvalidPythonInterpreterService = InvalidPythonInterpreterService;
//# sourceMappingURL=pythonInterpreter.js.map