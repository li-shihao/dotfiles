import { CommandsWithoutArgs } from '../../../common/application/commands';
import { DiagnosticScope, IDiagnostic, IDiagnosticCommand } from '../types';
export interface CommandOption<Type, Option> {
    type: Type;
    options: Option;
}
export declare type LaunchBrowserOption = CommandOption<'launch', string>;
export declare type IgnoreDiagnostOption = CommandOption<'ignore', DiagnosticScope>;
export declare type ExecuteVSCCommandOption = CommandOption<'executeVSCCommand', CommandsWithoutArgs>;
export declare type CommandOptions = LaunchBrowserOption | IgnoreDiagnostOption | ExecuteVSCCommandOption;
export declare const IDiagnosticsCommandFactory: unique symbol;
export interface IDiagnosticsCommandFactory {
    createCommand(diagnostic: IDiagnostic, options: CommandOptions): IDiagnosticCommand;
}
