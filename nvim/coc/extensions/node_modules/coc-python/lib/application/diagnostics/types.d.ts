import { DiagnosticSeverity } from 'vscode-languageserver-protocol';
import { Resource } from '../../common/types';
import Uri from 'vscode-uri';
import { DiagnosticCodes } from './constants';
export declare enum DiagnosticScope {
    Global = "Global",
    WorkspaceFolder = "WorkspaceFolder"
}
export declare enum DiagnosticIgnoreScope {
    always = "always",
    session = "session"
}
export interface IDiagnostic {
    readonly code: DiagnosticCodes;
    readonly message: string;
    readonly severity: DiagnosticSeverity;
    readonly scope: DiagnosticScope;
    readonly resource: Resource;
    readonly invokeHandler: 'always' | 'default';
}
export declare const IDiagnosticsService: unique symbol;
export interface IDiagnosticsService {
    readonly runInBackground: Boolean;
    diagnose(resource: Resource): Promise<IDiagnostic[]>;
    canHandle(diagnostic: IDiagnostic): Promise<boolean>;
    handle(diagnostics: IDiagnostic[]): Promise<void>;
}
export declare const IDiagnosticFilterService: unique symbol;
export interface IDiagnosticFilterService {
    shouldIgnoreDiagnostic(code: string): Promise<boolean>;
    ignoreDiagnostic(code: string, scope: DiagnosticScope): Promise<void>;
}
export declare const IDiagnosticHandlerService: unique symbol;
export interface IDiagnosticHandlerService<T> {
    handle(diagnostic: IDiagnostic, options?: T): Promise<void>;
}
export interface IDiagnosticCommand {
    readonly diagnostic: IDiagnostic;
    invoke(): Promise<void>;
}
export declare const IInvalidPythonPathInDebuggerService: unique symbol;
export interface IInvalidPythonPathInDebuggerService extends IDiagnosticsService {
    validatePythonPath(pythonPath?: string, pythonPathSource?: any, resource?: Uri): Promise<boolean>;
}
export declare const ISourceMapSupportService: unique symbol;
export interface ISourceMapSupportService {
    register(): void;
    enable(): Promise<void>;
}
