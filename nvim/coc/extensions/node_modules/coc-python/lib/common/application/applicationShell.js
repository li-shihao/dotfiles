// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-var-requires no-any unified-signatures
const inversify_1 = require("inversify");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const coc_nvim_1 = require("coc.nvim");
let ApplicationShell = class ApplicationShell {
    constructor() {
        this.statusItem = coc_nvim_1.workspace.createStatusBarItem(99);
    }
    openUrl(url) {
        coc_nvim_1.workspace.openResource(url);
    }
    setStatusBarMessage(text, arg) {
        this.statusItem.text = text;
        if (text) {
            this.statusItem.show();
            if (typeof arg == 'number') {
                setTimeout(() => {
                    this.statusItem.hide();
                }, arg);
            }
            if (arg && typeof arg.then == 'function') {
                arg.then(() => {
                    this.statusItem.hide();
                });
            }
        }
        return vscode_languageserver_protocol_1.Disposable.create(() => {
            this.statusItem.hide();
        });
    }
    createStatusBarItem(priority) {
        return coc_nvim_1.workspace.createStatusBarItem(priority);
    }
};
ApplicationShell = __decorate([
    inversify_1.injectable()
], ApplicationShell);
exports.ApplicationShell = ApplicationShell;
//# sourceMappingURL=applicationShell.js.map