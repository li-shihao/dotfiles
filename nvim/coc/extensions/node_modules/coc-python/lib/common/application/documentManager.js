"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-any unified-signatures
const inversify_1 = require("inversify");
const coc_nvim_1 = require("coc.nvim");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
let DocumentManager = class DocumentManager {
    get textDocuments() {
        return coc_nvim_1.workspace.textDocuments;
    }
    get onDidOpenTextDocument() {
        return coc_nvim_1.workspace.onDidOpenTextDocument;
    }
    get onDidCloseTextDocument() {
        return coc_nvim_1.workspace.onDidCloseTextDocument;
    }
    get onDidSaveTextDocument() {
        return coc_nvim_1.workspace.onDidSaveTextDocument;
    }
    showTextDocument(uri, options, preserveFocus) {
        let u = vscode_languageserver_protocol_1.TextDocument.is(uri) ? uri.uri : uri.toString();
        let pos = null;
        if (vscode_languageserver_protocol_1.Position.is(options)) {
            pos = options;
        }
        let cmd = typeof options == 'string' ? options : null;
        return coc_nvim_1.workspace.jumpTo(uri, pos, cmd).then(() => {
            return coc_nvim_1.workspace.nvim.call('bufnr', '%');
        });
    }
    applyEdit(edit) {
        return coc_nvim_1.workspace.applyEdit(edit);
    }
    async openTextDocument(uri) {
        let doc = coc_nvim_1.workspace.getDocument(coc_nvim_1.workspace.bufnr);
        if (doc.uri == uri.toString())
            return doc.textDocument;
        await coc_nvim_1.workspace.jumpTo(uri.toString());
        doc = await coc_nvim_1.workspace.document;
        return doc.textDocument;
    }
};
DocumentManager = __decorate([
    inversify_1.injectable()
], DocumentManager);
exports.DocumentManager = DocumentManager;
//# sourceMappingURL=documentManager.js.map