"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const coc_nvim_1 = require("coc.nvim");
const util_1 = __importDefault(require("util"));
const vscode_uri_1 = __importDefault(require("vscode-uri"));
const glob_1 = __importDefault(require("glob"));
let WorkspaceService = class WorkspaceService {
    get onDidChangeConfiguration() {
        return coc_nvim_1.workspace.onDidChangeConfiguration;
    }
    get rootPath() {
        return coc_nvim_1.workspace.rootPath;
    }
    get workspaceFolders() {
        return coc_nvim_1.workspace.workspaceFolders;
    }
    getConfiguration(section, resource) {
        return coc_nvim_1.workspace.getConfiguration(section, resource ? resource.toString() : undefined);
    }
    createFileSystemWatcher(globPattern, _ignoreCreateEvents, ignoreChangeEvents, ignoreDeleteEvents) {
        return coc_nvim_1.workspace.createFileSystemWatcher(globPattern, ignoreChangeEvents, ignoreChangeEvents, ignoreDeleteEvents);
    }
    async findFiles(include, exclude, maxResults, _token) {
        let res = await util_1.default.promisify(glob_1.default)(include, {
            cwd: coc_nvim_1.workspace.root,
            ignore: exclude,
        });
        if (maxResults) {
            res = res.slice(0, maxResults);
        }
        return res.map(file => vscode_uri_1.default.file(file));
    }
    getWorkspaceFolder(uri) {
        if (uri)
            return coc_nvim_1.workspace.getWorkspaceFolder(uri.toString());
        return coc_nvim_1.workspace.workspaceFolder;
    }
    get hasWorkspaceFolders() {
        return coc_nvim_1.workspace.workspaceFolders.length > 0;
    }
    getWorkspaceFolderIdentifier(resource, defaultValue = '') {
        const workspaceFolder = resource ? this.getWorkspaceFolder(resource) : undefined;
        return workspaceFolder ? vscode_uri_1.default.parse(workspaceFolder.uri).fsPath : defaultValue;
    }
};
WorkspaceService = __decorate([
    inversify_1.injectable()
], WorkspaceService);
exports.WorkspaceService = WorkspaceService;
//# sourceMappingURL=workspace.js.map