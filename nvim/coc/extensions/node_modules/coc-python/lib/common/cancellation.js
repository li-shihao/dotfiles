// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const async_1 = require("./utils/async");
const localize = __importStar(require("./utils/localize"));
/**
 * Error type thrown when canceling.
 */
class CancellationError extends Error {
    constructor() {
        super(localize.Common.canceled());
    }
}
exports.CancellationError = CancellationError;
var Cancellation;
(function (Cancellation) {
    /**
     * Races a promise and cancellation. Promise can take a cancellation token too in order to listen to cancellation.
     * @param work function returning a promise to race
     * @param token token used for cancellation
     */
    function race(work, token) {
        if (token) {
            // Use a deferred promise. Resolves when the work finishes
            const deferred = async_1.createDeferred();
            // Cancel the deferred promise when the cancellation happens
            token.onCancellationRequested(() => {
                if (!deferred.completed) {
                    deferred.reject(new CancellationError());
                }
            });
            // Might already be canceled
            if (token.isCancellationRequested) {
                // Just start out as rejected
                deferred.reject(new CancellationError());
            }
            else {
                // Not canceled yet. When the work finishes
                // either resolve our promise or cancel.
                work(token)
                    .then((v) => {
                    if (!deferred.completed) {
                        deferred.resolve(v);
                    }
                })
                    .catch((e) => {
                    if (!deferred.completed) {
                        deferred.reject(e);
                    }
                });
            }
            return deferred.promise;
        }
        else {
            // No actual token, just do the original work.
            return work();
        }
    }
    Cancellation.race = race;
    /**
     * isCanceled returns a boolean indicating if the cancel token has been canceled.
     * @param cancelToken
     */
    function isCanceled(cancelToken) {
        return cancelToken ? cancelToken.isCancellationRequested : false;
    }
    Cancellation.isCanceled = isCanceled;
    /**
     * throws a CancellationError if the token is canceled.
     * @param cancelToken
     */
    function throwIfCanceled(cancelToken) {
        if (isCanceled(cancelToken)) {
            throw new CancellationError();
        }
    }
    Cancellation.throwIfCanceled = throwIfCanceled;
})(Cancellation = exports.Cancellation || (exports.Cancellation = {}));
//# sourceMappingURL=cancellation.js.map