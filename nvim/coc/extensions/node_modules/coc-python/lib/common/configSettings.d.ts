import { ConfigurationTarget, WorkspaceConfiguration } from 'coc.nvim';
import { Emitter, Event } from 'vscode-languageserver-protocol';
import Uri from 'vscode-uri';
import { IInterpreterAutoSeletionProxyService } from '../interpreter/autoSelection/types';
import { IWorkspaceService } from './application/types';
import { IAnalysisSettings, IAutoCompleteSettings, IDataScienceSettings, IFormattingSettings, ILintingSettings, IPythonSettings, ISortImportSettings, ITerminalSettings, IUnitTestSettings, IWorkspaceSymbolSettings, IPersistentStateFactory } from './types';
export declare class PythonSettings implements IPythonSettings {
    private readonly interpreterAutoSelectionService;
    private readonly stateFactory;
    private static pythonSettings;
    downloadLanguageServer: boolean;
    jediEnabled: boolean;
    jediPath: string;
    jediMemoryLimit: number;
    envFile: string;
    venvPath: string;
    venvFolders: string[];
    condaPath: string;
    pipenvPath: string;
    poetryPath: string;
    devOptions: string[];
    linting: ILintingSettings;
    formatting: IFormattingSettings;
    autoComplete: IAutoCompleteSettings;
    unitTest: IUnitTestSettings;
    terminal: ITerminalSettings;
    sortImports: ISortImportSettings;
    workspaceSymbols: IWorkspaceSymbolSettings;
    disableInstallationChecks: boolean;
    globalModuleInstallation: boolean;
    analysis: IAnalysisSettings;
    autoUpdateLanguageServer: boolean;
    datascience: IDataScienceSettings;
    protected readonly changed: Emitter<void>;
    private workspaceRoot;
    private disposables;
    private _pythonPath;
    private readonly workspace;
    readonly onDidChange: Event<void>;
    constructor(workspaceFolder: Uri | undefined, interpreterAutoSelectionService: IInterpreterAutoSeletionProxyService, stateFactory: IPersistentStateFactory, workspace?: IWorkspaceService);
    static getInstance(resource: Uri | undefined, interpreterAutoSelectionService: IInterpreterAutoSeletionProxyService, stateFactory: IPersistentStateFactory, workspace?: IWorkspaceService): PythonSettings;
    static getSettingsUriAndTarget(resource: Uri | undefined, workspace?: IWorkspaceService): {
        uri: Uri | undefined;
        target: ConfigurationTarget;
    };
    static dispose(): void;
    dispose(): void;
    protected update(pythonSettings: WorkspaceConfiguration): void;
    pythonPath: string;
    protected getPythonExecutable(pythonPath: string): string;
    protected onWorkspaceFoldersChanged(): void;
    protected initialize(): void;
    protected debounceChangeNotification(): void;
}
