// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const types_1 = require("../platform/types");
const platform_1 = require("../utils/platform");
const types_2 = require("./types");
/**
 * .NET Core 2.1 OS Requirements
 * https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1-supported-os.md
 * We are using the versions provided in the above .NET 2.1 Core requirements page as minimum required versions.
 * Why, cuz getting distros, mapping them to the ones listd on .NET 2.1 Core requirements are entirely accurate.
 * Due to the inaccuracy, its easier and safer to just assume futur versions of an OS are also supported.
 * We will need to regularly update the requirements over time, when using .NET Core 2.2 or 3, etc.
 */
let DotNetCompatibilityService = class DotNetCompatibilityService {
    constructor(unknownOsService, macService, winService, linuxService, platformService) {
        this.platformService = platformService;
        this.mappedServices = new Map();
        this.mappedServices.set(platform_1.OSType.Unknown, unknownOsService);
        this.mappedServices.set(platform_1.OSType.OSX, macService);
        this.mappedServices.set(platform_1.OSType.Windows, winService);
        this.mappedServices.set(platform_1.OSType.Linux, linuxService);
    }
    // tslint:disable-next-line: typedef
    isSupported() {
        return this.mappedServices.get(this.platformService.osType).isSupported();
    }
};
DotNetCompatibilityService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_2.IOSDotNetCompatibilityService)), __param(0, inversify_1.named(platform_1.OSType.Unknown)),
    __param(1, inversify_1.inject(types_2.IOSDotNetCompatibilityService)), __param(1, inversify_1.named(platform_1.OSType.OSX)),
    __param(2, inversify_1.inject(types_2.IOSDotNetCompatibilityService)), __param(2, inversify_1.named(platform_1.OSType.Windows)),
    __param(3, inversify_1.inject(types_2.IOSDotNetCompatibilityService)), __param(3, inversify_1.named(platform_1.OSType.Linux)),
    __param(4, inversify_1.inject(types_1.IPlatformService))
], DotNetCompatibilityService);
exports.DotNetCompatibilityService = DotNetCompatibilityService;
//# sourceMappingURL=compatibilityService.js.map