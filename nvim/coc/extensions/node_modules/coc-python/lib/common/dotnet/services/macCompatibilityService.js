// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const types_1 = require("../../platform/types");
// Min version on https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1-supported-os.md is 10.12.
// On this site https://en.wikipedia.org/wiki/MacOS_Sierra, that maps to 16.0.0.
const minVersion = '16.0.0';
let MacDotNetCompatibilityService = class MacDotNetCompatibilityService {
    constructor(platformService) {
        this.platformService = platformService;
    }
    // tslint:disable-next-line: typedef
    async isSupported() {
        const version = await this.platformService.getVersion();
        return version.compare(minVersion) >= 0;
    }
};
MacDotNetCompatibilityService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_1.IPlatformService))
], MacDotNetCompatibilityService);
exports.MacDotNetCompatibilityService = MacDotNetCompatibilityService;
//# sourceMappingURL=macCompatibilityService.js.map