"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const inversify_1 = require("inversify");
const contracts_1 = require("../../interpreter/contracts");
const types_1 = require("../../ioc/types");
const productNames_1 = require("./productNames");
const types_2 = require("./types");
let InstallationChannelManager = class InstallationChannelManager {
    constructor(serviceContainer) {
        this.serviceContainer = serviceContainer;
    }
    async getInstallationChannel(product, resource) {
        const channels = await this.getInstallationChannels(resource);
        if (channels.length === 1) {
            return channels[0];
        }
        const productName = productNames_1.ProductNames.get(product);
        if (channels.length === 0) {
            await this.showNoInstallersMessage(resource);
            return;
        }
        const placeHolder = `Select an option to install ${productName}`;
        const options = channels.map(installer => {
            return {
                label: `Install using ${installer.displayName}`,
                description: '',
                installer
            };
        });
        const idx = await coc_nvim_1.workspace.showQuickpick(options.map(o => o.label), placeHolder);
        return idx == -1 ? undefined : options[idx].installer;
    }
    async getInstallationChannels(resource) {
        const installers = this.serviceContainer.getAll(types_2.IModuleInstaller);
        const supportedInstallers = [];
        if (installers.length === 0) {
            return [];
        }
        // group by priority and pick supported from the highest priority
        installers.sort((a, b) => b.priority - a.priority);
        let currentPri = installers[0].priority;
        for (const mi of installers) {
            if (mi.priority !== currentPri) {
                if (supportedInstallers.length > 0) {
                    break; // return highest priority supported installers
                }
                // If none supported, try next priority group
                currentPri = mi.priority;
            }
            if (await mi.isSupported(resource)) {
                supportedInstallers.push(mi);
            }
        }
        return supportedInstallers;
    }
    async showNoInstallersMessage(resource) {
        const interpreters = this.serviceContainer.get(contracts_1.IInterpreterService);
        const interpreter = await interpreters.getActiveInterpreter(resource);
        if (!interpreter) {
            return; // Handled in the Python installation check.
        }
        if (interpreter.type === contracts_1.InterpreterType.Conda) {
            coc_nvim_1.workspace.showMessage('There is no Conda or Pip installer available in the selected environment.', 'error');
        }
        else {
            coc_nvim_1.workspace.showMessage('There is no Pip installer available in the selected environment.', 'error');
        }
    }
};
InstallationChannelManager = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_1.IServiceContainer))
], InstallationChannelManager);
exports.InstallationChannelManager = InstallationChannelManager;
//# sourceMappingURL=channelManager.js.map