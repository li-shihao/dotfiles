"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const inversify_1 = require("inversify");
const path = __importStar(require("path"));
const coc_nvim_1 = require("coc.nvim");
const contracts_1 = require("../../interpreter/contracts");
const constants_1 = require("../constants");
const types_1 = require("../types");
const misc_1 = require("../utils/misc");
let ModuleInstaller = class ModuleInstaller {
    constructor(serviceContainer) {
        this.serviceContainer = serviceContainer;
    }
    async installModule(name, resource) {
        const executionInfo = await this.getExecutionInfo(name, resource);
        const executionInfoArgs = await this.processInstallArgs(executionInfo.args, resource);
        if (executionInfo.moduleName) {
            const configService = this.serviceContainer.get(types_1.IConfigurationService);
            const settings = configService.getSettings(resource);
            const args = ['-m', executionInfo.moduleName].concat(executionInfoArgs);
            const pythonPath = settings.pythonPath;
            const interpreterService = this.serviceContainer.get(contracts_1.IInterpreterService);
            const currentInterpreter = await interpreterService.getActiveInterpreter(resource);
            if (!currentInterpreter || currentInterpreter.type !== contracts_1.InterpreterType.Unknown) {
                await coc_nvim_1.workspace.runTerminalCommand(`${pythonPath} ${args.join(' ')}`);
            }
            else if (settings.globalModuleInstallation) {
                if (await this.isPathWritableAsync(path.dirname(pythonPath))) {
                    await coc_nvim_1.workspace.runTerminalCommand(`${pythonPath} ${args.join(' ')}`);
                }
                else {
                    this.elevatedInstall(pythonPath, args);
                }
            }
            else {
                await coc_nvim_1.workspace.runTerminalCommand(`${pythonPath} ${args.concat(['--user']).join(' ')}`);
            }
        }
        else {
            await coc_nvim_1.workspace.runTerminalCommand(`${executionInfo.execPath} ${executionInfoArgs.join(' ')}`);
        }
    }
    async processInstallArgs(args, resource) {
        const indexOfPylint = args.findIndex(arg => arg.toUpperCase() === 'PYLINT');
        if (indexOfPylint === -1) {
            return args;
        }
        // If installing pylint on python 2.x, then use pylint~=1.9.0
        const interpreterService = this.serviceContainer.get(contracts_1.IInterpreterService);
        const currentInterpreter = await interpreterService.getActiveInterpreter(resource);
        if (currentInterpreter && currentInterpreter.version && currentInterpreter.version.major === 2) {
            const newArgs = [...args];
            // This command could be sent to the terminal, hence '<' needs to be escaped for UNIX.
            newArgs[indexOfPylint] = '"pylint<2.0.0"';
            return newArgs;
        }
        return args;
    }
    async isPathWritableAsync(directoryPath) {
        const filePath = `${directoryPath}${path.sep}___vscpTest___`;
        return new Promise(resolve => {
            fs.open(filePath, fs.constants.O_CREAT | fs.constants.O_RDWR, (error, fd) => {
                if (!error) {
                    fs.close(fd, () => {
                        fs.unlink(filePath, misc_1.noop);
                    });
                }
                return resolve(!error);
            });
        });
    }
    elevatedInstall(execPath, args) {
        const options = {
            name: 'VS Code Python'
        };
        const outputChannel = this.serviceContainer.get(types_1.IOutputChannel, constants_1.STANDARD_OUTPUT_CHANNEL);
        const command = `"${execPath.replace(/\\/g, '/')}" ${args.join(' ')}`;
        outputChannel.appendLine('');
        outputChannel.appendLine(`[Elevated] ${command}`);
        // tslint:disable-next-line:no-require-imports no-var-requires
        const sudo = require('sudo-prompt');
        sudo.exec(command, options, (error, stdout, stderr) => {
            if (error) {
                coc_nvim_1.workspace.showMessage(error, 'error');
            }
            else {
                outputChannel.show();
                if (stdout) {
                    outputChannel.appendLine('');
                    outputChannel.append(stdout);
                }
                if (stderr) {
                    outputChannel.appendLine('');
                    outputChannel.append(`Warning: ${stderr}`);
                }
            }
        });
    }
};
ModuleInstaller = __decorate([
    inversify_1.injectable()
], ModuleInstaller);
exports.ModuleInstaller = ModuleInstaller;
//# sourceMappingURL=moduleInstaller.js.map