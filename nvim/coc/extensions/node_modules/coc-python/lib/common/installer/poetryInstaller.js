// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const path = __importStar(require("path"));
const coc_nvim_1 = require("coc.nvim");
const vscode_uri_1 = __importDefault(require("vscode-uri"));
const types_1 = require("../../ioc/types");
const types_2 = require("../application/types");
const logger_1 = require("../logger");
const types_3 = require("../platform/types");
const types_4 = require("../process/types");
const types_5 = require("../types");
const moduleInstaller_1 = require("./moduleInstaller");
exports.poetryName = 'poetry';
const poetryFile = 'poetry.lock';
let PoetryInstaller = class PoetryInstaller extends moduleInstaller_1.ModuleInstaller {
    constructor(serviceContainer, workspaceService, configurationService, fs, processFactory) {
        super(serviceContainer);
        this.workspaceService = workspaceService;
        this.configurationService = configurationService;
        this.fs = fs;
        this.processFactory = processFactory;
    }
    get displayName() {
        return exports.poetryName;
    }
    get priority() {
        return 10;
    }
    async isSupported(resource) {
        if (!resource) {
            return false;
        }
        const workspaceFolder = coc_nvim_1.workspace.workspaceFolder;
        if (!workspaceFolder) {
            return false;
        }
        if (!(await this.fs.fileExists(path.join(coc_nvim_1.workspace.rootPath, poetryFile)))) {
            return false;
        }
        return this.isPoetryAvailable(vscode_uri_1.default.parse(workspaceFolder.uri));
    }
    async isPoetryAvailable(workfolder) {
        try {
            const processService = await this.processFactory.create(workfolder);
            const execPath = this.configurationService.getSettings(workfolder).poetryPath;
            const result = await processService.exec(execPath, ['list'], { cwd: workfolder.fsPath });
            return result && ((result.stderr || '').trim().length === 0);
        }
        catch (error) {
            logger_1.traceError(`${poetryFile} exists but Poetry not found`, error);
            return false;
        }
    }
    async getExecutionInfo(moduleName, resource) {
        const execPath = this.configurationService.getSettings(resource).poetryPath;
        return {
            args: ['add', moduleName],
            execPath
        };
    }
};
PoetryInstaller = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_1.IServiceContainer)),
    __param(1, inversify_1.inject(types_2.IWorkspaceService)),
    __param(2, inversify_1.inject(types_5.IConfigurationService)),
    __param(3, inversify_1.inject(types_3.IFileSystem)),
    __param(4, inversify_1.inject(types_4.IProcessServiceFactory))
], PoetryInstaller);
exports.PoetryInstaller = PoetryInstaller;
//# sourceMappingURL=poetryInstaller.js.map