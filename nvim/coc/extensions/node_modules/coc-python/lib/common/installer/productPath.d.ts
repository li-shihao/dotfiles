import Uri from 'vscode-uri';
import { IServiceContainer } from '../../ioc/types';
import { IConfigurationService, IInstaller, Product } from '../types';
import { IProductPathService } from './types';
declare abstract class BaseProductPathsService implements IProductPathService {
    protected serviceContainer: IServiceContainer;
    protected readonly configService: IConfigurationService;
    protected readonly productInstaller: IInstaller;
    constructor(serviceContainer: IServiceContainer);
    abstract getExecutableNameFromSettings(product: Product, resource?: Uri): string;
    isExecutableAModule(product: Product, resource?: Uri): Boolean;
}
export declare class CTagsProductPathService extends BaseProductPathsService {
    constructor(serviceContainer: IServiceContainer);
    getExecutableNameFromSettings(_: Product, resource?: Uri): string;
}
export declare class FormatterProductPathService extends BaseProductPathsService {
    constructor(serviceContainer: IServiceContainer);
    getExecutableNameFromSettings(product: Product, resource?: Uri): string;
}
export declare class LinterProductPathService extends BaseProductPathsService {
    constructor(serviceContainer: IServiceContainer);
    getExecutableNameFromSettings(product: Product, resource?: Uri): string;
}
export declare class RefactoringLibraryProductPathService extends BaseProductPathsService {
    constructor(serviceContainer: IServiceContainer);
    getExecutableNameFromSettings(product: Product, _?: Uri): string;
}
export {};
