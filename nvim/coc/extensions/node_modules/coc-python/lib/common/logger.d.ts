import { ILogger } from './types';
export declare class Logger implements ILogger {
    static error(title: string, message: any): void;
    static warn(title?: string, message?: any): void;
    static verbose(title?: string): void;
    logError(message: string, ex?: Error): void;
    logWarning(message: string, ex?: Error): void;
    logInformation(message: string, ex?: Error): void;
}
export declare enum LogOptions {
    None = 0,
    Arguments = 1,
    ReturnValue = 2
}
export declare function traceVerbose(message: string): void;
export declare function traceError(message: string, ex?: Error): void;
export declare function traceInfo(message: string): void;
export declare namespace traceDecorators {
    function verbose(message: string, options?: LogOptions): (_: Object, __: string, descriptor: TypedPropertyDescriptor<any>) => TypedPropertyDescriptor<any>;
    function error(message: string): (_: Object, __: string, descriptor: TypedPropertyDescriptor<any>) => TypedPropertyDescriptor<any>;
    function info(message: string): (_: Object, __: string, descriptor: TypedPropertyDescriptor<any>) => TypedPropertyDescriptor<any>;
    function warn(message: string): (_: Object, __: string, descriptor: TypedPropertyDescriptor<any>) => TypedPropertyDescriptor<any>;
}
