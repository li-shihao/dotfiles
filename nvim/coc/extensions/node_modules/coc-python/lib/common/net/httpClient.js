// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const coc_nvim_1 = require("coc.nvim");
let HttpClient = class HttpClient {
    constructor() {
        this.requestOptions = { proxy: coc_nvim_1.workspace.getConfiguration('http').get('proxy', '') };
    }
    async downloadFile(uri) {
        // tslint:disable-next-line:no-any
        const request = await Promise.resolve().then(() => __importStar(require('request')));
        return request.default(uri, this.requestOptions);
    }
    async getJSON(uri) {
        // tslint:disable-next-line:no-require-imports
        const request = require('request');
        return new Promise((resolve, reject) => {
            request(uri, this.requestOptions, (ex, response, body) => {
                if (ex) {
                    return reject(ex);
                }
                if (response.statusCode !== 200) {
                    return reject(new Error(`Failed with status ${response.statusCode}, ${response.statusMessage}, Uri ${uri}`));
                }
                resolve(JSON.parse(body));
            });
        });
    }
};
HttpClient = __decorate([
    inversify_1.injectable()
], HttpClient);
exports.HttpClient = HttpClient;
//# sourceMappingURL=httpClient.js.map