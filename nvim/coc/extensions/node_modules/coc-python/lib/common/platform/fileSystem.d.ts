/// <reference types="node" />
import * as fileSystem from 'fs';
import fs from 'fs-extra';
import { IFileSystem, IPlatformService, TemporaryFile } from './types';
export declare class FileSystem implements IFileSystem {
    private platformService;
    constructor(platformService: IPlatformService);
    readonly directorySeparatorChar: string;
    objectExists(filePath: string, statCheck: (s: fs.Stats) => boolean): Promise<boolean>;
    fileExists(filePath: string): Promise<boolean>;
    fileExistsSync(filePath: string): boolean;
    /**
     * Reads the contents of the file using utf8 and returns the string contents.
     * @param {string} filePath
     * @returns {Promise<string>}
     * @memberof FileSystem
     */
    readFile(filePath: string): Promise<string>;
    writeFile(filePath: string, data: {}, options?: string | fs.WriteFileOptions): Promise<void>;
    directoryExists(filePath: string): Promise<boolean>;
    createDirectory(directoryPath: string): Promise<void>;
    deleteDirectory(directoryPath: string): Promise<void>;
    getSubDirectories(rootDir: string): Promise<string[]>;
    getFiles(rootDir: string): Promise<string[]>;
    arePathsSame(path1: string, path2: string): boolean;
    appendFileSync(filename: string, data: {}, encoding: string): void;
    appendFileSync(filename: string, data: {}, options?: {
        encoding?: string;
        mode?: number;
        flag?: string;
    }): void;
    appendFileSync(filename: string, data: {}, options?: {
        encoding?: string;
        mode?: string;
        flag?: string;
    }): void;
    getRealPath(filePath: string): Promise<string>;
    copyFile(src: string, dest: string): Promise<void>;
    deleteFile(filename: string): Promise<void>;
    getFileHash(filePath: string): Promise<string | undefined>;
    search(globPattern: string): Promise<string[]>;
    createTemporaryFile(extension: string): Promise<TemporaryFile>;
    createWriteStream(filePath: string): fileSystem.WriteStream;
    chmod(filePath: string, mode: string): Promise<void>;
}
