// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const os = __importStar(require("os"));
const semver_1 = require("semver");
const platform_1 = require("../utils/platform");
const version_1 = require("../utils/version");
const constants_1 = require("./constants");
let PlatformService = class PlatformService {
    constructor() {
        this.osType = getOSType();
    }
    get pathVariableName() {
        return this.isWindows ? constants_1.WINDOWS_PATH_VARIABLE_NAME : constants_1.NON_WINDOWS_PATH_VARIABLE_NAME;
    }
    get virtualEnvBinName() {
        return this.isWindows ? 'Scripts' : 'bin';
    }
    async getVersion() {
        if (this.version) {
            return this.version;
        }
        switch (this.osType) {
            case platform_1.OSType.Windows:
            case platform_1.OSType.OSX:
                // Release section of https://en.wikipedia.org/wiki/MacOS_Sierra.
                // Version 10.12 maps to Darwin 16.0.0.
                // Using os.relase() we get the darwin release #.
                try {
                    const ver = semver_1.coerce(os.release());
                    if (ver) {
                        return this.version = ver;
                    }
                    throw new Error('Unable to parse version');
                }
                catch (ex) {
                    return version_1.parseVersion(os.release());
                }
            default:
                throw new Error('Not Supported');
        }
    }
    get isWindows() {
        return this.osType === platform_1.OSType.Windows;
    }
    get isMac() {
        return this.osType === platform_1.OSType.OSX;
    }
    get isLinux() {
        return this.osType === platform_1.OSType.Linux;
    }
    get is64bit() {
        // tslint:disable-next-line:no-require-imports
        const arch = require('arch');
        return arch() === 'x64';
    }
};
PlatformService = __decorate([
    inversify_1.injectable()
], PlatformService);
exports.PlatformService = PlatformService;
function getOSType(platform = process.platform) {
    if (/^win/.test(platform)) {
        return platform_1.OSType.Windows;
    }
    else if (/^darwin/.test(platform)) {
        return platform_1.OSType.OSX;
    }
    else if (/^linux/.test(platform)) {
        return platform_1.OSType.Linux;
    }
    else {
        return platform_1.OSType.Unknown;
    }
}
//# sourceMappingURL=platformService.js.map