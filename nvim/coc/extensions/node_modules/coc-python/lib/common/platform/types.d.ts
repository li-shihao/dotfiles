/// <reference types="node" />
import fs from 'fs';
import fsextra from 'fs-extra';
import { SemVer } from 'semver';
import { Disposable } from 'vscode-languageserver-protocol';
import { Architecture, OSType } from '../utils/platform';
export declare enum RegistryHive {
    HKCU = 0,
    HKLM = 1
}
export declare const IRegistry: unique symbol;
export interface IRegistry {
    getKeys(key: string, hive: RegistryHive, arch?: Architecture): Promise<string[]>;
    getValue(key: string, hive: RegistryHive, arch?: Architecture, name?: string): Promise<string | undefined | null>;
}
export declare const IPlatformService: unique symbol;
export interface IPlatformService {
    readonly osType: OSType;
    readonly pathVariableName: 'Path' | 'PATH';
    readonly virtualEnvBinName: 'bin' | 'Scripts';
    readonly isWindows: boolean;
    readonly isMac: boolean;
    readonly isLinux: boolean;
    readonly is64bit: boolean;
    getVersion(): Promise<SemVer>;
}
export declare type TemporaryFile = {
    filePath: string;
} & Disposable;
export declare type TemporaryDirectory = {
    path: string;
} & Disposable;
export declare const IFileSystem: unique symbol;
export interface IFileSystem {
    directorySeparatorChar: string;
    objectExists(path: string, statCheck: (s: fs.Stats) => boolean): Promise<boolean>;
    fileExists(path: string): Promise<boolean>;
    fileExistsSync(path: string): boolean;
    directoryExists(path: string): Promise<boolean>;
    createDirectory(path: string): Promise<void>;
    deleteDirectory(path: string): Promise<void>;
    getSubDirectories(rootDir: string): Promise<string[]>;
    getFiles(rootDir: string): Promise<string[]>;
    arePathsSame(path1: string, path2: string): boolean;
    readFile(filePath: string): Promise<string>;
    writeFile(filePath: string, data: {}, options?: string | fsextra.WriteFileOptions): Promise<void>;
    appendFileSync(filename: string, data: {}, encoding: string): void;
    appendFileSync(filename: string, data: {}, options?: {
        encoding?: string;
        mode?: number;
        flag?: string;
    }): void;
    appendFileSync(filename: string, data: {}, options?: {
        encoding?: string;
        mode?: string;
        flag?: string;
    }): void;
    getRealPath(path: string): Promise<string>;
    copyFile(src: string, dest: string): Promise<void>;
    deleteFile(filename: string): Promise<void>;
    getFileHash(filePath: string): Promise<string | undefined>;
    search(globPattern: string): Promise<string[]>;
    createTemporaryFile(extension: string): Promise<TemporaryFile>;
    createWriteStream(path: string): fs.WriteStream;
    chmod(path: string, mode: string): Promise<void>;
}
