import { EnvironmentVariables } from '../variables/types';
import { ExecutionResult, IBufferDecoder, IProcessService, ObservableExecutionResult, ShellOptions, SpawnOptions } from './types';
export declare class ProcessService implements IProcessService {
    private readonly decoder;
    private readonly env?;
    constructor(decoder: IBufferDecoder, env?: EnvironmentVariables);
    static isAlive(pid: number): boolean;
    static kill(pid: number): void;
    execObservable(file: string, args: string[], options?: SpawnOptions): ObservableExecutionResult<string>;
    exec(file: string, args: string[], options?: SpawnOptions): Promise<ExecutionResult<string>>;
    shellExec(command: string, options?: ShellOptions): Promise<ExecutionResult<string>>;
    private getDefaultOptions;
}
