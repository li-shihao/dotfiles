import { IEnvironmentActivationService } from '../../interpreter/activation/types';
import { IServiceContainer } from '../../ioc/types';
import { IConfigurationService } from '../types';
import { ExecutionFactoryCreateWithEnvironmentOptions, ExecutionFactoryCreationOptions, IBufferDecoder, IProcessServiceFactory, IPythonExecutionFactory, IPythonExecutionService } from './types';
export declare class PythonExecutionFactory implements IPythonExecutionFactory {
    private serviceContainer;
    private readonly activationHelper;
    private readonly processServiceFactory;
    private readonly configService;
    private readonly decoder;
    constructor(serviceContainer: IServiceContainer, activationHelper: IEnvironmentActivationService, processServiceFactory: IProcessServiceFactory, configService: IConfigurationService, decoder: IBufferDecoder);
    create(options: ExecutionFactoryCreationOptions): Promise<IPythonExecutionService>;
    createActivatedEnvironment(options: ExecutionFactoryCreateWithEnvironmentOptions): Promise<IPythonExecutionService>;
}
