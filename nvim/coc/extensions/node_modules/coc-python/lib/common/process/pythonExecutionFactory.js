"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
const inversify_1 = require("inversify");
const types_1 = require("../../interpreter/activation/types");
const types_2 = require("../../ioc/types");
const types_3 = require("../types");
const proc_1 = require("./proc");
const pythonProcess_1 = require("./pythonProcess");
const types_4 = require("./types");
let PythonExecutionFactory = class PythonExecutionFactory {
    constructor(serviceContainer, activationHelper, processServiceFactory, configService, decoder) {
        this.serviceContainer = serviceContainer;
        this.activationHelper = activationHelper;
        this.processServiceFactory = processServiceFactory;
        this.configService = configService;
        this.decoder = decoder;
    }
    async create(options) {
        const pythonPath = options.pythonPath ? options.pythonPath : this.configService.getSettings(options.resource).pythonPath;
        const processService = await this.processServiceFactory.create(options.resource);
        return new pythonProcess_1.PythonExecutionService(this.serviceContainer, processService, pythonPath);
    }
    async createActivatedEnvironment(options) {
        const envVars = await this.activationHelper.getActivatedEnvironmentVariables(options.resource, options.interpreter, options.allowEnvironmentFetchExceptions);
        const hasEnvVars = envVars && Object.keys(envVars).length > 0;
        if (!hasEnvVars) {
            return this.create({ resource: options.resource, pythonPath: options.interpreter ? options.interpreter.path : undefined });
        }
        const pythonPath = options.interpreter ? options.interpreter.path : this.configService.getSettings(options.resource).pythonPath;
        const processService = new proc_1.ProcessService(this.decoder, Object.assign({}, envVars));
        return new pythonProcess_1.PythonExecutionService(this.serviceContainer, processService, pythonPath);
    }
};
PythonExecutionFactory = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_2.IServiceContainer)),
    __param(1, inversify_1.inject(types_1.IEnvironmentActivationService)),
    __param(2, inversify_1.inject(types_4.IProcessServiceFactory)),
    __param(3, inversify_1.inject(types_3.IConfigurationService)),
    __param(4, inversify_1.inject(types_4.IBufferDecoder))
], PythonExecutionFactory);
exports.PythonExecutionFactory = PythonExecutionFactory;
//# sourceMappingURL=pythonExecutionFactory.js.map