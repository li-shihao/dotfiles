"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const path = __importStar(require("path"));
const constants_1 = require("../constants");
const errorUtils_1 = require("../errors/errorUtils");
const moduleNotInstalledError_1 = require("../errors/moduleNotInstalledError");
const logger_1 = require("../logger");
const types_1 = require("../platform/types");
const platform_1 = require("../utils/platform");
const version_1 = require("../utils/version");
let PythonExecutionService = class PythonExecutionService {
    constructor(serviceContainer, procService, pythonPath) {
        this.procService = procService;
        this.pythonPath = pythonPath;
        this.fileSystem = serviceContainer.get(types_1.IFileSystem);
    }
    async getInterpreterInformation() {
        const file = path.join(constants_1.EXTENSION_ROOT_DIR, 'pythonFiles', 'interpreterInfo.py');
        try {
            const jsonValue = await this.procService.exec(this.pythonPath, [file], { mergeStdOutErr: true })
                .then(output => output.stdout.trim());
            let json;
            try {
                json = JSON.parse(jsonValue);
            }
            catch (ex) {
                logger_1.traceError(`Failed to parse interpreter information for '${this.pythonPath}' with JSON ${jsonValue}`, ex);
                return;
            }
            const versionValue = json.versionInfo.length === 4 ? `${json.versionInfo.slice(0, 3).join('.')}-${json.versionInfo[3]}` : json.versionInfo.join('.');
            return {
                architecture: json.is64Bit ? platform_1.Architecture.x64 : platform_1.Architecture.x86,
                path: this.pythonPath,
                version: version_1.parsePythonVersion(versionValue),
                sysVersion: json.sysVersion,
                sysPrefix: json.sysPrefix
            };
        }
        catch (ex) {
            logger_1.traceError(`Failed to get interpreter information for '${this.pythonPath}'`, ex);
        }
    }
    async getExecutablePath() {
        // If we've passed the python file, then return the file.
        // This is because on mac if using the interpreter /usr/bin/python2.7 we can get a different value for the path
        if (await this.fileSystem.fileExists(this.pythonPath)) {
            return this.pythonPath;
        }
        return this.procService.exec(this.pythonPath, ['-c', 'import sys;print(sys.executable)'], { throwOnStdErr: true })
            .then(output => output.stdout.trim());
    }
    async isModuleInstalled(moduleName) {
        return this.procService.exec(this.pythonPath, ['-c', `import ${moduleName}`], { throwOnStdErr: true })
            .then(() => true).catch(() => false);
    }
    execObservable(args, options) {
        const opts = Object.assign({}, options);
        return this.procService.execObservable(this.pythonPath, args, opts);
    }
    execModuleObservable(moduleName, args, options) {
        const opts = Object.assign({}, options);
        return this.procService.execObservable(this.pythonPath, ['-m', moduleName, ...args], opts);
    }
    async exec(args, options) {
        const opts = Object.assign({}, options);
        return this.procService.exec(this.pythonPath, args, opts);
    }
    async execModule(moduleName, args, options) {
        const opts = Object.assign({}, options);
        const result = await this.procService.exec(this.pythonPath, ['-m', moduleName, ...args], opts);
        // If a module is not installed we'll have something in stderr.
        if (moduleName && errorUtils_1.ErrorUtils.outputHasModuleNotInstalledError(moduleName, result.stderr)) {
            const isInstalled = await this.isModuleInstalled(moduleName);
            if (!isInstalled) {
                throw new moduleNotInstalledError_1.ModuleNotInstalledError(moduleName);
            }
        }
        return result;
    }
};
PythonExecutionService = __decorate([
    inversify_1.injectable()
], PythonExecutionService);
exports.PythonExecutionService = PythonExecutionService;
//# sourceMappingURL=pythonProcess.js.map