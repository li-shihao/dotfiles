"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Split a string using the cr and lf characters and return them as an array.
 * By default lines are trimmed and empty lines are removed.
 * @param {SplitLinesOptions=} splitOptions - Options used for splitting the string.
 */
function splitLines(str, splitOptions = { removeEmptyEntries: true, trim: true }) {
    let lines = str.split(/\r?\n/g);
    if (splitOptions && splitOptions.trim) {
        lines = lines.map(line => line.trim());
    }
    if (splitOptions && splitOptions.removeEmptyEntries) {
        lines = lines.filter(line => line.length > 0);
    }
    return lines;
}
exports.splitLines = splitLines;
/**
 * Appropriately formats a string so it can be used as an argument for a command in a shell.
 * E.g. if an argument contains a space, then it will be enclosed within double quotes.
 * @param {String} value.
 */
function toCommandArgument(str) {
    if (!str) {
        return str;
    }
    return (str.indexOf(' ') >= 0 && !str.startsWith('"') && !str.endsWith('"')) ? `"${str}"` : str.toString();
}
exports.toCommandArgument = toCommandArgument;
/**
 * Appropriately formats a a file path so it can be used as an argument for a command in a shell.
 * E.g. if an argument contains a space, then it will be enclosed within double quotes.
 */
function fileToCommandArgument(str) {
    if (!str) {
        return str;
    }
    return toCommandArgument(str).replace(/\\/g, '/');
}
exports.fileToCommandArgument = fileToCommandArgument;
/**
 * String.trimQuotes implementation
 * Removes leading and trailing quotes from a string
 */
function trimQuotes(str) {
    if (!str) {
        return str;
    }
    return str.replace(/(^['"])|(['"]$)/g, '');
}
exports.trimQuotes = trimQuotes;
function format(str, ...args) {
    // tslint:disable-next-line: variable-name
    return str.replace(/{(\d+)}/g, (match, n) => args[n] === undefined ? match : args[n]);
}
exports.format = format;
//# sourceMappingURL=string.js.map