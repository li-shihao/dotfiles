// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const async_1 = require("../../utils/async");
const types_1 = require("../types");
class BaseTerminalActivator {
    constructor(helper) {
        this.helper = helper;
        this.activatedTerminals = new Map();
    }
    async activateEnvironmentInTerminal(terminal, resource, preserveFocus = true) {
        if (this.activatedTerminals.has(terminal)) {
            return this.activatedTerminals.get(terminal);
        }
        const deferred = async_1.createDeferred();
        this.activatedTerminals.set(terminal, deferred.promise);
        const shellPath = this.helper.getTerminalShellPath();
        const terminalShellType = !shellPath || shellPath.length === 0 ? types_1.TerminalShellType.other : this.helper.identifyTerminalShell(shellPath);
        const activationCommamnds = await this.helper.getEnvironmentActivationCommands(terminalShellType, resource);
        let activated = false;
        if (activationCommamnds) {
            for (const command of activationCommamnds) {
                terminal.show(preserveFocus);
                terminal.sendText(command);
                await this.waitForCommandToProcess(terminalShellType);
                activated = true;
            }
        }
        deferred.resolve(activated);
        return activated;
    }
    async waitForCommandToProcess(_shell) {
        // Give the command some time to complete.
        // Its been observed that sending commands too early will strip some text off in VS Code Terminal.
        await async_1.sleep(500);
    }
}
exports.BaseTerminalActivator = BaseTerminalActivator;
//# sourceMappingURL=base.js.map