import Uri from 'vscode-uri';
import { ICondaService } from '../../../interpreter/contracts';
import { IPlatformService } from '../../platform/types';
import { IConfigurationService } from '../../types';
import { ITerminalActivationCommandProvider, TerminalShellType } from '../types';
/**
 * Support conda env activation (in the terminal).
 */
export declare class CondaActivationCommandProvider implements ITerminalActivationCommandProvider {
    private readonly condaService;
    private platform;
    private configService;
    constructor(condaService: ICondaService, platform: IPlatformService, configService: IConfigurationService);
    /**
     * Is the given shell supported for activating a conda env?
     */
    isShellSupported(_targetShell: TerminalShellType): boolean;
    /**
     * Return the command needed to activate the conda env.
     */
    getActivationCommands(resource: Uri | undefined, targetShell: TerminalShellType): Promise<string[] | undefined>;
    /**
     * Return the command needed to activate the conda env.
     *
     */
    getActivationCommandsForInterpreter(pythonPath: string, targetShell: TerminalShellType): Promise<string[] | undefined>;
    getWindowsActivateCommand(): Promise<string>;
    getWindowsCommands(envName: string): Promise<string[] | undefined>;
    getPowershellCommands(_envName: string, _targetShell: TerminalShellType): Promise<string[] | undefined>;
    getFishCommands(envName: string, conda: string): Promise<string[] | undefined>;
    getUnixCommands(envName: string, conda: string): Promise<string[] | undefined>;
}
