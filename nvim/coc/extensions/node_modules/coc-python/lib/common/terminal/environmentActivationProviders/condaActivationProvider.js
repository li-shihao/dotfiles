// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const path = __importStar(require("path"));
const contracts_1 = require("../../../interpreter/contracts");
const types_1 = require("../../platform/types");
const types_2 = require("../../types");
const types_3 = require("../types");
const string_1 = require("../../string");
// Version number of conda that requires we call activate with 'conda activate' instead of just 'activate'
const CondaRequiredMajor = 4;
const CondaRequiredMinor = 4;
/**
 * Support conda env activation (in the terminal).
 */
let CondaActivationCommandProvider = class CondaActivationCommandProvider {
    constructor(condaService, platform, configService) {
        this.condaService = condaService;
        this.platform = platform;
        this.configService = configService;
    }
    /**
     * Is the given shell supported for activating a conda env?
     */
    isShellSupported(_targetShell) {
        return true;
    }
    /**
     * Return the command needed to activate the conda env.
     */
    getActivationCommands(resource, targetShell) {
        const pythonPath = this.configService.getSettings(resource).pythonPath;
        return this.getActivationCommandsForInterpreter(pythonPath, targetShell);
    }
    /**
     * Return the command needed to activate the conda env.
     *
     */
    async getActivationCommandsForInterpreter(pythonPath, targetShell) {
        const envInfo = await this.condaService.getCondaEnvironment(pythonPath);
        if (!envInfo) {
            return;
        }
        // Algorithm differs based on version
        // Old version, just call activate directly.
        // New version, call activate from the same path as our python path, then call it again to activate our environment.
        // -- note that the 'default' conda location won't allow activate to work for the environment sometimes.
        const versionInfo = await this.condaService.getCondaVersion();
        if (versionInfo && (versionInfo.major > CondaRequiredMajor || (versionInfo.major === CondaRequiredMajor && versionInfo.minor >= CondaRequiredMinor))) {
            // New version.
            const interpreterPath = await this.condaService.getCondaFileFromInterpreter(pythonPath, envInfo.name);
            if (interpreterPath) {
                const activatePath = string_1.fileToCommandArgument(path.join(path.dirname(interpreterPath), 'activate'));
                const firstActivate = this.platform.isWindows ?
                    activatePath :
                    `source ${activatePath}`;
                return [
                    firstActivate,
                    `conda activate ${string_1.toCommandArgument(envInfo.name)}`
                ];
            }
        }
        // Old version. Just call activate next to conda
        if (this.platform.isWindows) {
            // windows activate can be a bit tricky due to conda changes.
            switch (targetShell) {
                case types_3.TerminalShellType.powershell:
                case types_3.TerminalShellType.powershellCore:
                    return this.getPowershellCommands(envInfo.name, targetShell);
                // tslint:disable-next-line:no-suspicious-comment
                // TODO: Do we really special-case fish on Windows?
                case types_3.TerminalShellType.fish:
                    return this.getFishCommands(envInfo.name, await this.condaService.getCondaFile());
                default:
                    return this.getWindowsCommands(envInfo.name);
            }
        }
        else {
            switch (targetShell) {
                case types_3.TerminalShellType.powershell:
                case types_3.TerminalShellType.powershellCore:
                    return;
                // tslint:disable-next-line:no-suspicious-comment
                // TODO: What about pre-4.4.0?
                case types_3.TerminalShellType.fish:
                    return this.getFishCommands(envInfo.name, await this.condaService.getCondaFile());
                default:
                    return this.getUnixCommands(envInfo.name, await this.condaService.getCondaFile());
            }
        }
    }
    async getWindowsActivateCommand() {
        let activateCmd = 'activate';
        const condaExePath = await this.condaService.getCondaFile();
        if (condaExePath && path.basename(condaExePath) !== condaExePath) {
            const condaScriptsPath = path.dirname(condaExePath);
            // prefix the cmd with the found path, and ensure it's quoted properly
            activateCmd = path.join(condaScriptsPath, activateCmd);
            activateCmd = string_1.toCommandArgument(activateCmd);
        }
        return activateCmd;
    }
    async getWindowsCommands(envName) {
        const activate = await this.getWindowsActivateCommand();
        return [
            `${activate} ${string_1.toCommandArgument(envName)}`
        ];
    }
    async getPowershellCommands(_envName, _targetShell) {
        return;
    }
    async getFishCommands(envName, conda) {
        // https://github.com/conda/conda/blob/be8c08c083f4d5e05b06bd2689d2cd0d410c2ffe/shell/etc/fish/conf.d/conda.fish#L18-L28
        return [
            `${string_1.fileToCommandArgument(conda)} activate ${string_1.toCommandArgument(envName)}`
        ];
    }
    async getUnixCommands(envName, conda) {
        const condaDir = path.dirname(conda);
        const activateFile = path.join(condaDir, 'activate');
        return [
            `source ${string_1.fileToCommandArgument(activateFile)} ${string_1.toCommandArgument(envName)}`
        ];
    }
};
CondaActivationCommandProvider = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(contracts_1.ICondaService)),
    __param(1, inversify_1.inject(types_1.IPlatformService)),
    __param(2, inversify_1.inject(types_2.IConfigurationService))
], CondaActivationCommandProvider);
exports.CondaActivationCommandProvider = CondaActivationCommandProvider;
//# sourceMappingURL=condaActivationProvider.js.map