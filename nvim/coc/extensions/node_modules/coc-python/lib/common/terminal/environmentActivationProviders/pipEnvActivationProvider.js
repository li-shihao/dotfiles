// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const contracts_1 = require("../../../interpreter/contracts");
const types_1 = require("../../application/types");
const types_2 = require("../../platform/types");
const coc_nvim_1 = require("coc.nvim");
const string_1 = require("../../string");
let PipEnvActivationCommandProvider = class PipEnvActivationCommandProvider {
    constructor(interpreterService, pipenvService, workspaceService, fs) {
        this.interpreterService = interpreterService;
        this.pipenvService = pipenvService;
        this.workspaceService = workspaceService;
        this.fs = fs;
    }
    isShellSupported(_targetShell) {
        return false;
    }
    async getActivationCommands(resource, _) {
        const interpreter = await this.interpreterService.getActiveInterpreter(resource);
        if (!interpreter || interpreter.type !== contracts_1.InterpreterType.Pipenv) {
            return;
        }
        // Activate using `pipenv shell` only if the current folder relates pipenv environment.
        if (!this.fs.arePathsSame(coc_nvim_1.workspace.rootPath, interpreter.pipEnvWorkspaceFolder)) {
            return;
        }
        const execName = this.pipenvService.executable;
        return [`${string_1.fileToCommandArgument(execName)} shell`];
    }
    async getActivationCommandsForInterpreter(pythonPath, _targetShell) {
        const interpreter = await this.interpreterService.getInterpreterDetails(pythonPath);
        if (!interpreter || interpreter.type !== contracts_1.InterpreterType.Pipenv) {
            return;
        }
        const execName = this.pipenvService.executable;
        return [`${string_1.fileToCommandArgument(execName)} shell`];
    }
};
PipEnvActivationCommandProvider = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(contracts_1.IInterpreterService)),
    __param(1, inversify_1.inject(contracts_1.IPipEnvService)),
    __param(2, inversify_1.inject(types_1.IWorkspaceService)),
    __param(3, inversify_1.inject(types_2.IFileSystem))
], PipEnvActivationCommandProvider);
exports.PipEnvActivationCommandProvider = PipEnvActivationCommandProvider;
//# sourceMappingURL=pipEnvActivationProvider.js.map