// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const contracts_1 = require("../../../interpreter/contracts");
const types_1 = require("../../../ioc/types");
const string_1 = require("../../string");
let PyEnvActivationCommandProvider = class PyEnvActivationCommandProvider {
    constructor(serviceContainer) {
        this.serviceContainer = serviceContainer;
    }
    isShellSupported(_targetShell) {
        return true;
    }
    async getActivationCommands(resource, _) {
        const interpreter = await this.serviceContainer.get(contracts_1.IInterpreterService).getActiveInterpreter(resource);
        if (!interpreter || interpreter.type !== contracts_1.InterpreterType.Pyenv || !interpreter.envName) {
            return;
        }
        return [`pyenv shell ${string_1.toCommandArgument(interpreter.envName)}`];
    }
    async getActivationCommandsForInterpreter(pythonPath, _targetShell) {
        const interpreter = await this.serviceContainer.get(contracts_1.IInterpreterService).getInterpreterDetails(pythonPath);
        if (!interpreter || interpreter.type !== contracts_1.InterpreterType.Pyenv || !interpreter.envName) {
            return;
        }
        return [`pyenv shell ${string_1.toCommandArgument(interpreter.envName)}`];
    }
};
PyEnvActivationCommandProvider = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_1.IServiceContainer))
], PyEnvActivationCommandProvider);
exports.PyEnvActivationCommandProvider = PyEnvActivationCommandProvider;
//# sourceMappingURL=pyenvActivationProvider.js.map