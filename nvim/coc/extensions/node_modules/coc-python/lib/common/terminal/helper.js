"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const contracts_1 = require("../../interpreter/contracts");
const types_1 = require("../application/types");
const types_2 = require("../platform/types");
const types_3 = require("../types");
const platform_1 = require("../utils/platform");
const types_4 = require("./types");
const string_1 = require("../string");
// Types of shells can be found here:
// 1. https://wiki.ubuntu.com/ChangingShells
const IS_GITBASH = /(gitbash.exe$)/i;
const IS_BASH = /(bash.exe$|bash$)/i;
const IS_WSL = /(wsl.exe$)/i;
const IS_ZSH = /(zsh$)/i;
const IS_KSH = /(ksh$)/i;
const IS_COMMAND = /cmd.exe$/i;
const IS_POWERSHELL = /(powershell.exe$|powershell$)/i;
const IS_POWERSHELL_CORE = /(pwsh.exe$|pwsh$)/i;
const IS_FISH = /(fish$)/i;
const IS_CSHELL = /(csh$)/i;
const IS_TCSHELL = /(tcsh$)/i;
const IS_XONSH = /(xonsh$)/i;
const defaultOSShells = {
    [platform_1.OSType.Linux]: types_4.TerminalShellType.bash,
    [platform_1.OSType.OSX]: types_4.TerminalShellType.bash,
    [platform_1.OSType.Windows]: types_4.TerminalShellType.commandPrompt,
    [platform_1.OSType.Unknown]: undefined
};
let TerminalHelper = class TerminalHelper {
    constructor(platform, terminalManager, workspace, condaService, interpreterService, configurationService, conda, bashCShellFish, commandPromptAndPowerShell, pyenv, pipenv) {
        this.platform = platform;
        this.terminalManager = terminalManager;
        this.workspace = workspace;
        this.condaService = condaService;
        this.interpreterService = interpreterService;
        this.configurationService = configurationService;
        this.conda = conda;
        this.bashCShellFish = bashCShellFish;
        this.commandPromptAndPowerShell = commandPromptAndPowerShell;
        this.pyenv = pyenv;
        this.pipenv = pipenv;
        this.detectableShells = new Map();
        this.detectableShells.set(types_4.TerminalShellType.powershell, IS_POWERSHELL);
        this.detectableShells.set(types_4.TerminalShellType.gitbash, IS_GITBASH);
        this.detectableShells.set(types_4.TerminalShellType.bash, IS_BASH);
        this.detectableShells.set(types_4.TerminalShellType.wsl, IS_WSL);
        this.detectableShells.set(types_4.TerminalShellType.zsh, IS_ZSH);
        this.detectableShells.set(types_4.TerminalShellType.ksh, IS_KSH);
        this.detectableShells.set(types_4.TerminalShellType.commandPrompt, IS_COMMAND);
        this.detectableShells.set(types_4.TerminalShellType.fish, IS_FISH);
        this.detectableShells.set(types_4.TerminalShellType.tcshell, IS_TCSHELL);
        this.detectableShells.set(types_4.TerminalShellType.cshell, IS_CSHELL);
        this.detectableShells.set(types_4.TerminalShellType.powershellCore, IS_POWERSHELL_CORE);
        this.detectableShells.set(types_4.TerminalShellType.xonsh, IS_XONSH);
    }
    createTerminal(title) {
        return this.terminalManager.createTerminal({ name: title });
    }
    identifyTerminalShell(shellPath) {
        return Array.from(this.detectableShells.keys())
            .reduce((matchedShell, shellToDetect) => {
            if (matchedShell === types_4.TerminalShellType.other && this.detectableShells.get(shellToDetect).test(shellPath)) {
                return shellToDetect;
            }
            return matchedShell;
        }, types_4.TerminalShellType.other);
    }
    getTerminalShellPath() {
        const shellConfig = this.workspace.getConfiguration('terminal.integrated.shell');
        let osSection = '';
        switch (this.platform.osType) {
            case platform_1.OSType.Windows: {
                osSection = 'windows';
                break;
            }
            case platform_1.OSType.OSX: {
                osSection = 'osx';
                break;
            }
            case platform_1.OSType.Linux: {
                osSection = 'linux';
                break;
            }
            default: {
                return '';
            }
        }
        return shellConfig.get(osSection);
    }
    buildCommandForTerminal(terminalShellType, command, args) {
        const isPowershell = terminalShellType === types_4.TerminalShellType.powershell || terminalShellType === types_4.TerminalShellType.powershellCore;
        const commandPrefix = isPowershell ? '& ' : '';
        return `${commandPrefix}${string_1.fileToCommandArgument(command)} ${args.join(' ')}`.trim();
    }
    async getEnvironmentActivationCommands(terminalShellType, resource) {
        const providers = [this.pipenv, this.pyenv, this.bashCShellFish, this.commandPromptAndPowerShell];
        const promise = this.getActivationCommands(resource || undefined, undefined, terminalShellType, providers);
        return promise;
    }
    async getEnvironmentActivationShellCommands(resource, interpreter) {
        const shell = defaultOSShells[this.platform.osType];
        if (!shell) {
            return;
        }
        const providers = [this.bashCShellFish, this.commandPromptAndPowerShell];
        const promise = this.getActivationCommands(resource, interpreter, shell, providers);
        return promise;
    }
    async getActivationCommands(resource, interpreter, terminalShellType, providers) {
        const settings = this.configurationService.getSettings(resource);
        const activateEnvironment = settings.terminal.activateEnvironment;
        if (!activateEnvironment) {
            return;
        }
        // If we have a conda environment, then use that.
        const isCondaEnvironment = await this.condaService.isCondaEnvironment(settings.pythonPath);
        if (isCondaEnvironment) {
            const activationCommands = interpreter ?
                await this.conda.getActivationCommandsForInterpreter(interpreter.path, terminalShellType) :
                await this.conda.getActivationCommands(resource, terminalShellType);
            if (Array.isArray(activationCommands)) {
                return activationCommands;
            }
        }
        // Search from the list of providers.
        const supportedProviders = providers.filter(provider => provider.isShellSupported(terminalShellType));
        for (const provider of supportedProviders) {
            const activationCommands = interpreter ?
                await provider.getActivationCommandsForInterpreter(interpreter.path, terminalShellType) :
                await provider.getActivationCommands(resource, terminalShellType);
            if (Array.isArray(activationCommands) && activationCommands.length > 0) {
                return activationCommands;
            }
        }
    }
};
TerminalHelper = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_2.IPlatformService)),
    __param(1, inversify_1.inject(types_1.ITerminalManager)),
    __param(2, inversify_1.inject(types_1.IWorkspaceService)),
    __param(3, inversify_1.inject(contracts_1.ICondaService)),
    __param(4, inversify_1.inject(contracts_1.IInterpreterService)),
    __param(5, inversify_1.inject(types_3.IConfigurationService)),
    __param(6, inversify_1.inject(types_4.ITerminalActivationCommandProvider)), __param(6, inversify_1.named(types_4.TerminalActivationProviders.conda)),
    __param(7, inversify_1.inject(types_4.ITerminalActivationCommandProvider)), __param(7, inversify_1.named(types_4.TerminalActivationProviders.bashCShellFish)),
    __param(8, inversify_1.inject(types_4.ITerminalActivationCommandProvider)), __param(8, inversify_1.named(types_4.TerminalActivationProviders.commandPromptAndPowerShell)),
    __param(9, inversify_1.inject(types_4.ITerminalActivationCommandProvider)), __param(9, inversify_1.named(types_4.TerminalActivationProviders.pyenv)),
    __param(10, inversify_1.inject(types_4.ITerminalActivationCommandProvider)), __param(10, inversify_1.named(types_4.TerminalActivationProviders.pipenv))
], TerminalHelper);
exports.TerminalHelper = TerminalHelper;
//# sourceMappingURL=helper.js.map