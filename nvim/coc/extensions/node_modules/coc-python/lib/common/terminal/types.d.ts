import { Terminal } from 'coc.nvim';
import { Event } from 'vscode-languageserver-protocol';
import Uri from 'vscode-uri';
import { PythonInterpreter } from '../../interpreter/contracts';
import { Resource } from '../types';
export declare enum TerminalActivationProviders {
    bashCShellFish = "bashCShellFish",
    commandPromptAndPowerShell = "commandPromptAndPowerShell",
    pyenv = "pyenv",
    conda = "conda",
    pipenv = "pipenv"
}
export declare enum TerminalShellType {
    powershell = "powershell",
    powershellCore = "powershellCore",
    commandPrompt = "commandPrompt",
    gitbash = "gitbash",
    bash = "bash",
    zsh = "zsh",
    ksh = "ksh",
    fish = "fish",
    cshell = "cshell",
    tcshell = "tshell",
    wsl = "wsl",
    xonsh = "xonsh",
    other = "other"
}
export interface ITerminalService {
    readonly onDidCloseTerminal: Event<void>;
    sendCommand(command: string, args: string[]): Promise<void>;
    sendText(text: string): Promise<void>;
    show(preserveFocus?: boolean): Promise<void>;
}
export declare const ITerminalServiceFactory: unique symbol;
export interface ITerminalServiceFactory {
    /**
     * Gets a terminal service with a specific title.
     * If one exists, its returned else a new one is created.
     * @param {Uri} resource
     * @param {string} title
     * @returns {ITerminalService}
     * @memberof ITerminalServiceFactory
     */
    getTerminalService(resource?: Uri, title?: string): ITerminalService;
    createTerminalService(resource?: Uri, title?: string): ITerminalService;
}
export declare const ITerminalHelper: unique symbol;
export interface ITerminalHelper {
    createTerminal(title?: string): Promise<Terminal>;
    identifyTerminalShell(shellPath: string): TerminalShellType;
    getTerminalShellPath(): string;
    buildCommandForTerminal(terminalShellType: TerminalShellType, command: string, args: string[]): string;
    getEnvironmentActivationCommands(terminalShellType: TerminalShellType, resource?: Uri): Promise<string[] | undefined>;
    getEnvironmentActivationShellCommands(resource: Resource, interpreter?: PythonInterpreter): Promise<string[] | undefined>;
}
export declare const ITerminalActivator: unique symbol;
export interface ITerminalActivator {
    activateEnvironmentInTerminal(terminal: Terminal, resource: Uri | undefined, preserveFocus?: boolean): Promise<boolean>;
}
export declare const ITerminalActivationCommandProvider: unique symbol;
export interface ITerminalActivationCommandProvider {
    isShellSupported(targetShell: TerminalShellType): boolean;
    getActivationCommands(resource: Uri | undefined, targetShell: TerminalShellType): Promise<string[] | undefined>;
    getActivationCommandsForInterpreter(pythonPath: string, targetShell: TerminalShellType): Promise<string[] | undefined>;
}
export declare const ITerminalActivationHandler: unique symbol;
export interface ITerminalActivationHandler {
    handleActivation(terminal: Terminal, resource: Uri | undefined, preserveFocus: boolean, activated: boolean): Promise<void>;
}
