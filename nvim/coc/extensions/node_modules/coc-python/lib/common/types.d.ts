/// <reference types="node" />
import { Socket } from 'net';
import Uri from 'vscode-uri';
import { ConfigurationTarget, DocumentSymbolProvider, Extension, ExtensionContext, OutputChannel } from 'coc.nvim';
import { DiagnosticSeverity, WorkspaceEdit, Disposable, Event } from 'vscode-languageserver-protocol';
import { CommandsWithoutArgs } from './application/commands';
import { EnvironmentVariables } from './variables/types';
export declare const IOutputChannel: unique symbol;
export interface IOutputChannel extends OutputChannel {
}
export declare const IDocumentSymbolProvider: unique symbol;
export interface IDocumentSymbolProvider extends DocumentSymbolProvider {
}
export declare const IsWindows: unique symbol;
export declare const IDisposableRegistry: unique symbol;
export interface IDisposableRegistry {
    push(disposable: Disposable): void;
}
export declare const IMemento: unique symbol;
export declare const GLOBAL_MEMENTO: unique symbol;
export declare const WORKSPACE_MEMENTO: unique symbol;
export declare type Resource = Uri | undefined;
export interface IPersistentState<T> {
    readonly value: T;
    updateValue(value: T): Promise<void>;
}
export interface Version {
    raw: string;
    major: number;
    minor: number;
    patch: number;
    build: string[];
    prerelease: string[];
}
export declare const IPersistentStateFactory: unique symbol;
export interface IPersistentStateFactory {
    createGlobalPersistentState<T>(key: string, defaultValue?: T, expiryDurationMs?: number): IPersistentState<T>;
    createWorkspacePersistentState<T>(key: string, defaultValue?: T, expiryDurationMs?: number): IPersistentState<T>;
}
export interface ExecutionInfo {
    execPath?: string;
    moduleName?: string;
    args: string[];
    product?: Product;
}
export declare enum LogLevel {
    Information = "Information",
    Error = "Error",
    Warning = "Warning"
}
export declare const ILogger: unique symbol;
export interface ILogger {
    logError(message: string, error?: Error): void;
    logWarning(message: string, error?: Error): void;
    logInformation(message: string, error?: Error): void;
}
export declare enum InstallerResponse {
    Installed = 0,
    Disabled = 1,
    Ignore = 2
}
export declare enum ProductType {
    Linter = "Linter",
    Formatter = "Formatter",
    TestFramework = "TestFramework",
    RefactoringLibrary = "RefactoringLibrary",
    WorkspaceSymbols = "WorkspaceSymbols"
}
export declare enum Product {
    pytest = 1,
    nosetest = 2,
    pylint = 3,
    flake8 = 4,
    pep8 = 5,
    pylama = 6,
    prospector = 7,
    pydocstyle = 8,
    yapf = 9,
    autopep8 = 10,
    mypy = 11,
    unittest = 12,
    ctags = 13,
    rope = 14,
    isort = 15,
    black = 16,
    bandit = 17
}
export declare enum ModuleNamePurpose {
    install = 1,
    run = 2
}
export declare const IInstaller: unique symbol;
export interface IInstaller {
    promptToInstall(product: Product, resource?: Uri): Promise<InstallerResponse>;
    install(product: Product, resource?: Uri): Promise<InstallerResponse>;
    isInstalled(product: Product, resource?: Uri): Promise<boolean | undefined>;
    translateProductToModuleName(product: Product, purpose: ModuleNamePurpose): string;
}
export declare const IPathUtils: unique symbol;
export interface IPathUtils {
    readonly delimiter: string;
    readonly home: string;
    /**
     * The platform-specific file separator. '\\' or '/'.
     * @type {string}
     * @memberof IPathUtils
     */
    readonly separator: string;
    getPathVariableName(): 'Path' | 'PATH';
    basename(pathValue: string, ext?: string): string;
    getDisplayName(pathValue: string, cwd?: string): string;
}
export declare const IRandom: unique symbol;
export interface IRandom {
    getRandomInt(min?: number, max?: number): number;
}
export declare const ICurrentProcess: unique symbol;
export interface ICurrentProcess {
    readonly env: EnvironmentVariables;
    readonly argv: string[];
    readonly stdout: NodeJS.WriteStream;
    readonly stdin: NodeJS.ReadStream;
    readonly execPath: string;
    on(event: string | symbol, listener: Function): this;
}
export interface IPythonSettings {
    pythonPath: string;
    readonly venvPath: string;
    readonly venvFolders: string[];
    readonly condaPath: string;
    readonly pipenvPath: string;
    readonly poetryPath: string;
    readonly downloadLanguageServer: boolean;
    readonly jediEnabled: boolean;
    readonly jediPath: string;
    readonly jediMemoryLimit: number;
    readonly devOptions: string[];
    readonly linting: ILintingSettings;
    readonly formatting: IFormattingSettings;
    readonly unitTest: IUnitTestSettings;
    readonly autoComplete: IAutoCompleteSettings;
    readonly terminal: ITerminalSettings;
    readonly sortImports: ISortImportSettings;
    readonly workspaceSymbols: IWorkspaceSymbolSettings;
    readonly envFile: string;
    readonly disableInstallationChecks: boolean;
    readonly globalModuleInstallation: boolean;
    readonly analysis: IAnalysisSettings;
    readonly autoUpdateLanguageServer: boolean;
    readonly datascience: IDataScienceSettings;
    readonly onDidChange: Event<void>;
}
export interface ISortImportSettings {
    readonly path: string;
    readonly args: string[];
}
export interface IUnitTestSettings {
    readonly promptToConfigure: boolean;
    readonly debugPort: number;
    readonly nosetestsEnabled: boolean;
    nosetestPath: string;
    nosetestArgs: string[];
    readonly pyTestEnabled: boolean;
    pyTestPath: string;
    pyTestArgs: string[];
    readonly unittestEnabled: boolean;
    unittestArgs: string[];
    cwd?: string;
    readonly autoTestDiscoverOnSaveEnabled: boolean;
}
export interface IPylintCategorySeverity {
    readonly convention: DiagnosticSeverity;
    readonly refactor: DiagnosticSeverity;
    readonly warning: DiagnosticSeverity;
    readonly error: DiagnosticSeverity;
    readonly fatal: DiagnosticSeverity;
}
export interface IPep8CategorySeverity {
    readonly W: DiagnosticSeverity;
    readonly E: DiagnosticSeverity;
}
export interface Flake8CategorySeverity {
    readonly F: DiagnosticSeverity;
    readonly E: DiagnosticSeverity;
    readonly W: DiagnosticSeverity;
}
export interface IMypyCategorySeverity {
    readonly error: DiagnosticSeverity;
    readonly note: DiagnosticSeverity;
}
export interface ILintingSettings {
    readonly enabled: boolean;
    readonly ignorePatterns: string[];
    readonly prospectorEnabled: boolean;
    readonly prospectorArgs: string[];
    readonly pylintEnabled: boolean;
    readonly pylintArgs: string[];
    readonly pep8Enabled: boolean;
    readonly pep8Args: string[];
    readonly pylamaEnabled: boolean;
    readonly pylamaArgs: string[];
    readonly flake8Enabled: boolean;
    readonly flake8Args: string[];
    readonly pydocstyleEnabled: boolean;
    readonly pydocstyleArgs: string[];
    readonly lintOnSave: boolean;
    readonly maxNumberOfProblems: number;
    readonly pylintCategorySeverity: IPylintCategorySeverity;
    readonly pep8CategorySeverity: IPep8CategorySeverity;
    readonly flake8CategorySeverity: Flake8CategorySeverity;
    readonly mypyCategorySeverity: IMypyCategorySeverity;
    prospectorPath: string;
    pylintPath: string;
    pep8Path: string;
    pylamaPath: string;
    flake8Path: string;
    pydocstylePath: string;
    mypyEnabled: boolean;
    mypyArgs: string[];
    mypyPath: string;
    banditEnabled: boolean;
    banditArgs: string[];
    banditPath: string;
    readonly pylintUseMinimalCheckers: boolean;
}
export interface IFormattingSettings {
    readonly provider: string;
    autopep8Path: string;
    readonly autopep8Args: string[];
    blackPath: string;
    readonly blackArgs: string[];
    yapfPath: string;
    readonly yapfArgs: string[];
}
export interface IAutoCompleteSettings {
    readonly addBrackets: boolean;
    readonly extraPaths: string[];
    readonly showAdvancedMembers: boolean;
    readonly typeshedPaths: string[];
}
export interface IWorkspaceSymbolSettings {
    readonly enabled: boolean;
    tagFilePath: string;
    readonly rebuildOnStart: boolean;
    readonly rebuildOnFileSave: boolean;
    readonly ctagsPath: string;
    readonly exclusionPatterns: string[];
}
export interface ITerminalSettings {
    readonly executeInFileDir: boolean;
    readonly launchArgs: string[];
    readonly activateEnvironment: boolean;
}
export declare type LanguageServerDownloadChannels = 'stable' | 'beta' | 'daily';
export interface IAnalysisSettings {
    readonly downloadChannel?: LanguageServerDownloadChannels;
    readonly openFilesOnly: boolean;
    readonly typeshedPaths: string[];
    readonly errors: string[];
    readonly warnings: string[];
    readonly information: string[];
    readonly disabled: string[];
    readonly traceLogging: boolean;
    readonly logLevel: LogLevel;
}
export interface IDataScienceSettings {
    allowImportFromNotebook: boolean;
    enabled: boolean;
    jupyterInterruptTimeout: number;
    jupyterLaunchTimeout: number;
    jupyterServerURI: string;
    notebookFileRoot: string;
    changeDirOnImportExport: boolean;
    useDefaultConfigForJupyter: boolean;
    searchForJupyter: boolean;
    allowInput: boolean;
    showCellInputCode: boolean;
    collapseCellInputCodeByDefault: boolean;
    maxOutputSize: number;
    sendSelectionToInteractiveWindow: boolean;
    markdownRegularExpression: string;
    codeRegularExpression: string;
    allowLiveShare?: boolean;
    errorBackgroundColor: string;
    ignoreVscodeTheme?: boolean;
}
export declare const IConfigurationService: unique symbol;
export interface IConfigurationService {
    getSettings(resource?: Uri): IPythonSettings;
    isTestExecution(): boolean;
    updateSetting(setting: string, value?: {}, resource?: Uri, configTarget?: ConfigurationTarget): Promise<void>;
    updateSectionSetting(section: string, setting: string, value?: {}, resource?: Uri, configTarget?: ConfigurationTarget): Promise<void>;
}
export declare const ISocketServer: unique symbol;
export interface ISocketServer extends Disposable {
    readonly client: Promise<Socket>;
    Start(options?: {
        port?: number;
        host?: string;
    }): Promise<number>;
}
export declare const IExtensionContext: unique symbol;
export interface IExtensionContext extends ExtensionContext {
}
export declare const IExtensions: unique symbol;
export interface IExtensions {
    /**
     * All extensions currently known to the system.
     */
    readonly all: Extension<any>[];
    /**
     * Get an extension by its full identifier in the form of: `publisher.name`.
     *
     * @param extensionId An extension identifier.
     * @return An extension or `undefined`.
     */
    getExtension(extensionId: string): Extension<any> | undefined;
    /**
     * Get an extension its full identifier in the form of: `publisher.name`.
     *
     * @param extensionId An extension identifier.
     * @return An extension or `undefined`.
     */
    getExtension<T>(extensionId: string): Extension<T> | undefined;
}
export declare const IBrowserService: unique symbol;
export interface IBrowserService {
    launch(url: string): void;
}
export declare const IPythonExtensionBanner: unique symbol;
export interface IPythonExtensionBanner {
    readonly enabled: boolean;
    showBanner(): Promise<void>;
}
export declare const BANNER_NAME_LS_SURVEY = "LSSurveyBanner";
export declare const BANNER_NAME_PROPOSE_LS = "ProposeLS";
export declare const BANNER_NAME_DS_SURVEY = "DSSurveyBanner";
export interface DeprecatedSettingAndValue {
    setting: string;
    values?: {}[];
}
export interface DeprecatedFeatureInfo {
    doNotDisplayPromptStateKey: string;
    message: string;
    moreInfoUrl: string;
    commands?: CommandsWithoutArgs[];
    setting?: DeprecatedSettingAndValue;
}
export declare const IFeatureDeprecationManager: unique symbol;
export interface IFeatureDeprecationManager extends Disposable {
    initialize(): void;
    registerDeprecation(deprecatedInfo: DeprecatedFeatureInfo): void;
}
export declare const IEditorUtils: unique symbol;
export interface IEditorUtils {
    getWorkspaceEditsFromPatch(originalContents: string, patch: string, uri: Uri): WorkspaceEdit;
}
export interface IDisposable {
    dispose(): void | undefined;
}
export interface IAsyncDisposable {
    dispose(): Promise<void>;
}
export declare const IAsyncDisposableRegistry: unique symbol;
export interface IAsyncDisposableRegistry extends IAsyncDisposable {
    push(disposable: IDisposable | IAsyncDisposable): void;
}
/**
 * A memento represents a storage utility. It can store and retrieve
 * values.
 */
export interface Memento {
    /**
     * Return a value.
     *
     * @param key A string.
     * @return The stored value or `undefined`.
     */
    get<T>(key: string): T | undefined;
    /**
     * Return a value.
     *
     * @param key A string.
     * @param defaultValue A value that should be returned when there is no
     * value (`undefined`) with the given key.
     * @return The stored value or the defaultValue.
     */
    get<T>(key: string, defaultValue: T): T;
    /**
     * Store a value. The value must be JSON-stringifyable.
     *
     * @param key A string.
     * @param value A value. MUST not contain cyclic references.
     */
    update(key: string, value: any): Thenable<void>;
}
