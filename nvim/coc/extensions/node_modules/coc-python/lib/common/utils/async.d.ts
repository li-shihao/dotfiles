export declare function sleep(timeout: number): Promise<{}>;
export interface Deferred<T> {
    readonly promise: Promise<T>;
    readonly resolved: boolean;
    readonly rejected: boolean;
    readonly completed: boolean;
    resolve(value?: T | PromiseLike<T>): void;
    reject(reason?: any): void;
}
export declare function createDeferred<T>(scope?: any): Deferred<T>;
export declare function createDeferredFrom<T>(...promises: Promise<T>[]): Deferred<T>;
export declare function createDeferredFromPromise<T>(promise: Promise<T>): Deferred<T>;
export declare function callWithTimeout<T>(func: () => T, timeoutMS: number): Promise<T>;
