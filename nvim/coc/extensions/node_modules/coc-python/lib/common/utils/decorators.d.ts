import { Resource } from '../types';
import Uri from 'vscode-uri';
declare type VoidFunction = (...any: any[]) => void;
/**
 * Debounces a function execution. Function must return either a void or a promise that resolves to a void.
 * @export
 * @param {number} [wait] Wait time.
 * @returns void
 */
export declare function debounce(wait?: number): (_target: any, _propertyName: string, descriptor: TypedPropertyDescriptor<VoidFunction>) => void;
declare type PromiseFunctionWithFirstArgOfResource = (...any: [Uri | undefined, ...any[]]) => Promise<any>;
export declare function clearCachedResourceSpecificIngterpreterData(key: string, resource: Resource): void;
export declare function cacheResourceSpecificInterpreterData(key: string, expiryDurationMs: number): (_target: Object, _propertyName: string, descriptor: TypedPropertyDescriptor<PromiseFunctionWithFirstArgOfResource>) => void;
/**
 * Swallows exceptions thrown by a function. Function must return either a void or a promise that resolves to a void.
 * When exceptions (including in promises) are caught, this will return `undefined` to calling code.
 * @export
 * @param {string} [scopeName] Scope for the error message to be logged along with the error.
 * @returns void
 */
export declare function swallowExceptions(scopeName: string): (_target: any, propertyName: string, descriptor: TypedPropertyDescriptor<any>) => void;
declare type PromiseFunction = (...any: any[]) => Promise<any>;
export declare function displayProgress(title: string): (_target: Object, _propertyName: string, descriptor: TypedPropertyDescriptor<PromiseFunction>) => void;
export {};
