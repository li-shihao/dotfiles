export declare namespace Diagnostics {
    const warnSourceMaps: () => string;
    const disableSourceMaps: () => string;
    const warnBeforeEnablingSourceMaps: () => string;
    const enableSourceMapsAndReloadVSC: () => string;
    const lsNotSupported: () => string;
    const invalidPythonPathInDebuggerSettings: () => string;
    const invalidPythonPathInDebuggerLaunch: () => string;
}
export declare namespace Common {
    const canceled: () => string;
    const loadingExtension: () => string;
    const openOutputPanel: () => string;
}
export declare namespace LanguageService {
    const bannerMessage: () => string;
    const bannerLabelYes: () => string;
    const bannerLabelNo: () => string;
    const lsFailedToStart: () => string;
    const lsFailedToDownload: () => string;
    const lsFailedToExtract: () => string;
    const downloadFailedOutputMessage: () => string;
    const extractionFailedOutputMessage: () => string;
    const extractionCompletedOutputMessage: () => string;
    const extractionDoneOutputMessage: () => string;
    const reloadVSCodeIfSeachPathHasChanged: () => string;
}
export declare namespace Interpreters {
    const loading: () => string;
    const refreshing: () => string;
}
export declare namespace Linters {
    const installedButNotEnabled: () => string;
    const replaceWithSelectedLinter: () => string;
}
export declare namespace DataScienceSurveyBanner {
    const bannerMessage: () => string;
    const bannerLabelYes: () => string;
    const bannerLabelNo: () => string;
}
export declare namespace DataScience {
    const historyTitle: () => string;
    const dataExplorerTitle: () => string;
    const badWebPanelFormatString: () => string;
    const sessionDisposed: () => string;
    const unknownMimeTypeFormat: () => string;
    const exportDialogTitle: () => string;
    const exportDialogFilter: () => string;
    const exportDialogComplete: () => string;
    const exportDialogFailed: () => string;
    const exportOpenQuestion: () => string;
    const runCellLensCommandTitle: () => string;
    const importDialogTitle: () => string;
    const importDialogFilter: () => string;
    const notebookCheckForImportTitle: () => string;
    const notebookCheckForImportYes: () => string;
    const notebookCheckForImportNo: () => string;
    const notebookCheckForImportDontAskAgain: () => string;
    const jupyterNotSupported: () => string;
    const jupyterNotSupportedBecauseOfEnvironment: () => string;
    const jupyterNbConvertNotSupported: () => string;
    const jupyterLaunchTimedOut: () => string;
    const jupyterLaunchNoURL: () => string;
    const pythonInteractiveHelpLink: () => string;
    const importingFormat: () => string;
    const startingJupyter: () => string;
    const connectingToJupyter: () => string;
    const exportingFormat: () => string;
    const runAllCellsLensCommandTitle: () => string;
    const runAllCellsAboveLensCommandTitle: () => string;
    const runCellAndAllBelowLensCommandTitle: () => string;
    const importChangeDirectoryComment: () => string;
    const exportChangeDirectoryComment: () => string;
    const restartKernelMessage: () => string;
    const restartKernelMessageYes: () => string;
    const restartKernelMessageNo: () => string;
    const restartingKernelStatus: () => string;
    const restartingKernelFailed: () => string;
    const interruptingKernelFailed: () => string;
    const executingCode: () => string;
    const collapseAll: () => string;
    const expandAll: () => string;
    const exportKey: () => string;
    const restartServer: () => string;
    const undo: () => string;
    const redo: () => string;
    const clearAll: () => string;
    const pythonVersionHeader: () => string;
    const pythonRestartHeader: () => string;
    const pythonNewHeader: () => string;
    const pythonVersionHeaderNoPyKernel: () => string;
    const jupyterSelectURILaunchLocal: () => string;
    const jupyterSelectURISpecifyURI: () => string;
    const jupyterSelectURIPrompt: () => string;
    const jupyterSelectURIInvalidURI: () => string;
    const jupyterNotebookFailure: () => string;
    const jupyterNotebookConnectFailed: () => string;
    const jupyterNotebookRemoteConnectFailed: () => string;
    const jupyterServerCrashed: () => string;
    const notebookVersionFormat: () => string;
    const jupyterKernelNotSupportedOnActive: () => string;
    const jupyterKernelSpecNotFound: () => string;
    const interruptKernel: () => string;
    const interruptKernelStatus: () => string;
    const exportCancel: () => string;
    const restartKernelAfterInterruptMessage: () => string;
    const pythonInterruptFailedHeader: () => string;
    const sysInfoURILabel: () => string;
    const executingCodeFailure: () => string;
    const inputWatermark: () => string;
    const liveShareConnectFailure: () => string;
    const liveShareCannotSpawnNotebooks: () => string;
    const liveShareCannotImportNotebooks: () => string;
    const liveShareHostFormat: () => string;
    const liveShareSyncFailure: () => string;
    const liveShareServiceFailure: () => string;
    const documentMismatch: () => string;
    const jupyterGetVariablesBadResults: () => string;
    const pythonInteractiveCreateFailed: () => string;
}
export declare namespace DebugConfigurationPrompts {
    const selectConfigurationTitle: () => string;
    const selectConfigurationPlaceholder: () => string;
    const debugFileConfigurationLabel: () => string;
    const debugFileConfigurationDescription: () => string;
    const debugModuleConfigurationLabel: () => string;
    const debugModuleConfigurationDescription: () => string;
    const remoteAttachConfigurationLabel: () => string;
    const remoteAttachConfigurationDescription: () => string;
    const debugDjangoConfigurationLabel: () => string;
    const debugDjangoConfigurationDescription: () => string;
    const debugFlaskConfigurationLabel: () => string;
    const debugFlaskConfigurationDescription: () => string;
    const debugPyramidConfigurationLabel: () => string;
    const debugPyramidConfigurationDescription: () => string;
    const djangoEnterManagePyPathTitle: () => string;
    const djangoEnterManagePyPathPrompt: () => string;
    const djangoEnterManagePyPathInvalidFilePathError: () => string;
    const flaskEnterAppPathOrNamePathTitle: () => string;
    const flaskEnterAppPathOrNamePathPrompt: () => string;
    const flaskEnterAppPathOrNamePathInvalidNameError: () => string;
    const moduleEnterModuleTitle: () => string;
    const moduleEnterModulePrompt: () => string;
    const moduleEnterModuleInvalidNameError: () => string;
    const pyramidEnterDevelopmentIniPathTitle: () => string;
    const pyramidEnterDevelopmentIniPathPrompt: () => string;
    const pyramidEnterDevelopmentIniPathInvalidFilePathError: () => string;
    const attachRemotePortTitle: () => string;
    const attachRemotePortPrompt: () => string;
    const attachRemotePortValidationError: () => string;
    const attachRemoteHostTitle: () => string;
    const attachRemoteHostPrompt: () => string;
    const attachRemoteHostValidationError: () => string;
}
export declare namespace UnitTests {
    const testErrorDiagnosticMessage: () => string;
    const testFailDiagnosticMessage: () => string;
    const testSkippedDiagnosticMessage: () => string;
    const configureTests: () => string;
    const disableTests: () => string;
}
export declare function localize(key: string, defValue: string): () => string;
export declare function getCollection(): {
    [x: string]: string;
};
export declare function getAskedForCollection(): Record<string, string>;
