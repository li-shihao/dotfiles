// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const constants_1 = require("../../constants");
// External callers of localize use these tables to retrieve localized values.
var Diagnostics;
(function (Diagnostics) {
    Diagnostics.warnSourceMaps = localize('diagnostics.warnSourceMaps', 'Source map support is enabled in the Python Extension, this will adversely impact performance of the extension.');
    Diagnostics.disableSourceMaps = localize('diagnostics.disableSourceMaps', 'Disable Source Map Support');
    Diagnostics.warnBeforeEnablingSourceMaps = localize('diagnostics.warnBeforeEnablingSourceMaps', 'Enabling source map support in the Python Extension will adversely impact performance of the extension.');
    Diagnostics.enableSourceMapsAndReloadVSC = localize('diagnostics.enableSourceMapsAndReloadVSC', 'Enable source mapgs and reload coc service.');
    Diagnostics.lsNotSupported = localize('diagnostics.lsNotSupported', 'Your operating system does not meet the minimum requirements of the Language Server. Reverting to the alternative, Jedi.');
    Diagnostics.invalidPythonPathInDebuggerSettings = localize('diagnostics.invalidPythonPathInDebuggerSettings', 'You need to select a Python interpreter before you start debugging.\n\nTip: click on "Select Python Interpreter" in the status bar.');
    Diagnostics.invalidPythonPathInDebuggerLaunch = localize('diagnostics.invalidPythonPathInDebuggerLaunch', 'The Python path in your debug configuration is invalid.');
})(Diagnostics = exports.Diagnostics || (exports.Diagnostics = {}));
var Common;
(function (Common) {
    Common.canceled = localize('Common.canceled', 'Canceled');
    Common.loadingExtension = localize('Common.loadingPythonExtension', 'Python extension loading...');
    Common.openOutputPanel = localize('Common.openOutputPanel', 'Show output');
})(Common = exports.Common || (exports.Common = {}));
var LanguageService;
(function (LanguageService) {
    LanguageService.bannerMessage = localize('LanguageService.bannerMessage', 'Can you please take 2 minutes to tell us how the Python Language Server is working for you?');
    LanguageService.bannerLabelYes = localize('LanguageService.bannerLabelYes', 'Yes, take survey now');
    LanguageService.bannerLabelNo = localize('LanguageService.bannerLabelNo', 'No, thanks');
    LanguageService.lsFailedToStart = localize('LanguageService.lsFailedToStart', 'We encountered an issue starting the Language Server. Reverting to the alternative, Jedi. Check the Python output panel for details.');
    LanguageService.lsFailedToDownload = localize('LanguageService.lsFailedToDownload', 'We encountered an issue downloading the Language Server. Reverting to the alternative, Jedi. Check the Python output panel for details.');
    LanguageService.lsFailedToExtract = localize('LanguageService.lsFailedToExtract', 'We encountered an issue extracting the Language Server. Reverting to the alternative, Jedi. Check the Python output panel for details.');
    LanguageService.downloadFailedOutputMessage = localize('LanguageService.downloadFailedOutputMessage', 'download failed.');
    LanguageService.extractionFailedOutputMessage = localize('LanguageService.extractionFailedOutputMessage', 'extraction failed.');
    LanguageService.extractionCompletedOutputMessage = localize('LanguageService.extractionCompletedOutputMessage', 'complete.');
    LanguageService.extractionDoneOutputMessage = localize('LanguageService.extractionDoneOutputMessage', 'done.');
    LanguageService.reloadVSCodeIfSeachPathHasChanged = localize('LanguageService.reloadVSCodeIfSeachPathHasChanged', 'Search paths have changed for this Python interpreter. Please reload the extension to ensure that the IntelliSense works correctly.');
})(LanguageService = exports.LanguageService || (exports.LanguageService = {}));
var Interpreters;
(function (Interpreters) {
    Interpreters.loading = localize('Interpreters.LoadingInterpreters', 'Loading Python Interpreters');
    Interpreters.refreshing = localize('Interpreters.RefreshingInterpreters', 'Refreshing Python Interpreters');
})(Interpreters = exports.Interpreters || (exports.Interpreters = {}));
var Linters;
(function (Linters) {
    Linters.installedButNotEnabled = localize('Linter.InstalledButNotEnabled', 'Linter {0} is installed but not enabled.');
    Linters.replaceWithSelectedLinter = localize('Linter.replaceWithSelectedLinter', 'Multiple linters are enabled in settings. Replace with \'{0}\'?');
})(Linters = exports.Linters || (exports.Linters = {}));
// export namespace InteractiveShiftEnterBanner {
//   export const bannerMessage = localize('InteractiveShiftEnterBanner.bannerMessage', 'Would you like shift-enter to send code to the new Interactive Window experience?')
//   export const bannerLabelYes = localize('InteractiveShiftEnterBanner.bannerLabelYes', 'Yes')
//   export const bannerLabelNo = localize('InteractiveShiftEnterBanner.bannerLabelNo', 'No')
// }
//
var DataScienceSurveyBanner;
(function (DataScienceSurveyBanner) {
    DataScienceSurveyBanner.bannerMessage = localize('DataScienceSurveyBanner.bannerMessage', 'Can you please take 2 minutes to tell us how the Python Data Science features are working for you?');
    DataScienceSurveyBanner.bannerLabelYes = localize('DataScienceSurveyBanner.bannerLabelYes', 'Yes, take survey now');
    DataScienceSurveyBanner.bannerLabelNo = localize('DataScienceSurveyBanner.bannerLabelNo', 'No, thanks');
})(DataScienceSurveyBanner = exports.DataScienceSurveyBanner || (exports.DataScienceSurveyBanner = {}));
var DataScience;
(function (DataScience) {
    DataScience.historyTitle = localize('DataScience.historyTitle', 'Python Interactive');
    DataScience.dataExplorerTitle = localize('DataScience.dataExplorerTitle', 'Data Viewer');
    DataScience.badWebPanelFormatString = localize('DataScience.badWebPanelFormatString', '<html><body><h1>{0} is not a valid file name</h1></body></html>');
    DataScience.sessionDisposed = localize('DataScience.sessionDisposed', 'Cannot execute code, session has been disposed.');
    DataScience.unknownMimeTypeFormat = localize('DataScience.unknownMimeTypeFormat', 'Mime type {0} is not currently supported');
    DataScience.exportDialogTitle = localize('DataScience.exportDialogTitle', 'Export to Jupyter Notebook');
    DataScience.exportDialogFilter = localize('DataScience.exportDialogFilter', 'Jupyter Notebooks');
    DataScience.exportDialogComplete = localize('DataScience.exportDialogComplete', 'Notebook written to {0}');
    DataScience.exportDialogFailed = localize('DataScience.exportDialogFailed', 'Failed to export notebook. {0}');
    DataScience.exportOpenQuestion = localize('DataScience.exportOpenQuestion', 'Open in browser');
    DataScience.runCellLensCommandTitle = localize('python.command.python.datascience.runcell.title', 'Run cell');
    DataScience.importDialogTitle = localize('DataScience.importDialogTitle', 'Import Jupyter Notebook');
    DataScience.importDialogFilter = localize('DataScience.importDialogFilter', 'Jupyter Notebooks');
    DataScience.notebookCheckForImportTitle = localize('DataScience.notebookCheckForImportTitle', 'Do you want to import the Jupyter Notebook into Python code?');
    DataScience.notebookCheckForImportYes = localize('DataScience.notebookCheckForImportYes', 'Import');
    DataScience.notebookCheckForImportNo = localize('DataScience.notebookCheckForImportNo', 'Later');
    DataScience.notebookCheckForImportDontAskAgain = localize('DataScience.notebookCheckForImportDontAskAgain', 'Don\'t Ask Again');
    DataScience.jupyterNotSupported = localize('DataScience.jupyterNotSupported', 'Jupyter is not installed');
    DataScience.jupyterNotSupportedBecauseOfEnvironment = localize('DataScience.jupyterNotSupportedBecauseOfEnvironment', 'Activating {0} to run Jupyter failed with {1}');
    DataScience.jupyterNbConvertNotSupported = localize('DataScience.jupyterNbConvertNotSupported', 'Jupyter nbconvert is not installed');
    DataScience.jupyterLaunchTimedOut = localize('DataScience.jupyterLaunchTimedOut', 'The Jupyter notebook server failed to launch in time');
    DataScience.jupyterLaunchNoURL = localize('DataScience.jupyterLaunchNoURL', 'Failed to find the URL of the launched Jupyter notebook server');
    DataScience.pythonInteractiveHelpLink = localize('DataScience.pythonInteractiveHelpLink', 'See [https://aka.ms/pyaiinstall] for help on installing jupyter.');
    DataScience.importingFormat = localize('DataScience.importingFormat', 'Importing {0}');
    DataScience.startingJupyter = localize('DataScience.startingJupyter', 'Starting Jupyter server');
    DataScience.connectingToJupyter = localize('DataScience.connectingToJupyter', 'Connecting to Jupyter server');
    DataScience.exportingFormat = localize('DataScience.exportingFormat', 'Exporting {0}');
    DataScience.runAllCellsLensCommandTitle = localize('python.command.python.datascience.runallcells.title', 'Run all cells');
    DataScience.runAllCellsAboveLensCommandTitle = localize('python.command.python.datascience.runallcellsabove.title', 'Run Above');
    DataScience.runCellAndAllBelowLensCommandTitle = localize('python.command.python.datascience.runcellandallbelow.title', 'Run Below');
    DataScience.importChangeDirectoryComment = localize('DataScience.importChangeDirectoryComment', '#%% Change working directory from the workspace root to the ipynb file location. Turn this addition off with the DataScience.changeDirOnImportExport setting');
    DataScience.exportChangeDirectoryComment = localize('DataScience.exportChangeDirectoryComment', '# Change directory to VSCode workspace root so that relative path loads work correctly. Turn this addition off with the DataScience.changeDirOnImportExport setting');
    DataScience.restartKernelMessage = localize('DataScience.restartKernelMessage', 'Do you want to restart the Jupter kernel? All variables will be lost.');
    DataScience.restartKernelMessageYes = localize('DataScience.restartKernelMessageYes', 'Restart');
    DataScience.restartKernelMessageNo = localize('DataScience.restartKernelMessageNo', 'Cancel');
    DataScience.restartingKernelStatus = localize('DataScience.restartingKernelStatus', 'Restarting iPython Kernel');
    DataScience.restartingKernelFailed = localize('DataScience.restartingKernelFailed', 'Kernel restart failed. Jupyter server is hung. Please reload VS code.');
    DataScience.interruptingKernelFailed = localize('DataScience.interruptingKernelFailed', 'Kernel interrupt failed. Jupyter server is hung. Please reload VS code.');
    DataScience.executingCode = localize('DataScience.executingCode', 'Executing Cell');
    DataScience.collapseAll = localize('DataScience.collapseAll', 'Collapse all cell inputs');
    DataScience.expandAll = localize('DataScience.expandAll', 'Expand all cell inputs');
    DataScience.exportKey = localize('DataScience.export', 'Export as Jupyter Notebook');
    DataScience.restartServer = localize('DataScience.restartServer', 'Restart iPython Kernel');
    DataScience.undo = localize('DataScience.undo', 'Undo');
    DataScience.redo = localize('DataScience.redo', 'Redo');
    DataScience.clearAll = localize('DataScience.clearAll', 'Remove All Cells');
    DataScience.pythonVersionHeader = localize('DataScience.pythonVersionHeader', 'Python Version:');
    DataScience.pythonRestartHeader = localize('DataScience.pythonRestartHeader', 'Restarted Kernel:');
    DataScience.pythonNewHeader = localize('DataScience.pythonNewHeader', 'Started new kernel:');
    DataScience.pythonVersionHeaderNoPyKernel = localize('DataScience.pythonVersionHeaderNoPyKernel', 'Python Version may not match, no ipykernel found:');
    DataScience.jupyterSelectURILaunchLocal = localize('DataScience.jupyterSelectURILaunchLocal', 'Launch local Jupyter server');
    DataScience.jupyterSelectURISpecifyURI = localize('DataScience.jupyterSelectURISpecifyURI', 'Type in the URI for the Jupyter server');
    DataScience.jupyterSelectURIPrompt = localize('DataScience.jupyterSelectURIPrompt', 'Enter the URI of a Jupyter server');
    DataScience.jupyterSelectURIInvalidURI = localize('DataScience.jupyterSelectURIInvalidURI', 'Invalid URI specified');
    DataScience.jupyterNotebookFailure = localize('DataScience.jupyterNotebookFailure', 'Jupyter notebook failed to launch. \r\n{0}');
    DataScience.jupyterNotebookConnectFailed = localize('DataScience.jupyterNotebookConnectFailed', 'Failed to connect to Jupyter notebook. \r\n{0}\r\n{1}');
    DataScience.jupyterNotebookRemoteConnectFailed = localize('DataScience.jupyterNotebookRemoteConnectFailed', 'Failed to connect to remote Jupyter notebook.\r\nCheck that the Jupyter Server URI setting has a valid running server specified.\r\n{0}\r\n{1}');
    DataScience.jupyterServerCrashed = localize('DataScience.jupyterServerCrashed', 'Jupyter server crashed. Unable to connect. \r\nError code from jupyter: {0}');
    DataScience.notebookVersionFormat = localize('DataScience.notebookVersionFormat', 'Jupyter Notebook Version: {0}');
    // tslint:disable-next-line:no-multiline-string
    DataScience.jupyterKernelNotSupportedOnActive = localize('DataScience.jupyterKernelNotSupportedOnActive', `iPython kernel cannot be started from '{0}'. Using closest match {1} instead.`);
    DataScience.jupyterKernelSpecNotFound = localize('DataScience.jupyterKernelSpecNotFound', 'Cannot create a iPython kernel spec and none are available for use');
    DataScience.interruptKernel = localize('DataScience.interruptKernel', 'Interrupt iPython Kernel');
    DataScience.interruptKernelStatus = localize('DataScience.interruptKernelStatus', 'Interrupting iPython Kernel');
    DataScience.exportCancel = localize('DataScience.exportCancel', 'Cancel');
    DataScience.restartKernelAfterInterruptMessage = localize('DataScience.restartKernelAfterInterruptMessage', 'Interrupting the kernel timed out. Do you want to restart the kernel instead? All variables will be lost.');
    DataScience.pythonInterruptFailedHeader = localize('DataScience.pythonInterruptFailedHeader', 'Keyboard interrupt crashed the kernel. Kernel restarted.');
    DataScience.sysInfoURILabel = localize('DataScience.sysInfoURILabel', 'Jupyter Server URI: ');
    DataScience.executingCodeFailure = localize('DataScience.executingCodeFailure', 'Executing code failed : {0}');
    DataScience.inputWatermark = localize('DataScience.inputWatermark', 'Shift-enter to run');
    DataScience.liveShareConnectFailure = localize('DataScience.liveShareConnectFailure', 'Cannot connect to host jupyter session. URI not found.');
    DataScience.liveShareCannotSpawnNotebooks = localize('DataScience.liveShareCannotSpawnNotebooks', 'Spawning jupyter notebooks is not supported over a live share connection');
    DataScience.liveShareCannotImportNotebooks = localize('DataScience.liveShareCannotImportNotebooks', 'Importing notebooks is not currently supported over a live share connection');
    DataScience.liveShareHostFormat = localize('DataScience.liveShareHostFormat', '{0} Jupyter Server');
    DataScience.liveShareSyncFailure = localize('DataScience.liveShareSyncFailure', 'Synchronization failure during live share startup.');
    DataScience.liveShareServiceFailure = localize('DataScience.liveShareServiceFailure', 'Failure starting \'{0}\' service during live share connection.');
    DataScience.documentMismatch = localize('DataScience.documentMismatch', 'Cannot run cells, duplicate documents for {0} found.');
    DataScience.jupyterGetVariablesBadResults = localize('DataScience.jupyterGetVariablesBadResults', 'Failed to fetch variable info from the Jupyter server.');
    DataScience.pythonInteractiveCreateFailed = localize('DataScience.pythonInteractiveCreateFailed', 'Failure to create a \'Python Interactive\' window. Try reinstalling the Python extension.');
})(DataScience = exports.DataScience || (exports.DataScience = {}));
var DebugConfigurationPrompts;
(function (DebugConfigurationPrompts) {
    DebugConfigurationPrompts.selectConfigurationTitle = localize('debug.selectConfigurationTitle', 'Select a debug configuration');
    DebugConfigurationPrompts.selectConfigurationPlaceholder = localize('debug.selectConfigurationPlaceholder', 'Debug Configuration');
    DebugConfigurationPrompts.debugFileConfigurationLabel = localize('debug.debugFileConfigurationLabel', 'Python File');
    DebugConfigurationPrompts.debugFileConfigurationDescription = localize('debug.debugFileConfigurationDescription', 'Debug currently active Python file');
    DebugConfigurationPrompts.debugModuleConfigurationLabel = localize('debug.debugModuleConfigurationLabel', 'Module');
    DebugConfigurationPrompts.debugModuleConfigurationDescription = localize('debug.debugModuleConfigurationDescription', 'Debug a python module by invoking it with \'-m\'');
    DebugConfigurationPrompts.remoteAttachConfigurationLabel = localize('debug.remoteAttachConfigurationLabel', 'Remote Attach');
    DebugConfigurationPrompts.remoteAttachConfigurationDescription = localize('debug.remoteAttachConfigurationDescription', 'Attach to a remote ptsvd debug server');
    DebugConfigurationPrompts.debugDjangoConfigurationLabel = localize('debug.debugDjangoConfigurationLabel', 'Django');
    DebugConfigurationPrompts.debugDjangoConfigurationDescription = localize('debug.debugDjangoConfigurationDescription', 'Launch and debug a Django web application');
    DebugConfigurationPrompts.debugFlaskConfigurationLabel = localize('debug.debugFlaskConfigurationLabel', 'Flask');
    DebugConfigurationPrompts.debugFlaskConfigurationDescription = localize('debug.debugFlaskConfigurationDescription', 'Launch and debug a Flask web application');
    DebugConfigurationPrompts.debugPyramidConfigurationLabel = localize('debug.debugPyramidConfigurationLabel', 'Pyramid');
    DebugConfigurationPrompts.debugPyramidConfigurationDescription = localize('debug.debugPyramidConfigurationDescription', 'Web Application');
    DebugConfigurationPrompts.djangoEnterManagePyPathTitle = localize('debug.djangoEnterManagePyPathTitle', 'Debug Django');
    // tslint:disable-next-line:no-invalid-template-strings
    DebugConfigurationPrompts.djangoEnterManagePyPathPrompt = localize('debug.djangoEnterManagePyPathPrompt', 'Enter path to manage.py (\'${workspaceFolder}\' points to the root of the current workspace folder)');
    DebugConfigurationPrompts.djangoEnterManagePyPathInvalidFilePathError = localize('debug.djangoEnterManagePyPathInvalidFilePathError', 'Enter a valid python file path');
    DebugConfigurationPrompts.flaskEnterAppPathOrNamePathTitle = localize('debug.flaskEnterAppPathOrNamePathTitle', 'Debug Flask');
    DebugConfigurationPrompts.flaskEnterAppPathOrNamePathPrompt = localize('debug.flaskEnterAppPathOrNamePathPrompt', 'Enter path to application, e.g. \'app.py\' or \'app\'');
    DebugConfigurationPrompts.flaskEnterAppPathOrNamePathInvalidNameError = localize('debug.flaskEnterAppPathOrNamePathInvalidNameError', 'Enter a valid name');
    DebugConfigurationPrompts.moduleEnterModuleTitle = localize('debug.moduleEnterModuleTitle', 'Debug Module');
    DebugConfigurationPrompts.moduleEnterModulePrompt = localize('debug.moduleEnterModulePrompt', 'Enter Python module/package name');
    DebugConfigurationPrompts.moduleEnterModuleInvalidNameError = localize('debug.moduleEnterModuleInvalidNameError', 'Enter a valid module name');
    DebugConfigurationPrompts.pyramidEnterDevelopmentIniPathTitle = localize('debug.pyramidEnterDevelopmentIniPathTitle', 'Debug Pyramid');
    // tslint:disable-next-line:no-invalid-template-strings
    DebugConfigurationPrompts.pyramidEnterDevelopmentIniPathPrompt = localize('debug.pyramidEnterDevelopmentIniPathPrompt', '`Enter path to development.ini (\'${workspaceFolderToken}\' points to the root of the current workspace folder)`');
    DebugConfigurationPrompts.pyramidEnterDevelopmentIniPathInvalidFilePathError = localize('debug.pyramidEnterDevelopmentIniPathInvalidFilePathError', 'Enter a valid file path');
    DebugConfigurationPrompts.attachRemotePortTitle = localize('debug.attachRemotePortTitle', 'Remote Debugging');
    DebugConfigurationPrompts.attachRemotePortPrompt = localize('debug.attachRemotePortPrompt', 'Enter the port number that the ptvsd server is listening on');
    DebugConfigurationPrompts.attachRemotePortValidationError = localize('debug.attachRemotePortValidationError', 'Enter a valid port number');
    DebugConfigurationPrompts.attachRemoteHostTitle = localize('debug.attachRemoteHostTitle', 'Remote Debugging');
    DebugConfigurationPrompts.attachRemoteHostPrompt = localize('debug.attachRemoteHostPrompt', 'Enter host name');
    DebugConfigurationPrompts.attachRemoteHostValidationError = localize('debug.attachRemoteHostValidationError', 'Enter a host name or IP address');
})(DebugConfigurationPrompts = exports.DebugConfigurationPrompts || (exports.DebugConfigurationPrompts = {}));
var UnitTests;
(function (UnitTests) {
    UnitTests.testErrorDiagnosticMessage = localize('UnitTests.testErrorDiagnosticMessage', 'Error');
    UnitTests.testFailDiagnosticMessage = localize('UnitTests.testFailDiagnosticMessage', 'Fail');
    UnitTests.testSkippedDiagnosticMessage = localize('UnitTests.testSkippedDiagnosticMessage', 'Skipped');
    UnitTests.configureTests = localize('UnitTests.configureTests', 'Configure Test Framework');
    UnitTests.disableTests = localize('UnitTests.disableTests', 'Disable Tests');
})(UnitTests = exports.UnitTests || (exports.UnitTests = {}));
// Skip using vscode-nls and instead just compute our strings based on key values. Key values
// can be loaded out of the nls.<locale>.json files
let loadedCollection;
let defaultCollection;
const askedForCollection = {};
let loadedLocale;
function localize(key, defValue) {
    // Return a pointer to function so that we refetch it on each call.
    return () => {
        return getString(key, defValue);
    };
}
exports.localize = localize;
function getCollection() {
    // Load the current collection
    if (!loadedCollection || parseLocale() !== loadedLocale) {
        load();
    }
    // Combine the default and loaded collections
    return Object.assign({}, defaultCollection, loadedCollection);
}
exports.getCollection = getCollection;
function getAskedForCollection() {
    return askedForCollection;
}
exports.getAskedForCollection = getAskedForCollection;
function parseLocale() {
    // Attempt to load from the vscode locale. If not there, use english
    return '';
}
function getString(key, defValue) {
    // Load the current collection
    if (!loadedCollection || parseLocale() !== loadedLocale) {
        load();
    }
    // First lookup in the dictionary that matches the current locale
    if (loadedCollection && loadedCollection.hasOwnProperty(key)) {
        askedForCollection[key] = loadedCollection[key];
        return loadedCollection[key];
    }
    // Fallback to the default dictionary
    if (defaultCollection && defaultCollection.hasOwnProperty(key)) {
        askedForCollection[key] = defaultCollection[key];
        return defaultCollection[key];
    }
    // Not found, return the default
    askedForCollection[key] = defValue;
    return defValue;
}
function load() {
    // Figure out our current locale.
    loadedLocale = parseLocale();
    // Get the default collection if necessary. Strings may be in the default or the locale json
    const defaultNlsFile = path.join(constants_1.EXTENSION_ROOT_DIR, 'package.nls.json');
    if (fs.existsSync(defaultNlsFile)) {
        const contents = fs.readFileSync(defaultNlsFile, 'utf8');
        defaultCollection = JSON.parse(contents);
    }
    else {
        defaultCollection = {};
    }
}
// Default to loading the current locale
load();
//# sourceMappingURL=localize.js.map