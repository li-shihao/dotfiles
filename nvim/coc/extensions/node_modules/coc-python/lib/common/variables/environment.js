"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs-extra"));
const inversify_1 = require("inversify");
const path = __importStar(require("path"));
const types_1 = require("../types");
let EnvironmentVariablesService = class EnvironmentVariablesService {
    constructor(pathUtils) {
        this.pathVariable = pathUtils.getPathVariableName();
    }
    async parseFile(filePath, baseVars) {
        if (!filePath || !await fs.pathExists(filePath)) {
            return;
        }
        if (!fs.lstatSync(filePath).isFile()) {
            return;
        }
        return parseEnvFile(await fs.readFile(filePath), baseVars);
    }
    mergeVariables(source, target) {
        if (!target) {
            return;
        }
        const settingsNotToMerge = ['PYTHONPATH', this.pathVariable];
        Object.keys(source).forEach(setting => {
            if (settingsNotToMerge.indexOf(setting) >= 0) {
                return;
            }
            if (target[setting] === undefined) {
                target[setting] = source[setting];
            }
        });
    }
    appendPythonPath(vars, ...pythonPaths) {
        return this.appendPaths(vars, 'PYTHONPATH', ...pythonPaths);
    }
    appendPath(vars, ...paths) {
        return this.appendPaths(vars, this.pathVariable, ...paths);
    }
    appendPaths(vars, variableName, ...pathsToAppend) {
        const valueToAppend = pathsToAppend
            .filter(item => typeof item === 'string' && item.trim().length > 0)
            .map(item => item.trim())
            .join(path.delimiter);
        if (valueToAppend.length === 0) {
            return vars;
        }
        const variable = vars ? vars[variableName] : undefined;
        if (variable && typeof variable === 'string' && variable.length > 0) {
            vars[variableName] = variable + path.delimiter + valueToAppend;
        }
        else {
            vars[variableName] = valueToAppend;
        }
        return vars;
    }
};
EnvironmentVariablesService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_1.IPathUtils))
], EnvironmentVariablesService);
exports.EnvironmentVariablesService = EnvironmentVariablesService;
function parseEnvFile(lines, baseVars) {
    const globalVars = baseVars ? baseVars : {};
    const vars = {};
    lines.toString().split('\n').forEach((line, _idx) => {
        const [name, value] = parseEnvLine(line);
        if (name === '') {
            return;
        }
        vars[name] = substituteEnvVars(value, vars, globalVars);
    });
    return vars;
}
exports.parseEnvFile = parseEnvFile;
function parseEnvLine(line) {
    // Most of the following is an adaptation of the dotenv code:
    //   https://github.com/motdotla/dotenv/blob/master/lib/main.js#L32
    // We don't use dotenv here because it loses ordering, which is
    // significant for substitution.
    const match = line.match(/^\s*([a-zA-Z]\w*)\s*=\s*(.*?)?\s*$/);
    if (!match) {
        return ['', ''];
    }
    const name = match[1];
    let value = match[2];
    if (value && value !== '') {
        if (value[0] === '\'' && value[value.length - 1] === '\'') {
            value = value.substring(1, value.length - 1);
            value = value.replace(/\\n/gm, '\n');
        }
        else if (value[0] === '"' && value[value.length - 1] === '"') {
            value = value.substring(1, value.length - 1);
            value = value.replace(/\\n/gm, '\n');
        }
    }
    else {
        value = '';
    }
    return [name, value];
}
const SUBST_REGEX = /\${([a-zA-Z]\w*)?([^}\w].*)?}/g;
function substituteEnvVars(value, localVars, globalVars, missing = '') {
    // Substitution here is inspired a little by dotenv-expand:
    //   https://github.com/motdotla/dotenv-expand/blob/master/lib/main.js
    let invalid = false;
    let replacement = value;
    replacement = replacement.replace(SUBST_REGEX, (match, substName, bogus, offset, orig) => {
        if (offset > 0 && orig[offset - 1] === '\\') {
            return match;
        }
        if ((bogus && bogus !== '') || !substName || substName === '') {
            invalid = true;
            return match;
        }
        return localVars[substName] || globalVars[substName] || missing;
    });
    if (!invalid && replacement !== value) {
        value = replacement;
    }
    return value.replace(/\\\$/g, '$');
}
//# sourceMappingURL=environment.js.map