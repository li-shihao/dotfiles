import { Disposable, Event } from 'vscode-languageserver-protocol';
import Uri from 'vscode-uri';
import { ConfigurationChangeEvent } from 'coc.nvim';
import { IWorkspaceService } from '../application/types';
import { IPlatformService } from '../platform/types';
import { IConfigurationService, ICurrentProcess } from '../types';
import { EnvironmentVariables, IEnvironmentVariablesProvider, IEnvironmentVariablesService } from './types';
export declare class EnvironmentVariablesProvider implements IEnvironmentVariablesProvider, Disposable {
    private envVarsService;
    private platformService;
    private workspaceService;
    private readonly configurationService;
    private process;
    private fileWatchers;
    private disposables;
    private changeEventEmitter;
    private trackedWorkspaceFolders;
    constructor(envVarsService: IEnvironmentVariablesService, disposableRegistry: Disposable[], platformService: IPlatformService, workspaceService: IWorkspaceService, configurationService: IConfigurationService, process: ICurrentProcess);
    readonly onDidEnvironmentVariablesChange: Event<Uri | undefined>;
    dispose(): void;
    getEnvironmentVariables(resource?: Uri): Promise<EnvironmentVariables>;
    protected configurationChanged(e: ConfigurationChangeEvent): void;
    private getWorkspaceFolderUri;
    private createFileWatcher;
    private onEnvironmentFileChanged;
}
