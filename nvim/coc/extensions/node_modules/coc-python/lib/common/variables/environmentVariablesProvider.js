"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const vscode_uri_1 = __importDefault(require("vscode-uri"));
const coc_nvim_1 = require("coc.nvim");
const types_1 = require("../application/types");
const types_2 = require("../platform/types");
const types_3 = require("../types");
const decorators_1 = require("../utils/decorators");
const types_4 = require("./types");
const cacheDuration = 60 * 60 * 1000;
let EnvironmentVariablesProvider = class EnvironmentVariablesProvider {
    constructor(envVarsService, disposableRegistry, platformService, workspaceService, configurationService, process) {
        this.envVarsService = envVarsService;
        this.platformService = platformService;
        this.workspaceService = workspaceService;
        this.configurationService = configurationService;
        this.process = process;
        this.fileWatchers = new Map();
        this.disposables = [];
        this.trackedWorkspaceFolders = new Set();
        disposableRegistry.push(this);
        this.changeEventEmitter = new vscode_languageserver_protocol_1.Emitter();
        const disposable = this.workspaceService.onDidChangeConfiguration(this.configurationChanged, this);
        this.disposables.push(disposable);
    }
    get onDidEnvironmentVariablesChange() {
        return this.changeEventEmitter.event;
    }
    dispose() {
        this.changeEventEmitter.dispose();
        this.fileWatchers.forEach(watcher => {
            watcher.dispose();
        });
    }
    async getEnvironmentVariables(resource) {
        const settings = this.configurationService.getSettings(resource);
        const workspaceFolderUri = this.getWorkspaceFolderUri(resource);
        this.trackedWorkspaceFolders.add(workspaceFolderUri ? workspaceFolderUri.fsPath : '');
        this.createFileWatcher(settings.envFile, workspaceFolderUri);
        let mergedVars = await this.envVarsService.parseFile(settings.envFile, this.process.env);
        if (!mergedVars) {
            mergedVars = {};
        }
        this.envVarsService.mergeVariables(this.process.env, mergedVars);
        const pathVariable = this.platformService.pathVariableName;
        const pathValue = this.process.env[pathVariable];
        if (pathValue) {
            this.envVarsService.appendPath(mergedVars, pathValue);
        }
        if (this.process.env.PYTHONPATH) {
            this.envVarsService.appendPythonPath(mergedVars, this.process.env.PYTHONPATH);
        }
        return mergedVars;
    }
    configurationChanged(e) {
        if (e.affectsConfiguration('python.envFile')) {
            this.onEnvironmentFileChanged(vscode_uri_1.default.parse(coc_nvim_1.workspace.workspaceFolder.uri));
        }
    }
    getWorkspaceFolderUri(resource) {
        if (!resource) {
            return;
        }
        return vscode_uri_1.default.parse(coc_nvim_1.workspace.workspaceFolder.uri);
    }
    createFileWatcher(envFile, workspaceFolderUri) {
        if (this.fileWatchers.has(envFile)) {
            return;
        }
        const envFileWatcher = coc_nvim_1.workspace.createFileSystemWatcher(envFile);
        this.fileWatchers.set(envFile, envFileWatcher);
        if (envFileWatcher) {
            this.disposables.push(envFileWatcher.onDidChange(() => this.onEnvironmentFileChanged(workspaceFolderUri)));
            this.disposables.push(envFileWatcher.onDidCreate(() => this.onEnvironmentFileChanged(workspaceFolderUri)));
            this.disposables.push(envFileWatcher.onDidDelete(() => this.onEnvironmentFileChanged(workspaceFolderUri)));
        }
    }
    onEnvironmentFileChanged(workspaceFolderUri) {
        decorators_1.clearCachedResourceSpecificIngterpreterData('getEnvironmentVariables', workspaceFolderUri);
        decorators_1.clearCachedResourceSpecificIngterpreterData('CustomEnvironmentVariables', workspaceFolderUri);
        this.changeEventEmitter.fire(workspaceFolderUri);
    }
};
__decorate([
    decorators_1.cacheResourceSpecificInterpreterData('getEnvironmentVariables', cacheDuration)
], EnvironmentVariablesProvider.prototype, "getEnvironmentVariables", null);
EnvironmentVariablesProvider = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_4.IEnvironmentVariablesService)),
    __param(1, inversify_1.inject(types_3.IDisposableRegistry)),
    __param(2, inversify_1.inject(types_2.IPlatformService)),
    __param(3, inversify_1.inject(types_1.IWorkspaceService)),
    __param(4, inversify_1.inject(types_3.IConfigurationService)),
    __param(5, inversify_1.inject(types_3.ICurrentProcess))
], EnvironmentVariablesProvider);
exports.EnvironmentVariablesProvider = EnvironmentVariablesProvider;
//# sourceMappingURL=environmentVariablesProvider.js.map