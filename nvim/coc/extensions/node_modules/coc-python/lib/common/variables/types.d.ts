import Uri from 'vscode-uri';
import { Event } from 'vscode-languageserver-protocol';
export declare type EnvironmentVariables = Object & Record<string, string | undefined>;
export declare const IEnvironmentVariablesService: unique symbol;
export interface IEnvironmentVariablesService {
    parseFile(filePath?: string, baseVars?: EnvironmentVariables): Promise<EnvironmentVariables | undefined>;
    mergeVariables(source: EnvironmentVariables, target: EnvironmentVariables): void;
    appendPythonPath(vars: EnvironmentVariables, ...pythonPaths: string[]): void;
    appendPath(vars: EnvironmentVariables, ...paths: string[]): void;
}
/**
 * An interface for a JavaScript object that
 * acts as a dictionary. The keys are strings.
 */
export interface IStringDictionary<V> {
    [name: string]: V;
}
export interface ISystemVariables {
    resolve(value: string): string;
    resolve(value: string[]): string[];
    resolve(value: IStringDictionary<string>): IStringDictionary<string>;
    resolve(value: IStringDictionary<string[]>): IStringDictionary<string[]>;
    resolve(value: IStringDictionary<IStringDictionary<string>>): IStringDictionary<IStringDictionary<string>>;
    resolveAny<T>(value: T): T;
    [key: string]: any;
}
export declare const IEnvironmentVariablesProvider: unique symbol;
export interface IEnvironmentVariablesProvider {
    onDidEnvironmentVariablesChange: Event<Uri | undefined>;
    getEnvironmentVariables(resource?: Uri): Promise<EnvironmentVariables>;
}
