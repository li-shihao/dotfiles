import { IWorkspaceService } from '../common/application/types';
import { Product, Resource } from '../common/types';
import { IServiceContainer } from '../ioc/types';
import { OutputChannel } from 'coc.nvim';
import { TextDocument, FormattingOptions, Range, TextEdit } from 'vscode-languageserver-types';
import { CancellationToken } from 'vscode-jsonrpc';
import Uri from 'vscode-uri';
export declare abstract class BaseFormatter {
    Id: string;
    private product;
    protected serviceContainer: IServiceContainer;
    protected readonly outputChannel: OutputChannel;
    protected readonly workspace: IWorkspaceService;
    private readonly helper;
    constructor(Id: string, product: Product, serviceContainer: IServiceContainer);
    abstract formatDocument(document: TextDocument, options: FormattingOptions, token: CancellationToken, range?: Range): Thenable<TextEdit[]>;
    protected getDocumentPath(document: TextDocument, fallbackPath: string): string;
    protected getWorkspaceUri(document: TextDocument): Resource;
    protected provideDocumentFormattingEdits(document: TextDocument, _options: FormattingOptions, token: CancellationToken, args: string[], cwd?: string): Promise<TextEdit[]>;
    protected handleError(_expectedFileName: string, error: Error, resource?: Uri): Promise<void>;
    private createTempFile;
    private deleteTempFile;
    private checkCancellation;
}
