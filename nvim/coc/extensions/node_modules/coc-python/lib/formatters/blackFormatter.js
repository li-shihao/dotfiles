// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const productInstaller_1 = require("../common/installer/productInstaller");
const baseFormatter_1 = require("./baseFormatter");
class BlackFormatter extends baseFormatter_1.BaseFormatter {
    constructor(serviceContainer) {
        super('black', productInstaller_1.Product.black, serviceContainer);
    }
    formatDocument(document, options, token, range) {
        const settings = coc_nvim_1.workspace.getConfiguration('python', document.uri);
        const hasCustomArgs = Array.isArray(settings.formatting.blackArgs) && settings.formatting.blackArgs.length > 0;
        const formatSelection = range ? range : false;
        if (formatSelection) {
            const errorMessage = async () => {
                // Black does not support partial formatting on purpose.
                coc_nvim_1.workspace.showMessage('Black does not support the "Format Selection" command', 'error');
                return [];
            };
            return errorMessage();
        }
        const blackArgs = ['--diff', '--quiet'];
        if (hasCustomArgs) {
            blackArgs.push(...settings.formatting.blackArgs);
        }
        const promise = super.provideDocumentFormattingEdits(document, options, token, blackArgs);
        return promise;
    }
}
exports.BlackFormatter = BlackFormatter;
//# sourceMappingURL=blackFormatter.js.map