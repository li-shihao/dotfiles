/// <reference types="node" />
import { IPlatformService } from '../../common/platform/types';
import { IProcessServiceFactory } from '../../common/process/types';
import { ITerminalHelper } from '../../common/terminal/types';
import { ICurrentProcess, IDisposable, Resource } from '../../common/types';
import { IEnvironmentVariablesProvider } from '../../common/variables/types';
import { PythonInterpreter } from '../contracts';
import { IEnvironmentActivationService } from './types';
export declare class EnvironmentActivationService implements IEnvironmentActivationService, IDisposable {
    private readonly helper;
    private readonly platform;
    private processServiceFactory;
    private currentProcess;
    private readonly envVarsService;
    private readonly disposables;
    constructor(helper: ITerminalHelper, platform: IPlatformService, processServiceFactory: IProcessServiceFactory, currentProcess: ICurrentProcess, envVarsService: IEnvironmentVariablesProvider);
    dispose(): void;
    getActivatedEnvironmentVariables(resource: Resource, interpreter?: PythonInterpreter, allowExceptions?: boolean): Promise<NodeJS.ProcessEnv | undefined>;
    protected onDidEnvironmentVariablesChange(affectedResource: Resource): void;
    protected fixActivationCommands(commands: string[]): string[];
    protected parseEnvironmentOutput(output: string): NodeJS.ProcessEnv | undefined;
}
