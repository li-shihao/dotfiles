import { Event, Uri } from 'coc.nvim';
import { IWorkspaceService } from '../../common/application/types';
import { IFileSystem } from '../../common/platform/types';
import { IPersistentStateFactory, Resource } from '../../common/types';
import { Deferred } from '../../common/utils/async';
import { IInterpreterHelper, PythonInterpreter } from '../contracts';
import { IInterpreterAutoSelectionRule, IInterpreterAutoSelectionService, IInterpreterAutoSeletionProxyService } from './types';
export declare class InterpreterAutoSelectionService implements IInterpreterAutoSelectionService {
    private readonly workspaceService;
    private readonly stateFactory;
    private readonly fs;
    private readonly userDefinedInterpreter;
    private readonly environmentInterpreter;
    private readonly interpreterHelper;
    protected readonly autoSelectedWorkspacePromises: Map<string, Deferred<void>>;
    private readonly didAutoSelectedInterpreterEmitter;
    private readonly autoSelectedInterpreterByWorkspace;
    private globallyPreferredInterpreter;
    private readonly rules;
    constructor(workspaceService: IWorkspaceService, stateFactory: IPersistentStateFactory, fs: IFileSystem, systemInterpreter: IInterpreterAutoSelectionRule, currentPathInterpreter: IInterpreterAutoSelectionRule, winRegInterpreter: IInterpreterAutoSelectionRule, cachedPaths: IInterpreterAutoSelectionRule, userDefinedInterpreter: IInterpreterAutoSelectionRule, environmentInterpreter: IInterpreterAutoSelectionRule, workspaceInterpreter: IInterpreterAutoSelectionRule, proxy: IInterpreterAutoSeletionProxyService, interpreterHelper: IInterpreterHelper);
    autoSelectInterpreter(resource: Resource): Promise<void>;
    readonly onDidChangeAutoSelectedInterpreter: Event<void>;
    getAutoSelectedInterpreter(resource: Resource): PythonInterpreter | undefined;
    setWorkspaceInterpreter(resource: Uri, interpreter: PythonInterpreter | undefined): Promise<void>;
    setGlobalInterpreter(interpreter: PythonInterpreter): Promise<void>;
    protected clearWorkspaceStoreIfInvalid(resource: Resource): Promise<void>;
    protected storeAutoSelectedInterpreter(resource: Resource, interpreter: PythonInterpreter | undefined): Promise<void>;
    protected initializeStore(resource: Resource): Promise<void>;
    private clearStoreIfFileIsInvalid;
    private getWorkspacePathKey;
    private getWorkspaceState;
}
