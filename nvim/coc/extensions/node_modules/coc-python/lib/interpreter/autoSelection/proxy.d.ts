import { Event, Uri } from 'coc.nvim';
import { IAsyncDisposableRegistry, Resource } from '../../common/types';
import { PythonInterpreter } from '../contracts';
import { IInterpreterAutoSeletionProxyService } from './types';
export declare class InterpreterAutoSeletionProxyService implements IInterpreterAutoSeletionProxyService {
    private readonly disposables;
    private readonly didAutoSelectedInterpreterEmitter;
    private instance?;
    constructor(disposables: IAsyncDisposableRegistry);
    registerInstance(instance: IInterpreterAutoSeletionProxyService): void;
    readonly onDidChangeAutoSelectedInterpreter: Event<void>;
    getAutoSelectedInterpreter(resource: Resource): PythonInterpreter | undefined;
    setWorkspaceInterpreter(resource: Uri, interpreter: PythonInterpreter | undefined): Promise<void>;
}
