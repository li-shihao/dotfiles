// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const coc_nvim_1 = require("coc.nvim");
const types_1 = require("../../common/types");
let InterpreterAutoSeletionProxyService = class InterpreterAutoSeletionProxyService {
    constructor(disposables) {
        this.disposables = disposables;
        this.didAutoSelectedInterpreterEmitter = new coc_nvim_1.Emitter();
    }
    registerInstance(instance) {
        this.instance = instance;
        this.disposables.push(this.instance.onDidChangeAutoSelectedInterpreter(() => this.didAutoSelectedInterpreterEmitter.fire()));
    }
    get onDidChangeAutoSelectedInterpreter() {
        return this.didAutoSelectedInterpreterEmitter.event;
    }
    getAutoSelectedInterpreter(resource) {
        return this.instance ? this.instance.getAutoSelectedInterpreter(resource) : undefined;
    }
    async setWorkspaceInterpreter(resource, interpreter) {
        return this.instance ? this.instance.setWorkspaceInterpreter(resource, interpreter) : undefined;
    }
};
InterpreterAutoSeletionProxyService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_1.IDisposableRegistry))
], InterpreterAutoSeletionProxyService);
exports.InterpreterAutoSeletionProxyService = InterpreterAutoSeletionProxyService;
//# sourceMappingURL=proxy.js.map