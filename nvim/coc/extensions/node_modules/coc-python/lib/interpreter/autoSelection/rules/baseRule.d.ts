import { IFileSystem } from '../../../common/platform/types';
import { IPersistentStateFactory, Resource } from '../../../common/types';
import { PythonInterpreter } from '../../contracts';
import { AutoSelectionRule, IInterpreterAutoSelectionRule, IInterpreterAutoSelectionService } from '../types';
export declare enum NextAction {
    runNextRule = "runNextRule",
    exit = "exit"
}
export declare abstract class BaseRuleService implements IInterpreterAutoSelectionRule {
    protected readonly ruleName: AutoSelectionRule;
    private readonly fs;
    protected nextRule?: IInterpreterAutoSelectionRule;
    private readonly stateStore;
    constructor(ruleName: AutoSelectionRule, fs: IFileSystem, stateFactory: IPersistentStateFactory);
    setNextRule(rule: IInterpreterAutoSelectionRule): void;
    autoSelectInterpreter(resource: Resource, manager?: IInterpreterAutoSelectionService): Promise<void>;
    getPreviouslyAutoSelectedInterpreter(_resource: Resource): PythonInterpreter | undefined;
    protected abstract onAutoSelectInterpreter(resource: Resource, manager?: IInterpreterAutoSelectionService): Promise<NextAction>;
    protected setGlobalInterpreter(interpreter?: PythonInterpreter, manager?: IInterpreterAutoSelectionService): Promise<boolean>;
    protected clearCachedInterpreterIfInvalid(resource: Resource): Promise<void>;
    protected cacheSelectedInterpreter(resource: Resource, interpreter: PythonInterpreter | undefined): Promise<void>;
    protected next(resource: Resource, manager?: IInterpreterAutoSelectionService): Promise<void>;
}
