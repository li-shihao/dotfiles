// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const semver_1 = require("semver");
const logger_1 = require("../../../common/logger");
const types_1 = require("../../../common/platform/types");
const types_2 = require("../../../common/types");
// import { StopWatch } from '../../../common/utils/stopWatch'
const coc_nvim_1 = require("coc.nvim");
var NextAction;
(function (NextAction) {
    NextAction["runNextRule"] = "runNextRule";
    NextAction["exit"] = "exit";
})(NextAction = exports.NextAction || (exports.NextAction = {}));
let BaseRuleService = class BaseRuleService {
    constructor(ruleName, fs, stateFactory) {
        this.ruleName = ruleName;
        this.fs = fs;
        this.stateStore = stateFactory.createGlobalPersistentState(`InterpreterAutoSeletionRule-${this.ruleName}`, undefined);
    }
    setNextRule(rule) {
        this.nextRule = rule;
    }
    async autoSelectInterpreter(resource, manager) {
        await this.clearCachedInterpreterIfInvalid(resource);
        // const stopWatch = new StopWatch()
        const action = await this.onAutoSelectInterpreter(resource, manager);
        // traceVerbose(`Rule = ${this.ruleName}, result = ${action}`)
        // const identified = action === NextAction.runNextRule
        // sendTelemetryEvent(EventName.PYTHON_INTERPRETER_AUTO_SELECTION, { elapsedTime: stopWatch.elapsedTime }, { rule: this.ruleName, identified })
        if (action === NextAction.runNextRule) {
            await this.next(resource, manager);
        }
    }
    getPreviouslyAutoSelectedInterpreter(_resource) {
        const value = this.stateStore.value;
        logger_1.traceVerbose(`Current value for rule ${this.ruleName} is ${value ? JSON.stringify(value) : 'nothing'}`);
        return value;
    }
    async setGlobalInterpreter(interpreter, manager) {
        await this.cacheSelectedInterpreter(undefined, interpreter);
        if (!interpreter || !manager || !interpreter.version) {
            return false;
        }
        const preferredInterpreter = manager.getAutoSelectedInterpreter(undefined);
        const comparison = preferredInterpreter && preferredInterpreter.version ? semver_1.compare(interpreter.version.raw, preferredInterpreter.version.raw) : 1;
        if (comparison > 0) {
            await manager.setGlobalInterpreter(interpreter);
            return true;
        }
        if (comparison === 0) {
            return true;
        }
        return false;
    }
    async clearCachedInterpreterIfInvalid(resource) {
        if (!this.stateStore.value || await this.fs.fileExists(this.stateStore.value.path)) {
            return;
        }
        // sendTelemetryEvent(EventName.PYTHON_INTERPRETER_AUTO_SELECTION, {}, { rule: this.ruleName, interpreterMissing: true })
        await this.cacheSelectedInterpreter(resource, undefined);
    }
    async cacheSelectedInterpreter(resource, interpreter) {
        let { rootPath } = coc_nvim_1.workspace;
        if (rootPath && interpreter && interpreter.path.toLowerCase().startsWith(rootPath)) {
            return;
        }
        await this.stateStore.updateValue(interpreter);
    }
    async next(resource, manager) {
        logger_1.traceVerbose(`Executing next rule from ${this.ruleName}`);
        return this.nextRule && manager ? this.nextRule.autoSelectInterpreter(resource, manager) : undefined;
    }
};
__decorate([
    logger_1.traceDecorators.verbose('autoSelectInterpreter')
], BaseRuleService.prototype, "autoSelectInterpreter", null);
__decorate([
    logger_1.traceDecorators.verbose('setGlobalInterpreter')
], BaseRuleService.prototype, "setGlobalInterpreter", null);
BaseRuleService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.unmanaged()),
    __param(1, inversify_1.inject(types_1.IFileSystem)),
    __param(2, inversify_1.inject(types_2.IPersistentStateFactory))
], BaseRuleService);
exports.BaseRuleService = BaseRuleService;
//# sourceMappingURL=baseRule.js.map