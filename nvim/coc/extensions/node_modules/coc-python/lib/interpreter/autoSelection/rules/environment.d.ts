import { IWorkspaceService } from '../../../common/application/types';
import { IFileSystem } from '../../../common/platform/types';
import { IPersistentStateFactory, Resource } from '../../../common/types';
import { IPythonPathUpdaterServiceManager } from '../../configuration/types';
import { IInterpreterHelper, PythonInterpreter } from '../../contracts';
import { IInterpreterAutoSelectionService } from '../types';
import { BaseRuleService, NextAction } from './baseRule';
/**
 * EnvironmentAutoSelectionRule check current python path, if inside workspaceFolder, then use it.
 * @public
 *
 * @extends {BaseRuleService}
 */
export declare class EnvironmentAutoSelectionRule extends BaseRuleService {
    private readonly helper;
    private readonly pythonPathUpdaterService;
    private readonly workspaceService;
    constructor(fs: IFileSystem, helper: IInterpreterHelper, stateFactory: IPersistentStateFactory, pythonPathUpdaterService: IPythonPathUpdaterServiceManager, workspaceService: IWorkspaceService);
    protected onAutoSelectInterpreter(resource: Resource, manager?: IInterpreterAutoSelectionService): Promise<NextAction>;
    protected getWorkspaceEnvironmentInterpreters(resource: Resource): Promise<PythonInterpreter[] | undefined>;
    private getInterpreterDetails;
    protected cacheSelectedInterpreter(resource: Resource, interpreter: PythonInterpreter | undefined): Promise<void>;
    private executablePath;
}
