// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const path_1 = __importDefault(require("path"));
const inversify_1 = require("inversify");
const which_1 = __importDefault(require("which"));
const types_1 = require("../../../common/application/types");
const logger_1 = require("../../../common/logger");
const types_2 = require("../../../common/platform/types");
const types_3 = require("../../../common/types");
const types_4 = require("../../configuration/types");
const contracts_1 = require("../../contracts");
const types_5 = require("../types");
const baseRule_1 = require("./baseRule");
/**
 * EnvironmentAutoSelectionRule check current python path, if inside workspaceFolder, then use it.
 * @public
 *
 * @extends {BaseRuleService}
 */
let EnvironmentAutoSelectionRule = class EnvironmentAutoSelectionRule extends baseRule_1.BaseRuleService {
    constructor(fs, helper, stateFactory, pythonPathUpdaterService, workspaceService) {
        super(types_5.AutoSelectionRule.environment, fs, stateFactory);
        this.helper = helper;
        this.pythonPathUpdaterService = pythonPathUpdaterService;
        this.workspaceService = workspaceService;
    }
    async onAutoSelectInterpreter(resource, manager) {
        const workspacePath = this.helper.getActiveWorkspaceUri(resource);
        if (!workspacePath) {
            return baseRule_1.NextAction.runNextRule;
        }
        const interpreters = await this.getWorkspaceEnvironmentInterpreters(resource);
        let bestInterpreter;
        if (Array.isArray(interpreters) && interpreters.length > 0) {
            bestInterpreter = this.helper.getBestInterpreter(interpreters);
        }
        if (bestInterpreter && manager) {
            await this.cacheSelectedInterpreter(workspacePath.folderUri, bestInterpreter);
            await manager.setWorkspaceInterpreter(workspacePath.folderUri, bestInterpreter);
        }
        logger_1.traceVerbose(`Selected Interpreter from ${this.ruleName}, ${bestInterpreter ? JSON.stringify(bestInterpreter) : 'Nothing Selected'}`);
        return bestInterpreter ? baseRule_1.NextAction.exit : baseRule_1.NextAction.runNextRule;
    }
    async getWorkspaceEnvironmentInterpreters(resource) {
        const workspaceFolder = this.workspaceService.getWorkspaceFolder(resource);
        if (!workspaceFolder) {
            return;
        }
        let folder = coc_nvim_1.Uri.parse(workspaceFolder.uri).fsPath;
        let paths = await Promise.all(['python', 'python3'].map(cmd => {
            return this.executablePath(cmd);
        }));
        paths = paths.filter(p => p != null && p.toLowerCase().startsWith(folder.toLowerCase()));
        if (paths.length == 0) {
            let cmds = ['python', 'python3'].map(p => {
                return path_1.default.join(folder, 'bin', p);
            });
            paths = await Promise.all(cmds.map(cmd => {
                return coc_nvim_1.workspace.nvim.call('executable', cmd).then(res => {
                    return res == 1 ? cmd : null;
                });
            }));
            paths = paths.filter(p => !!p);
        }
        let interpreters = await Promise.all(paths.map(pythonPath => {
            return this.getInterpreterDetails(pythonPath);
        }));
        return interpreters.filter(s => s != null);
    }
    async getInterpreterDetails(pythonPath) {
        return this.helper.getInterpreterInformation(pythonPath)
            .then(details => {
            if (!details) {
                return;
            }
            return Object.assign({}, details, { path: pythonPath, type: details.type ? details.type : contracts_1.InterpreterType.VirtualEnv });
        });
    }
    async cacheSelectedInterpreter(resource, interpreter) {
        // We should never clear settings in user settings.json.
        if (!interpreter) {
            await super.cacheSelectedInterpreter(resource, interpreter);
            return;
        }
        const activeWorkspace = this.helper.getActiveWorkspaceUri(resource);
        if (!activeWorkspace) {
            return;
        }
        await this.pythonPathUpdaterService.updatePythonPath(interpreter.path, activeWorkspace.configTarget, 'load', activeWorkspace.folderUri);
        await super.cacheSelectedInterpreter(resource, interpreter);
    }
    async executablePath(cmd) {
        return new Promise(resolve => {
            which_1.default(cmd, (err, path) => {
                if (err)
                    return resolve(null);
                resolve(path);
            });
        });
    }
};
EnvironmentAutoSelectionRule = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_2.IFileSystem)),
    __param(1, inversify_1.inject(contracts_1.IInterpreterHelper)),
    __param(2, inversify_1.inject(types_3.IPersistentStateFactory)),
    __param(3, inversify_1.inject(types_4.IPythonPathUpdaterServiceManager)),
    __param(4, inversify_1.inject(types_1.IWorkspaceService))
], EnvironmentAutoSelectionRule);
exports.EnvironmentAutoSelectionRule = EnvironmentAutoSelectionRule;
//# sourceMappingURL=environment.js.map