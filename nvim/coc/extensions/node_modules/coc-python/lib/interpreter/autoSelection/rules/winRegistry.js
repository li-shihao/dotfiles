// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const logger_1 = require("../../../common/logger");
const types_1 = require("../../../common/platform/types");
const types_2 = require("../../../common/types");
const platform_1 = require("../../../common/utils/platform");
const contracts_1 = require("../../contracts");
const types_3 = require("../types");
const baseRule_1 = require("./baseRule");
let WindowsRegistryInterpretersAutoSelectionRule = class WindowsRegistryInterpretersAutoSelectionRule extends baseRule_1.BaseRuleService {
    constructor(fs, helper, stateFactory, platform, winRegInterpreterLocator) {
        super(types_3.AutoSelectionRule.windowsRegistry, fs, stateFactory);
        this.helper = helper;
        this.platform = platform;
        this.winRegInterpreterLocator = winRegInterpreterLocator;
    }
    async onAutoSelectInterpreter(resource, manager) {
        if (this.platform.osType !== platform_1.OSType.Windows) {
            return baseRule_1.NextAction.runNextRule;
        }
        const interpreters = await this.winRegInterpreterLocator.getInterpreters(resource);
        const bestInterpreter = this.helper.getBestInterpreter(interpreters);
        logger_1.traceVerbose(`Selected Interpreter from ${this.ruleName}, ${bestInterpreter ? JSON.stringify(bestInterpreter) : 'Nothing Selected'}`);
        return await this.setGlobalInterpreter(bestInterpreter, manager) ? baseRule_1.NextAction.exit : baseRule_1.NextAction.runNextRule;
    }
};
WindowsRegistryInterpretersAutoSelectionRule = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_1.IFileSystem)),
    __param(1, inversify_1.inject(contracts_1.IInterpreterHelper)),
    __param(2, inversify_1.inject(types_2.IPersistentStateFactory)),
    __param(3, inversify_1.inject(types_1.IPlatformService)),
    __param(4, inversify_1.inject(contracts_1.IInterpreterLocatorService)), __param(4, inversify_1.named(contracts_1.WINDOWS_REGISTRY_SERVICE))
], WindowsRegistryInterpretersAutoSelectionRule);
exports.WindowsRegistryInterpretersAutoSelectionRule = WindowsRegistryInterpretersAutoSelectionRule;
//# sourceMappingURL=winRegistry.js.map