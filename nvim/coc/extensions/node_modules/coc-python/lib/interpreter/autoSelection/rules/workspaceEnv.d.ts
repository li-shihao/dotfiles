import { IWorkspaceService } from '../../../common/application/types';
import { IFileSystem, IPlatformService } from '../../../common/platform/types';
import { IPersistentStateFactory, Resource } from '../../../common/types';
import { IPythonPathUpdaterServiceManager } from '../../configuration/types';
import { IInterpreterHelper, IInterpreterLocatorService, PythonInterpreter } from '../../contracts';
import { IInterpreterAutoSelectionService } from '../types';
import { BaseRuleService, NextAction } from './baseRule';
export declare class WorkspaceVirtualEnvInterpretersAutoSelectionRule extends BaseRuleService {
    private readonly helper;
    private readonly platform;
    private readonly workspaceService;
    private readonly pythonPathUpdaterService;
    private readonly pipEnvInterpreterLocator;
    private readonly workspaceVirtualEnvInterpreterLocator;
    constructor(fs: IFileSystem, helper: IInterpreterHelper, stateFactory: IPersistentStateFactory, platform: IPlatformService, workspaceService: IWorkspaceService, pythonPathUpdaterService: IPythonPathUpdaterServiceManager, pipEnvInterpreterLocator: IInterpreterLocatorService, workspaceVirtualEnvInterpreterLocator: IInterpreterLocatorService);
    protected onAutoSelectInterpreter(resource: Resource, manager?: IInterpreterAutoSelectionService): Promise<NextAction>;
    protected getWorkspaceVirtualEnvInterpreters(resource: Resource): Promise<PythonInterpreter[] | undefined>;
    protected cacheSelectedInterpreter(resource: Resource, interpreter: PythonInterpreter | undefined): Promise<void>;
}
