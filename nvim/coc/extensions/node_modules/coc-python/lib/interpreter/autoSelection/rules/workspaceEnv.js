// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const coc_nvim_1 = require("coc.nvim");
const types_1 = require("../../../common/application/types");
const logger_1 = require("../../../common/logger");
const types_2 = require("../../../common/platform/types");
const types_3 = require("../../../common/types");
const async_1 = require("../../../common/utils/async");
const platform_1 = require("../../../common/utils/platform");
const types_4 = require("../../configuration/types");
const contracts_1 = require("../../contracts");
const types_5 = require("../types");
const baseRule_1 = require("./baseRule");
let WorkspaceVirtualEnvInterpretersAutoSelectionRule = class WorkspaceVirtualEnvInterpretersAutoSelectionRule extends baseRule_1.BaseRuleService {
    constructor(fs, helper, stateFactory, platform, workspaceService, pythonPathUpdaterService, pipEnvInterpreterLocator, workspaceVirtualEnvInterpreterLocator) {
        super(types_5.AutoSelectionRule.workspaceVirtualEnvs, fs, stateFactory);
        this.helper = helper;
        this.platform = platform;
        this.workspaceService = workspaceService;
        this.pythonPathUpdaterService = pythonPathUpdaterService;
        this.pipEnvInterpreterLocator = pipEnvInterpreterLocator;
        this.workspaceVirtualEnvInterpreterLocator = workspaceVirtualEnvInterpreterLocator;
    }
    async onAutoSelectInterpreter(resource, manager) {
        const workspacePath = this.helper.getActiveWorkspaceUri(resource);
        if (!workspacePath) {
            return baseRule_1.NextAction.runNextRule;
        }
        const pipEnvPromise = async_1.createDeferredFromPromise(this.pipEnvInterpreterLocator.getInterpreters(workspacePath.folderUri, true));
        const virtualEnvPromise = async_1.createDeferredFromPromise(this.getWorkspaceVirtualEnvInterpreters(workspacePath.folderUri));
        // Use only one, we currently do not have support for both pipenv and virtual env in same workspace.
        // If users have this, then theu can specify which one is to be used.
        const interpreters = await Promise.race([pipEnvPromise.promise, virtualEnvPromise.promise]);
        let bestInterpreter;
        if (Array.isArray(interpreters) && interpreters.length > 0) {
            bestInterpreter = this.helper.getBestInterpreter(interpreters);
        }
        else {
            const [pipEnv, virtualEnv] = await Promise.all([pipEnvPromise.promise, virtualEnvPromise.promise]);
            const pipEnvList = Array.isArray(pipEnv) ? pipEnv : [];
            const virtualEnvList = Array.isArray(virtualEnv) ? virtualEnv : [];
            bestInterpreter = this.helper.getBestInterpreter(pipEnvList.concat(virtualEnvList));
        }
        if (bestInterpreter && manager) {
            await this.cacheSelectedInterpreter(workspacePath.folderUri, bestInterpreter);
            await manager.setWorkspaceInterpreter(workspacePath.folderUri, bestInterpreter);
        }
        logger_1.traceVerbose(`Selected Interpreter from ${this.ruleName}, ${bestInterpreter ? JSON.stringify(bestInterpreter) : 'Nothing Selected'}`);
        return baseRule_1.NextAction.runNextRule;
    }
    async getWorkspaceVirtualEnvInterpreters(resource) {
        if (!resource) {
            return;
        }
        const workspaceFolder = this.workspaceService.getWorkspaceFolder(resource);
        if (!workspaceFolder) {
            return;
        }
        // Now check virtual environments under the workspace root
        const interpreters = await this.workspaceVirtualEnvInterpreterLocator.getInterpreters(resource, true);
        const workspacePath = this.platform.osType === platform_1.OSType.Windows ? coc_nvim_1.Uri.parse(workspaceFolder.uri).fsPath.toUpperCase() : coc_nvim_1.Uri.parse(workspaceFolder.uri).fsPath;
        return interpreters.filter(interpreter => {
            const fsPath = coc_nvim_1.Uri.file(interpreter.path).fsPath;
            const fsPathToCompare = this.platform.osType === platform_1.OSType.Windows ? fsPath.toUpperCase() : fsPath;
            return fsPathToCompare.startsWith(workspacePath);
        });
    }
    async cacheSelectedInterpreter(resource, interpreter) {
        // We should never clear settings in user settings.json.
        if (!interpreter) {
            await super.cacheSelectedInterpreter(resource, interpreter);
            return;
        }
        const activeWorkspace = this.helper.getActiveWorkspaceUri(resource);
        if (!activeWorkspace) {
            return;
        }
        await this.pythonPathUpdaterService.updatePythonPath(interpreter.path, activeWorkspace.configTarget, 'load', activeWorkspace.folderUri);
        await super.cacheSelectedInterpreter(resource, interpreter);
    }
};
WorkspaceVirtualEnvInterpretersAutoSelectionRule = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_2.IFileSystem)),
    __param(1, inversify_1.inject(contracts_1.IInterpreterHelper)),
    __param(2, inversify_1.inject(types_3.IPersistentStateFactory)),
    __param(3, inversify_1.inject(types_2.IPlatformService)),
    __param(4, inversify_1.inject(types_1.IWorkspaceService)),
    __param(5, inversify_1.inject(types_4.IPythonPathUpdaterServiceManager)),
    __param(6, inversify_1.inject(contracts_1.IInterpreterLocatorService)), __param(6, inversify_1.named(contracts_1.PIPENV_SERVICE)),
    __param(7, inversify_1.inject(contracts_1.IInterpreterLocatorService)), __param(7, inversify_1.named(contracts_1.WORKSPACE_VIRTUAL_ENV_SERVICE))
], WorkspaceVirtualEnvInterpretersAutoSelectionRule);
exports.WorkspaceVirtualEnvInterpretersAutoSelectionRule = WorkspaceVirtualEnvInterpretersAutoSelectionRule;
//# sourceMappingURL=workspaceEnv.js.map