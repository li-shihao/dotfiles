import { Event, Uri } from 'coc.nvim';
import { Resource } from '../../common/types';
import { PythonInterpreter } from '../contracts';
export declare const IInterpreterAutoSeletionProxyService: unique symbol;
/**
 * Interface similar to IInterpreterAutoSelectionService, to avoid chickn n egg situation.
 * Do we get python path from config first or get auto selected interpreter first!?
 * However, the class that reads python Path, must first give preference to selected interpreter.
 * But all classes everywhere make use of python settings!
 * Solution - Use a proxy that does nothing first, but later the real instance is injected.
 *
 * @export
 * @interface IInterpreterAutoSeletionProxyService
 */
export interface IInterpreterAutoSeletionProxyService {
    readonly onDidChangeAutoSelectedInterpreter: Event<void>;
    getAutoSelectedInterpreter(resource: Resource): PythonInterpreter | undefined;
    registerInstance?(instance: IInterpreterAutoSeletionProxyService): void;
    setWorkspaceInterpreter(resource: Uri, interpreter: PythonInterpreter | undefined): Promise<void>;
}
export declare const IInterpreterAutoSelectionService: unique symbol;
export interface IInterpreterAutoSelectionService extends IInterpreterAutoSeletionProxyService {
    readonly onDidChangeAutoSelectedInterpreter: Event<void>;
    autoSelectInterpreter(resource: Resource): Promise<void>;
    setGlobalInterpreter(interpreter: PythonInterpreter | undefined): Promise<void>;
}
export declare enum AutoSelectionRule {
    all = "all",
    environment = "environment",
    currentPath = "currentPath",
    workspaceVirtualEnvs = "workspaceEnvs",
    settings = "settings",
    cachedInterpreters = "cachedInterpreters",
    systemWide = "system",
    windowsRegistry = "windowsRegistry"
}
export declare const IInterpreterAutoSelectionRule: unique symbol;
export interface IInterpreterAutoSelectionRule {
    setNextRule(rule: IInterpreterAutoSelectionRule): void;
    autoSelectInterpreter(resource: Resource, manager?: IInterpreterAutoSelectionService): Promise<void>;
    getPreviouslyAutoSelectedInterpreter(resource: Resource): PythonInterpreter | undefined;
}
