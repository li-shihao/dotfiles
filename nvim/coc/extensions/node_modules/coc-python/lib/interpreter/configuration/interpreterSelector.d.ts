import { Uri } from 'coc.nvim';
import { IApplicationShell, ICommandManager, IDocumentManager, IWorkspaceService } from '../../common/application/types';
import { IConfigurationService, IPathUtils } from '../../common/types';
import { IInterpreterService, IShebangCodeLensProvider, PythonInterpreter } from '../contracts';
import { IInterpreterComparer, IInterpreterSelector, IPythonPathUpdaterServiceManager } from './types';
export interface IInterpreterQuickPickItem {
    path: string;
}
export declare class InterpreterSelector implements IInterpreterSelector {
    private readonly interpreterManager;
    private readonly workspaceService;
    private readonly applicationShell;
    private readonly documentManager;
    private readonly pathUtils;
    private readonly interpreterComparer;
    private readonly pythonPathUpdaterService;
    private readonly shebangCodeLensProvider;
    private readonly configurationService;
    private readonly commandManager;
    private disposables;
    constructor(interpreterManager: IInterpreterService, workspaceService: IWorkspaceService, applicationShell: IApplicationShell, documentManager: IDocumentManager, pathUtils: IPathUtils, interpreterComparer: IInterpreterComparer, pythonPathUpdaterService: IPythonPathUpdaterServiceManager, shebangCodeLensProvider: IShebangCodeLensProvider, configurationService: IConfigurationService, commandManager: ICommandManager);
    dispose(): void;
    initialize(): void;
    getSuggestions(resourceUri?: Uri): Promise<IInterpreterQuickPickItem[]>;
    protected suggestionToQuickPickItem(suggestion: PythonInterpreter, workspaceUri?: Uri): Promise<IInterpreterQuickPickItem>;
    protected setInterpreter(): Promise<void>;
    protected setShebangInterpreter(): Promise<void>;
    private getWorkspaceToSetPythonPath;
}
