"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const coc_nvim_1 = require("coc.nvim");
const types_1 = require("../../common/application/types");
const constants_1 = require("../../common/constants");
const types_2 = require("../../common/types");
const contracts_1 = require("../contracts");
const types_3 = require("./types");
let InterpreterSelector = class InterpreterSelector {
    constructor(interpreterManager, workspaceService, applicationShell, documentManager, pathUtils, interpreterComparer, pythonPathUpdaterService, shebangCodeLensProvider, configurationService, commandManager) {
        this.interpreterManager = interpreterManager;
        this.workspaceService = workspaceService;
        this.applicationShell = applicationShell;
        this.documentManager = documentManager;
        this.pathUtils = pathUtils;
        this.interpreterComparer = interpreterComparer;
        this.pythonPathUpdaterService = pythonPathUpdaterService;
        this.shebangCodeLensProvider = shebangCodeLensProvider;
        this.configurationService = configurationService;
        this.commandManager = commandManager;
        this.disposables = [];
    }
    dispose() {
        this.disposables.forEach(disposable => disposable.dispose());
    }
    initialize() {
        this.disposables.push(this.commandManager.registerCommand(constants_1.Commands.Set_Interpreter, this.setInterpreter.bind(this)));
        this.disposables.push(this.commandManager.registerCommand(constants_1.Commands.Set_ShebangInterpreter, this.setShebangInterpreter.bind(this)));
    }
    async getSuggestions(resourceUri) {
        const interpreters = await this.interpreterManager.getInterpreters(resourceUri);
        interpreters.sort(this.interpreterComparer.compare.bind(this.interpreterComparer));
        return Promise.all(interpreters.map(item => this.suggestionToQuickPickItem(item, resourceUri)));
    }
    async suggestionToQuickPickItem(suggestion, workspaceUri) {
        // const detail = this.pathUtils.getDisplayName(suggestion.path, workspaceUri ? workspaceUri.fsPath : undefined)
        // const cachedPrefix = suggestion.cachedEntry ? '(cached) ' : ''
        return {
            // tslint:disable-next-line:no-non-null-assertion
            path: suggestion.path
        };
    }
    async setInterpreter() {
        const { workspaceFolders } = this.workspaceService;
        const setInterpreterGlobally = !Array.isArray(workspaceFolders) || workspaceFolders.length == 0;
        let configTarget = coc_nvim_1.ConfigurationTarget.Global;
        let wkspace;
        if (!setInterpreterGlobally) {
            wkspace = coc_nvim_1.Uri.parse(coc_nvim_1.workspace.workspaceFolder.uri);
            configTarget = coc_nvim_1.ConfigurationTarget.Workspace;
        }
        const suggestions = await this.getSuggestions(wkspace);
        const settings = this.configurationService.getSettings(wkspace);
        const currentPythonPath = settings.pythonPath;
        const idx = await coc_nvim_1.workspace.showQuickpick(suggestions.map(s => s.path), `Select pythonPath, current: ${currentPythonPath}`);
        if (idx !== -1) {
            let selection = suggestions[idx];
            await this.pythonPathUpdaterService.updatePythonPath(selection.path, configTarget, 'ui', wkspace);
            coc_nvim_1.workspace.nvim.command('CocRestart', true);
        }
        // settings.
    }
    async setShebangInterpreter() {
        const shebang = await this.shebangCodeLensProvider.detectShebang(coc_nvim_1.workspace.getDocument(coc_nvim_1.workspace.bufnr).textDocument);
        if (!shebang) {
            return;
        }
        const doc = coc_nvim_1.workspace.getDocument(coc_nvim_1.workspace.bufnr);
        const isGlobalChange = !Array.isArray(this.workspaceService.workspaceFolders) || this.workspaceService.workspaceFolders.length === 0;
        const workspaceFolder = this.workspaceService.getWorkspaceFolder(coc_nvim_1.Uri.parse(doc.uri));
        const isWorkspaceChange = Array.isArray(this.workspaceService.workspaceFolders) && this.workspaceService.workspaceFolders.length === 1;
        if (isGlobalChange) {
            await this.pythonPathUpdaterService.updatePythonPath(shebang, coc_nvim_1.ConfigurationTarget.Global, 'shebang');
            return;
        }
        if (isWorkspaceChange || !workspaceFolder) {
            await this.pythonPathUpdaterService.updatePythonPath(shebang, coc_nvim_1.ConfigurationTarget.Workspace, 'shebang');
            return;
        }
        await this.pythonPathUpdaterService.updatePythonPath(shebang, coc_nvim_1.ConfigurationTarget.Workspace, 'shebang', coc_nvim_1.Uri.parse(workspaceFolder.uri));
    }
    async getWorkspaceToSetPythonPath() {
        if (!Array.isArray(this.workspaceService.workspaceFolders) || this.workspaceService.workspaceFolders.length === 0) {
            return undefined;
        }
        // Ok we have multiple workspaces, get the user to pick a folder.
        // const workspaceFolder = await this.applicationShell.showWorkspaceFolderPick({ placeHolder: 'Select a workspace' })
        // return workspaceFolder ? { folderUri: workspaceFolder.uri, configTarget: ConfigurationTarget.WorkspaceFolder } : undefined
        return { folderUri: coc_nvim_1.Uri.parse(this.workspaceService.workspaceFolders[0].uri), configTarget: coc_nvim_1.ConfigurationTarget.Workspace };
    }
};
InterpreterSelector = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(contracts_1.IInterpreterService)),
    __param(1, inversify_1.inject(types_1.IWorkspaceService)),
    __param(2, inversify_1.inject(types_1.IApplicationShell)),
    __param(3, inversify_1.inject(types_1.IDocumentManager)),
    __param(4, inversify_1.inject(types_2.IPathUtils)),
    __param(5, inversify_1.inject(types_3.IInterpreterComparer)),
    __param(6, inversify_1.inject(types_3.IPythonPathUpdaterServiceManager)),
    __param(7, inversify_1.inject(contracts_1.IShebangCodeLensProvider)),
    __param(8, inversify_1.inject(types_2.IConfigurationService)),
    __param(9, inversify_1.inject(types_1.ICommandManager))
], InterpreterSelector);
exports.InterpreterSelector = InterpreterSelector;
//# sourceMappingURL=interpreterSelector.js.map