import { ConfigurationTarget, Disposable, Uri } from 'coc.nvim';
import { PythonInterpreter } from '../contracts';
export interface IPythonPathUpdaterService {
    updatePythonPath(pythonPath: string, trigger: 'ui' | 'shebang' | 'load'): Promise<void>;
}
export declare const IPythonPathUpdaterServiceFactory: unique symbol;
export interface IPythonPathUpdaterServiceFactory {
    getGlobalPythonPathConfigurationService(): IPythonPathUpdaterService;
    getWorkspacePythonPathConfigurationService(wkspace: Uri): IPythonPathUpdaterService;
    getWorkspaceFolderPythonPathConfigurationService(workspaceFolder: Uri): IPythonPathUpdaterService;
}
export declare const IPythonPathUpdaterServiceManager: unique symbol;
export interface IPythonPathUpdaterServiceManager {
    updatePythonPath(pythonPath: string, configTarget: ConfigurationTarget, trigger: 'ui' | 'shebang' | 'load', wkspace?: Uri): Promise<void>;
}
export declare const IInterpreterSelector: unique symbol;
export interface IInterpreterSelector extends Disposable {
    initialize(): void;
}
export declare const IInterpreterComparer: unique symbol;
export interface IInterpreterComparer {
    compare(a: PythonInterpreter, b: PythonInterpreter): number;
}
