import { SemVer } from 'semver';
import { Disposable, Event, TextDocument } from 'vscode-languageserver-protocol';
import Uri from 'vscode-uri';
import { ConfigurationTarget, CodeLensProvider } from 'coc.nvim';
import { InterpreterInfomation } from '../common/process/types';
import { Resource } from '../common/types';
export declare const INTERPRETER_LOCATOR_SERVICE = "IInterpreterLocatorService";
export declare const WINDOWS_REGISTRY_SERVICE = "WindowsRegistryService";
export declare const CONDA_ENV_FILE_SERVICE = "CondaEnvFileService";
export declare const CONDA_ENV_SERVICE = "CondaEnvService";
export declare const CURRENT_PATH_SERVICE = "CurrentPathService";
export declare const KNOWN_PATH_SERVICE = "KnownPathsService";
export declare const GLOBAL_VIRTUAL_ENV_SERVICE = "VirtualEnvService";
export declare const WORKSPACE_VIRTUAL_ENV_SERVICE = "WorkspaceVirtualEnvService";
export declare const PIPENV_SERVICE = "PipEnvService";
export declare const IInterpreterVersionService: unique symbol;
export interface IInterpreterVersionService {
    getVersion(pythonPath: string, defaultValue: string): Promise<string>;
    getPipVersion(pythonPath: string): Promise<string>;
}
export declare const IKnownSearchPathsForInterpreters: unique symbol;
export interface IKnownSearchPathsForInterpreters {
    getSearchPaths(): string[];
}
export declare const IVirtualEnvironmentsSearchPathProvider: unique symbol;
export interface IVirtualEnvironmentsSearchPathProvider {
    getSearchPaths(resource?: Uri): Promise<string[]>;
}
export declare const IInterpreterLocatorService: unique symbol;
export interface IInterpreterLocatorService extends Disposable {
    readonly onLocating: Event<Promise<PythonInterpreter[]>>;
    readonly hasInterpreters: Promise<boolean>;
    getInterpreters(resource?: Uri, ignoreCache?: boolean): Promise<PythonInterpreter[]>;
}
export interface CondaInfo {
    envs?: string[];
    'sys.version'?: string;
    'sys.prefix'?: string;
    'python_version'?: string;
    default_prefix?: string;
    conda_version?: string;
}
export declare const ICondaService: unique symbol;
export interface ICondaService {
    readonly condaEnvironmentsFile: string | undefined;
    getCondaFile(): Promise<string>;
    isCondaAvailable(): Promise<boolean>;
    getCondaVersion(): Promise<SemVer | undefined>;
    getCondaInfo(): Promise<CondaInfo | undefined>;
    getCondaEnvironments(ignoreCache: boolean): Promise<({
        name: string;
        path: string;
    }[]) | undefined>;
    getInterpreterPath(condaEnvironmentPath: string): string;
    getCondaFileFromInterpreter(interpreterPath?: string, envName?: string): Promise<string | undefined>;
    isCondaEnvironment(interpreterPath: string): Promise<boolean>;
    getCondaEnvironment(interpreterPath: string): Promise<{
        name: string;
        path: string;
    } | undefined>;
}
export declare enum InterpreterType {
    Unknown = "Unknown",
    Conda = "Conda",
    VirtualEnv = "VirtualEnv",
    Pipenv = "PipEnv",
    Pyenv = "Pyenv",
    Venv = "Venv"
}
export declare type PythonInterpreter = InterpreterInfomation & {
    companyDisplayName?: string;
    displayName?: string;
    type: InterpreterType;
    envName?: string;
    envPath?: string;
    cachedEntry?: boolean;
};
export interface WorkspacePythonPath {
    folderUri: Uri;
    configTarget: ConfigurationTarget.User | ConfigurationTarget.Workspace;
}
export declare const IInterpreterService: unique symbol;
export interface IInterpreterService {
    onDidChangeInterpreter: Event<void>;
    onDidChangeInterpreterInformation: Event<PythonInterpreter>;
    hasInterpreters: Promise<boolean>;
    getInterpreters(resource?: Uri): Promise<PythonInterpreter[]>;
    getActiveInterpreter(resource?: Uri): Promise<PythonInterpreter | undefined>;
    getInterpreterDetails(pythonPath: string, resoure?: Uri): Promise<undefined | PythonInterpreter>;
    refresh(resource: Uri | undefined): Promise<void>;
    initialize(): void;
    getDisplayName(interpreter: Partial<PythonInterpreter>): Promise<string>;
}
export declare const IInterpreterDisplay: unique symbol;
export interface IInterpreterDisplay {
    refresh(resource?: Uri): Promise<void>;
}
export declare const IShebangCodeLensProvider: unique symbol;
export interface IShebangCodeLensProvider extends CodeLensProvider {
    detectShebang(document: TextDocument): Promise<string | undefined>;
}
export declare const IInterpreterHelper: unique symbol;
export interface IInterpreterHelper {
    getActiveWorkspaceUri(resource: Resource): WorkspacePythonPath | undefined;
    getInterpreterInformation(pythonPath: string): Promise<undefined | Partial<PythonInterpreter>>;
    isMacDefaultPythonPath(pythonPath: string): Boolean;
    getInterpreterTypeDisplayName(interpreterType: InterpreterType): string | undefined;
    getBestInterpreter(interpreters?: PythonInterpreter[]): PythonInterpreter | undefined;
}
export declare const IPipEnvService: unique symbol;
export interface IPipEnvService {
    executable: string;
    isRelatedPipEnvironment(dir: string, pythonPath: string): Promise<boolean>;
}
export declare const IInterpreterLocatorHelper: unique symbol;
export interface IInterpreterLocatorHelper {
    mergeInterpreters(interpreters: PythonInterpreter[]): Promise<PythonInterpreter[]>;
}
export declare const IInterpreterWatcher: unique symbol;
export interface IInterpreterWatcher {
    onDidCreate: Event<void>;
}
export declare const IInterpreterWatcherBuilder: unique symbol;
export interface IInterpreterWatcherBuilder {
    getWorkspaceVirtualEnvInterpreterWatcher(resource: Uri | undefined): Promise<IInterpreterWatcher>;
}
export declare const InterpreterLocatorProgressHandler: unique symbol;
export interface InterpreterLocatorProgressHandler {
    register(): void;
}
export declare const IInterpreterLocatorProgressService: unique symbol;
export interface IInterpreterLocatorProgressService {
    readonly onRefreshing: Event<void>;
    readonly onRefreshed: Event<void>;
    register(): void;
}
