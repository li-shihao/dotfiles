"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const inversify_1 = require("inversify");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const types_1 = require("../../common/application/types");
const types_2 = require("../../common/platform/types");
const types_3 = require("../../common/process/types");
const types_4 = require("../../common/types");
let ShebangCodeLensProvider = class ShebangCodeLensProvider {
    constructor(processServiceFactory, configurationService, platformService, workspaceService) {
        this.processServiceFactory = processServiceFactory;
        this.configurationService = configurationService;
        this.platformService = platformService;
        // tslint:disable-next-line:no-any
        this.onDidChangeCodeLenses = workspaceService.onDidChangeConfiguration;
    }
    async detectShebang(document) {
        const lines = document.getText().split(/\r?\n/);
        const firstLine = lines[0];
        if (firstLine.trim().length == 0) {
            return;
        }
        if (!firstLine.startsWith('#!')) {
            return;
        }
        const shebang = firstLine.substr(2).trim();
        const pythonPath = await this.getFullyQualifiedPathToInterpreter(shebang, coc_nvim_1.Uri.parse(document.uri));
        return typeof pythonPath === 'string' && pythonPath.length > 0 ? pythonPath : undefined;
    }
    async provideCodeLenses(document, _token) {
        return this.createShebangCodeLens(document);
    }
    async getFullyQualifiedPathToInterpreter(pythonPath, resource) {
        let cmdFile = pythonPath;
        let args = ['-c', 'import sys;print(sys.executable)'];
        if (pythonPath.indexOf('bin/env ') >= 0 && !this.platformService.isWindows) {
            // In case we have pythonPath as '/usr/bin/env python'.
            const parts = pythonPath.split(' ').map(part => part.trim()).filter(part => part.length > 0);
            cmdFile = parts.shift();
            args = parts.concat(args);
        }
        const processService = await this.processServiceFactory.create(resource);
        return processService.exec(cmdFile, args)
            .then(output => output.stdout.trim())
            .catch(() => '');
    }
    async createShebangCodeLens(document) {
        const shebang = await this.detectShebang(document);
        if (!shebang) {
            return [];
        }
        const pythonPath = this.configurationService.getSettings(coc_nvim_1.Uri.parse(document.uri)).pythonPath;
        const resolvedPythonPath = await this.getFullyQualifiedPathToInterpreter(pythonPath, coc_nvim_1.Uri.parse(document.uri));
        if (shebang === resolvedPythonPath) {
            return [];
        }
        const lines = document.getText().split(/\r?\n/);
        const firstLine = lines[0];
        const startOfShebang = vscode_languageserver_protocol_1.Position.create(0, 0);
        const endOfShebang = vscode_languageserver_protocol_1.Position.create(0, firstLine.length - 1);
        const shebangRange = vscode_languageserver_protocol_1.Range.create(startOfShebang, endOfShebang);
        const cmd = {
            command: 'python.setShebangInterpreter',
            title: 'Set as interpreter'
        };
        return [(vscode_languageserver_protocol_1.CodeLens.create(shebangRange, cmd))];
    }
};
ShebangCodeLensProvider = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_3.IProcessServiceFactory)),
    __param(1, inversify_1.inject(types_4.IConfigurationService)),
    __param(2, inversify_1.inject(types_2.IPlatformService)),
    __param(3, inversify_1.inject(types_1.IWorkspaceService))
], ShebangCodeLensProvider);
exports.ShebangCodeLensProvider = ShebangCodeLensProvider;
//# sourceMappingURL=shebangCodeLensProvider.js.map