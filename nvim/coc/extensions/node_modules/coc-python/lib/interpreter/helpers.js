"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const semver_1 = require("semver");
const coc_nvim_1 = require("coc.nvim");
const types_1 = require("../common/application/types");
const types_2 = require("../common/platform/types");
const types_3 = require("../common/process/types");
const types_4 = require("../common/types");
const types_5 = require("../ioc/types");
const contracts_1 = require("./contracts");
const EXPITY_DURATION = 24 * 60 * 60 * 1000;
function getFirstNonEmptyLineFromMultilineString(stdout) {
    if (!stdout) {
        return '';
    }
    const lines = stdout.split(/\r?\n/g).map(line => line.trim()).filter(line => line.length > 0);
    return lines.length > 0 ? lines[0] : '';
}
exports.getFirstNonEmptyLineFromMultilineString = getFirstNonEmptyLineFromMultilineString;
let InterpreterHelper = class InterpreterHelper {
    constructor(serviceContainer) {
        this.serviceContainer = serviceContainer;
        this.persistentFactory = this.serviceContainer.get(types_4.IPersistentStateFactory);
        this.fs = this.serviceContainer.get(types_2.IFileSystem);
    }
    getActiveWorkspaceUri(resource) {
        const workspaceService = this.serviceContainer.get(types_1.IWorkspaceService);
        if (!workspaceService.hasWorkspaceFolders) {
            return;
        }
        if (Array.isArray(workspaceService.workspaceFolders) && workspaceService.workspaceFolders.length === 1) {
            return { folderUri: coc_nvim_1.Uri.parse(workspaceService.workspaceFolders[0].uri), configTarget: coc_nvim_1.ConfigurationTarget.Workspace };
        }
        if (resource) {
            const workspaceFolder = workspaceService.getWorkspaceFolder(resource);
            if (workspaceFolder) {
                return { configTarget: coc_nvim_1.ConfigurationTarget.Workspace, folderUri: coc_nvim_1.Uri.parse(workspaceFolder.uri) };
            }
        }
        const documentManager = this.serviceContainer.get(types_1.IDocumentManager);
        const doc = coc_nvim_1.workspace.getDocument(coc_nvim_1.workspace.bufnr);
        if (doc != null) {
            const workspaceFolder = workspaceService.getWorkspaceFolder(coc_nvim_1.Uri.parse(doc.uri));
            if (workspaceFolder) {
                return { configTarget: coc_nvim_1.ConfigurationTarget.Workspace, folderUri: coc_nvim_1.Uri.parse(workspaceFolder.uri) };
            }
        }
    }
    async getInterpreterInformation(pythonPath) {
        let fileHash = await this.fs.getFileHash(pythonPath).catch(() => '');
        fileHash = fileHash ? fileHash : '';
        const store = this.persistentFactory.createGlobalPersistentState(`${pythonPath}.v3`, undefined, EXPITY_DURATION);
        if (store.value && fileHash && store.value.fileHash === fileHash) {
            return store.value;
        }
        const processService = await this.serviceContainer.get(types_3.IPythonExecutionFactory).create({ pythonPath });
        try {
            const info = await processService.getInterpreterInformation().catch(() => undefined);
            if (!info) {
                return;
            }
            const details = Object.assign({}, (info), { fileHash });
            await store.updateValue(details);
            return details;
        }
        catch (ex) {
            // tslint:disable-next-line: no-console
            console.error(`Failed to get interpreter information for '${pythonPath}'`, ex);
            return;
        }
    }
    isMacDefaultPythonPath(pythonPath) {
        return pythonPath === 'python' || pythonPath === '/usr/bin/python';
    }
    getInterpreterTypeDisplayName(interpreterType) {
        switch (interpreterType) {
            case contracts_1.InterpreterType.Conda: {
                return 'conda';
            }
            case contracts_1.InterpreterType.Pipenv: {
                return 'pipenv';
            }
            case contracts_1.InterpreterType.Pyenv: {
                return 'pyenv';
            }
            case contracts_1.InterpreterType.Venv: {
                return 'venv';
            }
            case contracts_1.InterpreterType.VirtualEnv: {
                return 'virtualenv';
            }
            default: {
                return '';
            }
        }
    }
    getBestInterpreter(interpreters) {
        if (!Array.isArray(interpreters) || interpreters.length === 0) {
            return;
        }
        if (interpreters.length === 1) {
            return interpreters[0];
        }
        const sorted = interpreters.slice();
        sorted.sort((a, b) => (a.version && b.version) ? semver_1.compare(a.version.raw, b.version.raw) : 0);
        return sorted[sorted.length - 1];
    }
};
InterpreterHelper = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_5.IServiceContainer))
], InterpreterHelper);
exports.InterpreterHelper = InterpreterHelper;
//# sourceMappingURL=helpers.js.map