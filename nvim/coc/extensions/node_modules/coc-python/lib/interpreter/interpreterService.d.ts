import { Disposable, Event, Uri } from 'coc.nvim';
import { IPersistentState, Resource } from '../common/types';
import { IServiceContainer } from '../ioc/types';
import { IInterpreterService, PythonInterpreter } from './contracts';
export declare class InterpreterService implements Disposable, IInterpreterService {
    private serviceContainer;
    private readonly locator;
    private readonly fs;
    private readonly persistentStateFactory;
    private readonly configService;
    private readonly didChangeInterpreterEmitter;
    private readonly didChangeInterpreterInformation;
    private readonly inMemoryCacheOfDisplayNames;
    private readonly updatedInterpreters;
    private pythonPathSetting;
    constructor(serviceContainer: IServiceContainer);
    readonly hasInterpreters: Promise<boolean>;
    refresh(resource?: Uri): Promise<void>;
    initialize(): void;
    getInterpreters(resource?: Uri): Promise<PythonInterpreter[]>;
    dispose(): void;
    readonly onDidChangeInterpreter: Event<void>;
    readonly onDidChangeInterpreterInformation: Event<PythonInterpreter>;
    getActiveInterpreter(resource?: Uri): Promise<PythonInterpreter | undefined>;
    getInterpreterDetails(pythonPath: string, resource?: Uri): Promise<PythonInterpreter | undefined>;
    /**
     * Gets the display name of an interpreter.
     * The format is `Python <Version> <bitness> (<env name>: <env type>)`
     * E.g. `Python 3.5.1 32-bit (myenv2: virtualenv)`
     * @param {Partial<PythonInterpreter>} info
     * @returns {string}
     * @memberof InterpreterService
     */
    getDisplayName(info: Partial<PythonInterpreter>, resource?: Uri): Promise<string>;
    getInterpreterCache(pythonPath: string): Promise<IPersistentState<{
        fileHash: string;
        info?: PythonInterpreter;
    }>>;
    protected updateCachedInterpreterInformation(info: PythonInterpreter, resource: Resource): Promise<void>;
    protected buildInterpreterDisplayName(info: Partial<PythonInterpreter>, resource?: Uri): Promise<string>;
    private onConfigChanged;
    private collectInterpreterDetails;
}
