import { Event, Uri } from 'coc.nvim';
import { IServiceContainer } from '../../ioc/types';
import { IInterpreterLocatorService, PythonInterpreter } from '../contracts';
/**
 * Facilitates locating Python interpreters.
 */
export declare class PythonInterpreterLocatorService implements IInterpreterLocatorService {
    private serviceContainer;
    private readonly disposables;
    private readonly platform;
    private readonly interpreterLocatorHelper;
    private readonly _hasInterpreters;
    constructor(serviceContainer: IServiceContainer);
    /**
     * This class should never emit events when we're locating.
     * The events will be fired by the indivitual locators retrieved in `getLocators`.
     *
     * @readonly
     * @type {Event<Promise<PythonInterpreter[]>>}
     * @memberof PythonInterpreterLocatorService
     */
    readonly onLocating: Event<Promise<PythonInterpreter[]>>;
    readonly hasInterpreters: Promise<boolean>;
    /**
     * Release any held resources.
     *
     * Called by VS Code to indicate it is done with the resource.
     */
    dispose(): void;
    /**
     * Return the list of known Python interpreters.
     *
     * The optional resource arg may control where locators look for
     * interpreters.
     */
    getInterpreters(resource?: Uri): Promise<PythonInterpreter[]>;
    /**
     * Return the list of applicable interpreter locators.
     *
     * The locators are pulled from the registry.
     */
    private getLocators;
}
