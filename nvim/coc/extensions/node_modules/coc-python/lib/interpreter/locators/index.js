"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const coc_nvim_1 = require("coc.nvim");
const types_1 = require("../../common/platform/types");
const types_2 = require("../../common/types");
const async_1 = require("../../common/utils/async");
const platform_1 = require("../../common/utils/platform");
const types_3 = require("../../ioc/types");
const contracts_1 = require("../contracts");
const function_1 = require("../../common/function");
// tslint:disable-next-line:no-require-imports no-var-requires
const flatten = require('lodash/flatten');
/**
 * Facilitates locating Python interpreters.
 */
let PythonInterpreterLocatorService = class PythonInterpreterLocatorService {
    constructor(serviceContainer) {
        this.serviceContainer = serviceContainer;
        this.disposables = [];
        this._hasInterpreters = async_1.createDeferred();
        serviceContainer.get(types_2.IDisposableRegistry).push(this);
        this.platform = serviceContainer.get(types_1.IPlatformService);
        this.interpreterLocatorHelper = serviceContainer.get(contracts_1.IInterpreterLocatorHelper);
    }
    /**
     * This class should never emit events when we're locating.
     * The events will be fired by the indivitual locators retrieved in `getLocators`.
     *
     * @readonly
     * @type {Event<Promise<PythonInterpreter[]>>}
     * @memberof PythonInterpreterLocatorService
     */
    get onLocating() {
        return new coc_nvim_1.Emitter().event;
    }
    get hasInterpreters() {
        return this._hasInterpreters.promise;
    }
    /**
     * Release any held resources.
     *
     * Called by VS Code to indicate it is done with the resource.
     */
    dispose() {
        this.disposables.forEach(disposable => disposable.dispose());
    }
    /**
     * Return the list of known Python interpreters.
     *
     * The optional resource arg may control where locators look for
     * interpreters.
     */
    async getInterpreters(resource) {
        const locators = this.getLocators();
        const promises = locators.map(async (provider) => provider.getInterpreters(resource));
        locators.forEach(locator => {
            locator.hasInterpreters.then(found => {
                if (found) {
                    this._hasInterpreters.resolve(true);
                }
            }).catch(function_1.emptyFn);
        });
        const listOfInterpreters = await Promise.all(promises);
        const items = flatten(listOfInterpreters)
            .filter(item => !!item)
            .map(item => item);
        this._hasInterpreters.resolve(items.length > 0);
        return this.interpreterLocatorHelper.mergeInterpreters(items);
    }
    /**
     * Return the list of applicable interpreter locators.
     *
     * The locators are pulled from the registry.
     */
    getLocators() {
        // The order of the services is important.
        // The order is important because the data sources at the bottom of the list do not contain all,
        //  the information about the interpreters (e.g. type, environment name, etc).
        // This way, the items returned from the top of the list will win, when we combine the items returned.
        const keys = [
            [contracts_1.WINDOWS_REGISTRY_SERVICE, platform_1.OSType.Windows],
            [contracts_1.CONDA_ENV_SERVICE, undefined],
            [contracts_1.CONDA_ENV_FILE_SERVICE, undefined],
            [contracts_1.PIPENV_SERVICE, undefined],
            [contracts_1.GLOBAL_VIRTUAL_ENV_SERVICE, undefined],
            [contracts_1.WORKSPACE_VIRTUAL_ENV_SERVICE, undefined],
            [contracts_1.KNOWN_PATH_SERVICE, undefined],
            [contracts_1.CURRENT_PATH_SERVICE, undefined]
        ];
        return keys
            .filter(item => item[1] === undefined || item[1] === this.platform.osType)
            .map(item => this.serviceContainer.get(contracts_1.IInterpreterLocatorService, item[0]));
    }
};
PythonInterpreterLocatorService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_3.IServiceContainer))
], PythonInterpreterLocatorService);
exports.PythonInterpreterLocatorService = PythonInterpreterLocatorService;
//# sourceMappingURL=index.js.map