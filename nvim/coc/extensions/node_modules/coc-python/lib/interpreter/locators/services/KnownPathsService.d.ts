import { Uri } from 'coc.nvim';
import { IServiceContainer } from '../../../ioc/types';
import { IInterpreterHelper, IKnownSearchPathsForInterpreters, PythonInterpreter } from '../../contracts';
import { CacheableLocatorService } from './cacheableLocatorService';
/**
 * Locates "known" paths.
 */
export declare class KnownPathsService extends CacheableLocatorService {
    private knownSearchPaths;
    private helper;
    constructor(knownSearchPaths: IKnownSearchPathsForInterpreters, helper: IInterpreterHelper, serviceContainer: IServiceContainer);
    /**
     * Release any held resources.
     *
     * Called by VS Code to indicate it is done with the resource.
     */
    dispose(): void;
    /**
     * Return the located interpreters.
     *
     * This is used by CacheableLocatorService.getInterpreters().
     */
    protected getInterpretersImplementation(_resource?: Uri): Promise<PythonInterpreter[]>;
    /**
     * Return the located interpreters.
     */
    private suggestionsFromKnownPaths;
    /**
     * Return the information about the identified interpreter binary.
     */
    private getInterpreterDetails;
    /**
     * Return the interpreters in the given directory.
     */
    private getInterpretersInDirectory;
}
export declare class KnownSearchPathsForInterpreters implements IKnownSearchPathsForInterpreters {
    private readonly serviceContainer;
    constructor(serviceContainer: IServiceContainer);
    /**
     * Return the paths where Python interpreters might be found.
     */
    getSearchPaths(): string[];
}
