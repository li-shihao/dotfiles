import { Event, Uri } from 'coc.nvim';
import { Deferred } from '../../../common/utils/async';
import { IServiceContainer } from '../../../ioc/types';
import { IInterpreterLocatorService, IInterpreterWatcher, PythonInterpreter } from '../../contracts';
export declare abstract class CacheableLocatorService implements IInterpreterLocatorService {
    private readonly name;
    protected readonly serviceContainer: IServiceContainer;
    private cachePerWorkspace;
    protected readonly _hasInterpreters: Deferred<boolean>;
    private readonly promisesPerResource;
    private readonly handlersAddedToResource;
    private readonly cacheKeyPrefix;
    private readonly locating;
    constructor(name: string, serviceContainer: IServiceContainer, cachePerWorkspace?: boolean);
    readonly onLocating: Event<Promise<PythonInterpreter[]>>;
    readonly hasInterpreters: Promise<boolean>;
    abstract dispose(): void;
    getInterpreters(resource?: Uri, ignoreCache?: boolean): Promise<PythonInterpreter[]>;
    protected addHandlersForInterpreterWatchers(cacheKey: string, resource: Uri | undefined): Promise<void>;
    protected getInterpreterWatchers(_resource: Uri | undefined): Promise<IInterpreterWatcher[]>;
    protected abstract getInterpretersImplementation(resource?: Uri): Promise<PythonInterpreter[]>;
    protected createPersistenceStore(resource?: Uri): import("../../../common/types").IPersistentState<PythonInterpreter[]>;
    protected getCachedInterpreters(resource?: Uri): PythonInterpreter[] | undefined;
    protected cacheInterpreters(interpreters: PythonInterpreter[], resource?: Uri): Promise<void>;
    protected getCacheKey(resource?: Uri): string;
}
