"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-any
const inversify_1 = require("inversify");
const md5_1 = __importDefault(require("md5"));
const coc_nvim_1 = require("coc.nvim");
const types_1 = require("../../../common/application/types");
const logger_1 = require("../../../common/logger");
const types_2 = require("../../../common/types");
const async_1 = require("../../../common/utils/async");
const function_1 = require("../../../common/function");
let CacheableLocatorService = class CacheableLocatorService {
    constructor(name, serviceContainer, cachePerWorkspace = false) {
        this.name = name;
        this.serviceContainer = serviceContainer;
        this.cachePerWorkspace = cachePerWorkspace;
        this.promisesPerResource = new Map();
        this.handlersAddedToResource = new Set();
        this.locating = new coc_nvim_1.Emitter();
        this._hasInterpreters = async_1.createDeferred();
        this.cacheKeyPrefix = `INTERPRETERS_CACHE_v3_${name}`;
    }
    get onLocating() {
        return this.locating.event;
    }
    get hasInterpreters() {
        return this._hasInterpreters.promise;
    }
    async getInterpreters(resource, ignoreCache) {
        const cacheKey = this.getCacheKey(resource);
        let deferred = this.promisesPerResource.get(cacheKey);
        if (!deferred || ignoreCache) {
            deferred = async_1.createDeferred();
            this.promisesPerResource.set(cacheKey, deferred);
            this.addHandlersForInterpreterWatchers(cacheKey, resource)
                .catch(function_1.emptyFn);
            const promise = this.getInterpretersImplementation(resource)
                .then(async (items) => {
                await this.cacheInterpreters(items, resource);
                logger_1.traceVerbose(`Interpreters returned by ${this.name} are of count ${Array.isArray(items) ? items.length : 0}`);
                deferred.resolve(items);
            })
                .catch(ex => deferred.reject(ex));
            this.locating.fire(deferred.promise);
        }
        deferred.promise
            .then(items => this._hasInterpreters.resolve(items.length > 0))
            .catch(_ => this._hasInterpreters.resolve(false));
        if (deferred.completed) {
            return deferred.promise;
        }
        const cachedInterpreters = ignoreCache ? undefined : this.getCachedInterpreters(resource);
        return Array.isArray(cachedInterpreters) ? cachedInterpreters : deferred.promise;
    }
    async addHandlersForInterpreterWatchers(cacheKey, resource) {
        if (this.handlersAddedToResource.has(cacheKey)) {
            return;
        }
        this.handlersAddedToResource.add(cacheKey);
        const watchers = await this.getInterpreterWatchers(resource);
        const disposableRegisry = this.serviceContainer.get(types_2.IDisposableRegistry);
        watchers.forEach(watcher => {
            watcher.onDidCreate(() => {
                logger_1.Logger.verbose(`Interpreter Watcher change handler for ${this.cacheKeyPrefix}`);
                this.promisesPerResource.delete(cacheKey);
                this.getInterpreters(resource).catch(function_1.emptyFn);
            }, this, disposableRegisry);
        });
    }
    async getInterpreterWatchers(_resource) {
        return [];
    }
    createPersistenceStore(resource) {
        const cacheKey = this.getCacheKey(resource);
        const persistentFactory = this.serviceContainer.get(types_2.IPersistentStateFactory);
        if (this.cachePerWorkspace) {
            return persistentFactory.createWorkspacePersistentState(cacheKey, undefined);
        }
        else {
            return persistentFactory.createGlobalPersistentState(cacheKey, undefined);
        }
    }
    getCachedInterpreters(resource) {
        const persistence = this.createPersistenceStore(resource);
        if (!Array.isArray(persistence.value)) {
            return;
        }
        return persistence.value.map(item => {
            return Object.assign({}, item, { cachedEntry: true });
        });
    }
    async cacheInterpreters(interpreters, resource) {
        const persistence = this.createPersistenceStore(resource);
        await persistence.updateValue(interpreters);
    }
    getCacheKey(resource) {
        if (!resource || !this.cachePerWorkspace) {
            return this.cacheKeyPrefix;
        }
        // Ensure we have separate caches per workspace where necessary.ÃŽ
        const workspaceService = this.serviceContainer.get(types_1.IWorkspaceService);
        if (!Array.isArray(workspaceService.workspaceFolders)) {
            return this.cacheKeyPrefix;
        }
        const workspace = workspaceService.getWorkspaceFolder(resource);
        return workspace ? `${this.cacheKeyPrefix}:${md5_1.default(coc_nvim_1.Uri.parse(workspace.uri).fsPath)}` : this.cacheKeyPrefix;
    }
};
CacheableLocatorService = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.unmanaged()),
    __param(1, inversify_1.unmanaged()),
    __param(2, inversify_1.unmanaged())
], CacheableLocatorService);
exports.CacheableLocatorService = CacheableLocatorService;
//# sourceMappingURL=cacheableLocatorService.js.map