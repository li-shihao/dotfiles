import { Uri } from 'coc.nvim';
import { IFileSystem } from '../../../common/platform/types';
import { ILogger } from '../../../common/types';
import { IServiceContainer } from '../../../ioc/types';
import { ICondaService, IInterpreterHelper, PythonInterpreter } from '../../contracts';
import { CacheableLocatorService } from './cacheableLocatorService';
/**
 * Locate conda env interpreters based on the "conda environments file".
 */
export declare class CondaEnvFileService extends CacheableLocatorService {
    private helperService;
    private condaService;
    private fileSystem;
    private logger;
    constructor(helperService: IInterpreterHelper, condaService: ICondaService, fileSystem: IFileSystem, serviceContainer: IServiceContainer, logger: ILogger);
    /**
     * Release any held resources.
     *
     * Called by VS Code to indicate it is done with the resource.
     */
    dispose(): void;
    /**
     * Return the located interpreters.
     *
     * This is used by CacheableLocatorService.getInterpreters().
     */
    protected getInterpretersImplementation(_resource?: Uri): Promise<PythonInterpreter[]>;
    /**
     * Return the list of interpreters identified by the "conda environments file".
     */
    private getSuggestionsFromConda;
    /**
     * Return the list of environments identified in the given file.
     */
    private getEnvironmentsFromFile;
    /**
     * Return the interpreter info for the given anaconda environment.
     */
    private getInterpreterDetails;
}
