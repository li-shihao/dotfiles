import { Uri } from 'coc.nvim';
import { IFileSystem } from '../../../common/platform/types';
import { ILogger } from '../../../common/types';
import { IServiceContainer } from '../../../ioc/types';
import { CondaInfo, ICondaService, IInterpreterHelper, InterpreterType, PythonInterpreter } from '../../contracts';
import { CacheableLocatorService } from './cacheableLocatorService';
/**
 * Locates conda env interpreters based on the conda service's info.
 */
export declare class CondaEnvService extends CacheableLocatorService {
    private condaService;
    private helper;
    private logger;
    private fileSystem;
    constructor(condaService: ICondaService, helper: IInterpreterHelper, logger: ILogger, serviceContainer: IServiceContainer, fileSystem: IFileSystem);
    /**
     * Release any held resources.
     *
     * Called by VS Code to indicate it is done with the resource.
     */
    dispose(): void;
    /**
     * Return the located interpreters.
     *
     * This is used by CacheableLocatorService.getInterpreters().
     */
    protected getInterpretersImplementation(_resource?: Uri): Promise<PythonInterpreter[]>;
    /**
     * Return the list of interpreters for all the conda envs.
     */
    private getSuggestionsFromConda;
}
/**
 * Return the list of conda env interpreters.
 */
export declare function parseCondaInfo(info: CondaInfo, condaService: ICondaService, fileSystem: IFileSystem, helper: IInterpreterHelper): Promise<{
    path: string;
    companyDisplayName: string;
    type: InterpreterType;
    envPath: string;
    version?: import("../../../common/types").Version;
    sysVersion: string;
    architecture: import("../../../common/utils/platform").Architecture;
    sysPrefix: string;
    pipEnvWorkspaceFolder?: string;
    displayName?: string;
    envName?: string;
    cachedEntry?: boolean;
}[]>;
