import { SemVer } from 'semver';
import { IWorkspaceService } from '../../../common/application/types';
import { IFileSystem, IPlatformService } from '../../../common/platform/types';
import { IProcessServiceFactory } from '../../../common/process/types';
import { IConfigurationService, IDisposableRegistry, ILogger, IPersistentStateFactory } from '../../../common/types';
import { CondaInfo, ICondaService, IInterpreterLocatorService } from '../../contracts';
export declare const CondaLocationsGlob: string;
export declare const CondaLocationsGlobWin: string;
export declare const CondaGetEnvironmentPrefix = "Outputting Environment Now...";
/**
 * A wrapper around a conda installation.
 */
export declare class CondaService implements ICondaService {
    private processServiceFactory;
    private platform;
    private fileSystem;
    private persistentStateFactory;
    private configService;
    private logger;
    private disposableRegistry;
    private readonly workspaceService;
    private registryLookupForConda?;
    private condaFile?;
    private isAvailable;
    private readonly condaHelper;
    constructor(processServiceFactory: IProcessServiceFactory, platform: IPlatformService, fileSystem: IFileSystem, persistentStateFactory: IPersistentStateFactory, configService: IConfigurationService, logger: ILogger, disposableRegistry: IDisposableRegistry, workspaceService: IWorkspaceService, registryLookupForConda?: IInterpreterLocatorService);
    readonly condaEnvironmentsFile: string | undefined;
    /**
     * Release any held resources.
     *
     * Called by VS Code to indicate it is done with the resource.
     */
    dispose(): void;
    /**
     * Return the path to the "conda file".
     */
    getCondaFile(): Promise<string>;
    /**
     * Is there a conda install to use?
     */
    isCondaAvailable(): Promise<boolean>;
    /**
     * Return the conda version.
     */
    getCondaVersion(): Promise<SemVer | undefined>;
    /**
     * Can the shell find conda (to run it)?
     */
    isCondaInCurrentPath(): Promise<boolean>;
    /**
     * Return the info reported by the conda install.
     */
    getCondaInfo(): Promise<CondaInfo | undefined>;
    /**
     * Determines whether a python interpreter is a conda environment or not.
     * The check is done by simply looking for the 'conda-meta' directory.
     * @param {string} interpreterPath
     * @returns {Promise<boolean>}
     * @memberof CondaService
     */
    isCondaEnvironment(interpreterPath: string): Promise<boolean>;
    /**
     * Return (env name, interpreter filename) for the interpreter.
     */
    getCondaEnvironment(interpreterPath: string): Promise<{
        name: string;
        path: string;
    } | undefined>;
    /**
     * Return the list of conda envs (by name, interpreter filename).
     */
    getCondaEnvironments(ignoreCache: boolean): Promise<({
        name: string;
        path: string;
    }[]) | undefined>;
    /**
     * Return the interpreter's filename for the given environment.
     */
    getInterpreterPath(condaEnvironmentPath: string): string;
    /**
     * Get the conda exe from the path to an interpreter's python. This might be different than the globally registered conda.exe
     */
    getCondaFileFromInterpreter(interpreterPath?: string, envName?: string): Promise<string | undefined>;
    /**
     * Is the given interpreter from conda?
     */
    private detectCondaEnvironment;
    /**
     * Return the highest Python version from the given list.
     */
    private getLatestVersion;
    private addCondaPathChangedHandler;
    private onDidChangeConfiguration;
    /**
     * Return the path to the "conda file", if there is one (in known locations).
     */
    private getCondaFileImpl;
    /**
     * Return the path to the "conda file", if there is one (in known locations).
     * Note: For now we simply return the first one found.
     */
    private getCondaFileFromKnownLocations;
}
