import { Uri } from 'coc.nvim';
import { IPlatformService } from '../../../common/platform/types';
import { IProcessServiceFactory } from '../../../common/process/types';
import { IServiceContainer } from '../../../ioc/types';
import { IInterpreterHelper, PythonInterpreter } from '../../contracts';
import { IPythonInPathCommandProvider } from '../types';
import { CacheableLocatorService } from './cacheableLocatorService';
/**
 * Locates the currently configured Python interpreter.
 *
 * If no interpreter is configured then it falls back to the system
 * Python (3 then 2).
 */
export declare class CurrentPathService extends CacheableLocatorService {
    private helper;
    private readonly processServiceFactory;
    private readonly pythonCommandProvider;
    private readonly fs;
    constructor(helper: IInterpreterHelper, processServiceFactory: IProcessServiceFactory, pythonCommandProvider: IPythonInPathCommandProvider, serviceContainer: IServiceContainer);
    /**
     * Release any held resources.
     *
     * Called by VS Code to indicate it is done with the resource.
     */
    dispose(): void;
    /**
     * Return the located interpreters.
     *
     * This is used by CacheableLocatorService.getInterpreters().
     */
    protected getInterpretersImplementation(resource?: Uri): Promise<PythonInterpreter[]>;
    /**
     * Return the located interpreters.
     */
    private suggestionsFromKnownPaths;
    /**
     * Return the information about the identified interpreter binary.
     */
    private getInterpreterDetails;
    /**
     * Return the path to the interpreter (or the default if not found).
     */
    private getInterpreter;
}
export declare class PythonInPathCommandProvider implements IPythonInPathCommandProvider {
    private readonly platform;
    constructor(platform: IPlatformService);
    getCommands(): {
        command: string;
        args?: string[];
    }[];
}
