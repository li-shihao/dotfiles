import { Uri } from 'coc.nvim';
import { IWorkspaceService } from '../../../common/application/types';
import { IServiceContainer } from '../../../ioc/types';
import { IInterpreterWatcher, IInterpreterWatcherBuilder } from '../../contracts';
export declare class InterpreterWatcherBuilder implements IInterpreterWatcherBuilder {
    private readonly workspaceService;
    private readonly serviceContainer;
    private readonly watchersByResource;
    /**
     * Creates an instance of InterpreterWatcherBuilder.
     * Inject the DI container, as we need to get a new instance of IInterpreterWatcher to build it.
     * @param {IWorkspaceService} workspaceService
     * @param {IServiceContainer} serviceContainer
     * @memberof InterpreterWatcherBuilder
     */
    constructor(workspaceService: IWorkspaceService, serviceContainer: IServiceContainer);
    getWorkspaceVirtualEnvInterpreterWatcher(resource: Uri | undefined): Promise<IInterpreterWatcher>;
    protected getResourceKey(resource: Uri | undefined): string;
}
