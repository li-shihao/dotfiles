import { Uri } from 'coc.nvim';
import { IServiceContainer } from '../../../ioc/types';
import { IPipEnvService, PythonInterpreter } from '../../contracts';
import { CacheableLocatorService } from './cacheableLocatorService';
export declare class PipEnvService extends CacheableLocatorService implements IPipEnvService {
    private readonly helper;
    private readonly processServiceFactory;
    private readonly workspace;
    private readonly fs;
    private readonly logger;
    private readonly configService;
    private readonly pipEnvServiceHelper;
    constructor(serviceContainer: IServiceContainer);
    dispose(): void;
    isRelatedPipEnvironment(dir: string, pythonPath: string): Promise<boolean>;
    readonly executable: string;
    protected getInterpretersImplementation(resource?: Uri): Promise<PythonInterpreter[]>;
    private getInterpreterFromPipenv;
    private getPipenvWorkingDirectory;
    private getInterpreterPathFromPipenv;
    private checkIfPipFileExists;
    private invokePipenv;
}
