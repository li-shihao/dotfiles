// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const path = __importStar(require("path"));
const coc_nvim_1 = require("coc.nvim");
const types_1 = require("../../../common/platform/types");
const types_2 = require("../../../common/types");
let PipEnvServiceHelper = class PipEnvServiceHelper {
    constructor(statefactory, fs) {
        this.statefactory = statefactory;
        this.fs = fs;
        this.initialized = false;
        this.state = this.statefactory.createGlobalPersistentState('PipEnvInformation', []);
    }
    async getPipEnvInfo(pythonPath) {
        await this.initializeStateStore();
        const info = this.state.value.find(item => this.fs.arePathsSame(item.pythonPath, pythonPath));
        return info ? { workspaceFolder: coc_nvim_1.Uri.file(info.workspaceFolder), envName: info.envName } : undefined;
    }
    async trackWorkspaceFolder(pythonPath, workspaceFolder) {
        await this.initializeStateStore();
        const values = [...this.state.value].filter(item => !this.fs.arePathsSame(item.pythonPath, pythonPath));
        const envName = path.basename(workspaceFolder.fsPath);
        values.push({ pythonPath, workspaceFolder: workspaceFolder.fsPath, envName });
        await this.state.updateValue(values);
    }
    async initializeStateStore() {
        if (this.initialized) {
            return;
        }
        const list = await Promise.all(this.state.value.map(async (item) => ((await this.fs.fileExists(item.pythonPath)) ? item : undefined)));
        const filteredList = list.filter(item => !!item);
        await this.state.updateValue(filteredList);
        this.initialized = true;
    }
};
PipEnvServiceHelper = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_2.IPersistentStateFactory)),
    __param(1, inversify_1.inject(types_1.IFileSystem))
], PipEnvServiceHelper);
exports.PipEnvServiceHelper = PipEnvServiceHelper;
//# sourceMappingURL=pipEnvServiceHelper.js.map