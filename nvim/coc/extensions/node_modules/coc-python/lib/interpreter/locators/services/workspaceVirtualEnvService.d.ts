import { Uri } from 'coc.nvim';
import { IServiceContainer } from '../../../ioc/types';
import { IInterpreterWatcher, IInterpreterWatcherBuilder, IVirtualEnvironmentsSearchPathProvider } from '../../contracts';
import { BaseVirtualEnvService } from './baseVirtualEnvService';
export declare class WorkspaceVirtualEnvService extends BaseVirtualEnvService {
    private readonly builder;
    constructor(workspaceVirtualEnvPathProvider: IVirtualEnvironmentsSearchPathProvider, serviceContainer: IServiceContainer, builder: IInterpreterWatcherBuilder);
    protected getInterpreterWatchers(resource: Uri | undefined): Promise<IInterpreterWatcher[]>;
}
export declare class WorkspaceVirtualEnvironmentsSearchPathProvider implements IVirtualEnvironmentsSearchPathProvider {
    private serviceContainer;
    constructor(serviceContainer: IServiceContainer);
    getSearchPaths(resource?: Uri): Promise<string[]>;
}
