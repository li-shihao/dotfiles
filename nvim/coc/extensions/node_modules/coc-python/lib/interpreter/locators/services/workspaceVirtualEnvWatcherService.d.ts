import { Disposable, Event, Uri } from 'coc.nvim';
import { IWorkspaceService } from '../../../common/application/types';
import { IPlatformService } from '../../../common/platform/types';
import { IPythonExecutionFactory } from '../../../common/process/types';
import { IInterpreterWatcher } from '../../contracts';
export declare class WorkspaceVirtualEnvWatcherService implements IInterpreterWatcher, Disposable {
    private readonly disposableRegistry;
    private readonly workspaceService;
    private readonly platformService;
    private readonly pythonExecFactory;
    private readonly didCreate;
    private timers;
    private fsWatchers;
    constructor(disposableRegistry: Disposable[], workspaceService: IWorkspaceService, platformService: IPlatformService, pythonExecFactory: IPythonExecutionFactory);
    readonly onDidCreate: Event<void>;
    dispose(): void;
    register(_resource: Uri | undefined): Promise<void>;
    createHandler(e: Uri): Promise<void>;
    protected notifyCreationWhenReady(pythonPath: string): Promise<boolean>;
    private clearTimers;
    private isValidExecutable;
}
