"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
const service_1 = require("./activation/service");
const types_1 = require("./activation/types");
const index_1 = require("./autoSelection/index");
const proxy_1 = require("./autoSelection/proxy");
const cached_1 = require("./autoSelection/rules/cached");
const currentPath_1 = require("./autoSelection/rules/currentPath");
const environment_1 = require("./autoSelection/rules/environment");
const settings_1 = require("./autoSelection/rules/settings");
const system_1 = require("./autoSelection/rules/system");
const winRegistry_1 = require("./autoSelection/rules/winRegistry");
const workspaceEnv_1 = require("./autoSelection/rules/workspaceEnv");
const types_2 = require("./autoSelection/types");
const interpreterComparer_1 = require("./configuration/interpreterComparer");
const interpreterSelector_1 = require("./configuration/interpreterSelector");
const pythonPathUpdaterService_1 = require("./configuration/pythonPathUpdaterService");
const pythonPathUpdaterServiceFactory_1 = require("./configuration/pythonPathUpdaterServiceFactory");
const types_3 = require("./configuration/types");
const contracts_1 = require("./contracts");
const display_1 = require("./display");
const progressDisplay_1 = require("./display/progressDisplay");
const shebangCodeLensProvider_1 = require("./display/shebangCodeLensProvider");
const helpers_1 = require("./helpers");
const interpreterService_1 = require("./interpreterService");
const interpreterVersion_1 = require("./interpreterVersion");
const helpers_2 = require("./locators/helpers");
const index_2 = require("./locators/index");
const progressService_1 = require("./locators/progressService");
const condaEnvFileService_1 = require("./locators/services/condaEnvFileService");
const condaEnvService_1 = require("./locators/services/condaEnvService");
const condaService_1 = require("./locators/services/condaService");
const currentPathService_1 = require("./locators/services/currentPathService");
const globalVirtualEnvService_1 = require("./locators/services/globalVirtualEnvService");
const interpreterWatcherBuilder_1 = require("./locators/services/interpreterWatcherBuilder");
const KnownPathsService_1 = require("./locators/services/KnownPathsService");
const pipEnvService_1 = require("./locators/services/pipEnvService");
const pipEnvServiceHelper_1 = require("./locators/services/pipEnvServiceHelper");
const windowsRegistryService_1 = require("./locators/services/windowsRegistryService");
const workspaceVirtualEnvService_1 = require("./locators/services/workspaceVirtualEnvService");
const workspaceVirtualEnvWatcherService_1 = require("./locators/services/workspaceVirtualEnvWatcherService");
const types_4 = require("./locators/types");
const index_3 = require("./virtualEnvs/index");
const types_5 = require("./virtualEnvs/types");
function registerTypes(serviceManager) {
    serviceManager.addSingleton(contracts_1.IKnownSearchPathsForInterpreters, KnownPathsService_1.KnownSearchPathsForInterpreters);
    serviceManager.addSingleton(contracts_1.IVirtualEnvironmentsSearchPathProvider, globalVirtualEnvService_1.GlobalVirtualEnvironmentsSearchPathProvider, 'global');
    serviceManager.addSingleton(contracts_1.IVirtualEnvironmentsSearchPathProvider, workspaceVirtualEnvService_1.WorkspaceVirtualEnvironmentsSearchPathProvider, 'workspace');
    serviceManager.addSingleton(contracts_1.ICondaService, condaService_1.CondaService);
    serviceManager.addSingleton(types_4.IPipEnvServiceHelper, pipEnvServiceHelper_1.PipEnvServiceHelper);
    serviceManager.addSingleton(types_5.IVirtualEnvironmentManager, index_3.VirtualEnvironmentManager);
    serviceManager.addSingleton(types_4.IPythonInPathCommandProvider, currentPathService_1.PythonInPathCommandProvider);
    serviceManager.add(contracts_1.IInterpreterWatcher, workspaceVirtualEnvWatcherService_1.WorkspaceVirtualEnvWatcherService, contracts_1.WORKSPACE_VIRTUAL_ENV_SERVICE);
    serviceManager.addSingleton(contracts_1.IInterpreterWatcherBuilder, interpreterWatcherBuilder_1.InterpreterWatcherBuilder);
    serviceManager.addSingleton(contracts_1.IInterpreterVersionService, interpreterVersion_1.InterpreterVersionService);
    serviceManager.addSingleton(contracts_1.IInterpreterLocatorService, index_2.PythonInterpreterLocatorService, contracts_1.INTERPRETER_LOCATOR_SERVICE);
    serviceManager.addSingleton(contracts_1.IInterpreterLocatorService, condaEnvFileService_1.CondaEnvFileService, contracts_1.CONDA_ENV_FILE_SERVICE);
    serviceManager.addSingleton(contracts_1.IInterpreterLocatorService, condaEnvService_1.CondaEnvService, contracts_1.CONDA_ENV_SERVICE);
    serviceManager.addSingleton(contracts_1.IInterpreterLocatorService, currentPathService_1.CurrentPathService, contracts_1.CURRENT_PATH_SERVICE);
    serviceManager.addSingleton(contracts_1.IInterpreterLocatorService, globalVirtualEnvService_1.GlobalVirtualEnvService, contracts_1.GLOBAL_VIRTUAL_ENV_SERVICE);
    serviceManager.addSingleton(contracts_1.IInterpreterLocatorService, workspaceVirtualEnvService_1.WorkspaceVirtualEnvService, contracts_1.WORKSPACE_VIRTUAL_ENV_SERVICE);
    serviceManager.addSingleton(contracts_1.IInterpreterLocatorService, pipEnvService_1.PipEnvService, contracts_1.PIPENV_SERVICE);
    serviceManager.addSingleton(contracts_1.IPipEnvService, pipEnvService_1.PipEnvService);
    serviceManager.addSingleton(contracts_1.IInterpreterLocatorService, windowsRegistryService_1.WindowsRegistryService, contracts_1.WINDOWS_REGISTRY_SERVICE);
    serviceManager.addSingleton(contracts_1.IInterpreterLocatorService, KnownPathsService_1.KnownPathsService, contracts_1.KNOWN_PATH_SERVICE);
    serviceManager.addSingleton(contracts_1.IInterpreterService, interpreterService_1.InterpreterService);
    serviceManager.addSingleton(contracts_1.IInterpreterDisplay, display_1.InterpreterDisplay);
    serviceManager.addSingleton(types_3.IPythonPathUpdaterServiceFactory, pythonPathUpdaterServiceFactory_1.PythonPathUpdaterServiceFactory);
    serviceManager.addSingleton(types_3.IPythonPathUpdaterServiceManager, pythonPathUpdaterService_1.PythonPathUpdaterService);
    serviceManager.addSingleton(types_3.IInterpreterSelector, interpreterSelector_1.InterpreterSelector);
    serviceManager.addSingleton(contracts_1.IShebangCodeLensProvider, shebangCodeLensProvider_1.ShebangCodeLensProvider);
    serviceManager.addSingleton(contracts_1.IInterpreterHelper, helpers_1.InterpreterHelper);
    serviceManager.addSingleton(contracts_1.IInterpreterLocatorHelper, helpers_2.InterpreterLocatorHelper);
    serviceManager.addSingleton(types_3.IInterpreterComparer, interpreterComparer_1.InterpreterComparer);
    serviceManager.addSingleton(contracts_1.InterpreterLocatorProgressHandler, progressDisplay_1.InterpreterLocatorProgressStatubarHandler);
    serviceManager.addSingleton(contracts_1.IInterpreterLocatorProgressService, progressService_1.InterpreterLocatorProgressService);
    serviceManager.addSingleton(types_2.IInterpreterAutoSelectionRule, environment_1.EnvironmentAutoSelectionRule, types_2.AutoSelectionRule.environment);
    serviceManager.addSingleton(types_2.IInterpreterAutoSelectionRule, currentPath_1.CurrentPathInterpretersAutoSelectionRule, types_2.AutoSelectionRule.currentPath);
    serviceManager.addSingleton(types_2.IInterpreterAutoSelectionRule, system_1.SystemWideInterpretersAutoSelectionRule, types_2.AutoSelectionRule.systemWide);
    serviceManager.addSingleton(types_2.IInterpreterAutoSelectionRule, winRegistry_1.WindowsRegistryInterpretersAutoSelectionRule, types_2.AutoSelectionRule.windowsRegistry);
    serviceManager.addSingleton(types_2.IInterpreterAutoSelectionRule, workspaceEnv_1.WorkspaceVirtualEnvInterpretersAutoSelectionRule, types_2.AutoSelectionRule.workspaceVirtualEnvs);
    serviceManager.addSingleton(types_2.IInterpreterAutoSelectionRule, cached_1.CachedInterpretersAutoSelectionRule, types_2.AutoSelectionRule.cachedInterpreters);
    serviceManager.addSingleton(types_2.IInterpreterAutoSelectionRule, settings_1.SettingsInterpretersAutoSelectionRule, types_2.AutoSelectionRule.settings);
    serviceManager.addSingleton(types_2.IInterpreterAutoSeletionProxyService, proxy_1.InterpreterAutoSeletionProxyService);
    serviceManager.addSingleton(types_2.IInterpreterAutoSelectionService, index_1.InterpreterAutoSelectionService);
    serviceManager.addSingleton(types_1.IEnvironmentActivationService, service_1.EnvironmentActivationService);
}
exports.registerTypes = registerTypes;
//# sourceMappingURL=serviceRegistry.js.map