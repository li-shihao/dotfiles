import { Uri } from 'coc.nvim';
import { IServiceContainer } from '../../ioc/types';
import { InterpreterType } from '../contracts';
import { IVirtualEnvironmentManager } from './types';
export declare class VirtualEnvironmentManager implements IVirtualEnvironmentManager {
    private readonly serviceContainer;
    private processServiceFactory;
    private pipEnvService;
    private fs;
    private pyEnvRoot?;
    private workspaceService;
    constructor(serviceContainer: IServiceContainer);
    getEnvironmentName(pythonPath: string, resource?: Uri): Promise<string>;
    getEnvironmentType(pythonPath: string, resource?: Uri): Promise<InterpreterType>;
    isVenvEnvironment(pythonPath: string): Promise<boolean>;
    isPyEnvEnvironment(pythonPath: string, resource?: Uri): Promise<boolean>;
    isPipEnvironment(pythonPath: string, resource?: Uri): Promise<boolean>;
    getPyEnvRoot(resource?: Uri): Promise<string | undefined>;
    isVirtualEnvironment(pythonPath: string): Promise<boolean>;
    private getTerminalActivationProviderForVirtualEnvs;
}
