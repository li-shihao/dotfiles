import { Container, interfaces } from 'inversify';
import { Abstract, ClassType, IServiceManager, Newable } from './types';
declare type identifier<T> = string | symbol | Newable<T> | Abstract<T>;
export declare class ServiceManager implements IServiceManager {
    private container;
    constructor(container: Container);
    add<T>(serviceIdentifier: identifier<T>, constructor: new (...args: any[]) => T, name?: string | number | symbol | undefined): void;
    addFactory<T>(factoryIdentifier: interfaces.ServiceIdentifier<interfaces.Factory<T>>, factoryMethod: interfaces.FactoryCreator<T>): void;
    addSingleton<T>(serviceIdentifier: identifier<T>, constructor: new (...args: any[]) => T, name?: string | number | symbol | undefined): void;
    addSingletonInstance<T>(serviceIdentifier: identifier<T>, instance: T, name?: string | number | symbol | undefined): void;
    get<T>(serviceIdentifier: identifier<T>, name?: string | number | symbol | undefined): T;
    getAll<T>(serviceIdentifier: identifier<T>, name?: string | number | symbol | undefined): T[];
    rebind<T>(serviceIdentifier: interfaces.ServiceIdentifier<T>, constructor: ClassType<T>, name?: string | number | symbol): void;
    rebindInstance<T>(serviceIdentifier: interfaces.ServiceIdentifier<T>, instance: T, name?: string | number | symbol): void;
}
export {};
