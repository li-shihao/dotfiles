// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const types_1 = require("../activation/types");
const types_2 = require("../common/application/types");
const types_3 = require("../common/types");
const random_1 = require("../common/utils/random");
const function_1 = require("../common/function");
// persistent state names, exported to make use of in testing
var LSSurveyStateKeys;
(function (LSSurveyStateKeys) {
    LSSurveyStateKeys["ShowBanner"] = "ShowLSSurveyBanner";
    LSSurveyStateKeys["ShowAttemptCounter"] = "LSSurveyShowAttempt";
    LSSurveyStateKeys["ShowAfterCompletionCount"] = "LSSurveyShowCount";
})(LSSurveyStateKeys = exports.LSSurveyStateKeys || (exports.LSSurveyStateKeys = {}));
var LSSurveyLabelIndex;
(function (LSSurveyLabelIndex) {
    LSSurveyLabelIndex[LSSurveyLabelIndex["Yes"] = 0] = "Yes";
    LSSurveyLabelIndex[LSSurveyLabelIndex["No"] = 1] = "No";
})(LSSurveyLabelIndex || (LSSurveyLabelIndex = {}));
/*
This class represents a popup that will ask our users for some feedback after
a specific event occurs N times.
*/
let LanguageServerSurveyBanner = class LanguageServerSurveyBanner {
    // private bannerMessage: string = localize.LanguageService.bannerMessage()
    // private bannerLabels: string[] = [localize.LanguageService.bannerLabelYes(), localize.LanguageService.bannerLabelNo()]
    constructor(appShell, persistentState, browserService, lsService, showAfterMinimumEventsCount = 100, showBeforeMaximumEventsCount = 500) {
        this.appShell = appShell;
        this.persistentState = persistentState;
        this.browserService = browserService;
        this.lsService = lsService;
        this.disabledInCurrentSession = false;
        this.isInitialized = false;
        this.minCompletionsBeforeShow = showAfterMinimumEventsCount;
        this.maxCompletionsBeforeShow = showBeforeMaximumEventsCount;
        this.initialize();
    }
    initialize() {
        if (this.isInitialized) {
            return;
        }
        this.isInitialized = true;
        if (this.minCompletionsBeforeShow >= this.maxCompletionsBeforeShow) {
            this.disable().catch(function_1.emptyFn);
        }
    }
    get enabled() {
        return this.persistentState.createGlobalPersistentState(LSSurveyStateKeys.ShowBanner, true).value;
    }
    async showBanner() {
        if (!this.enabled || this.disabledInCurrentSession) {
            return;
        }
        const launchCounter = await this.incrementPythonLanguageServiceLaunchCounter();
        const show = await this.shouldShowBanner(launchCounter);
        if (!show) {
            return;
        }
        await this.disable();
        // const response = await workspace.showInformationMessage(this.bannerMessage, ...this.bannerLabels)
        // switch (response) {
        //   case this.bannerLabels[LSSurveyLabelIndex.Yes]:
        //     {
        //       await this.launchSurvey()
        //       await this.disable()
        //       break
        //     }
        //   case this.bannerLabels[LSSurveyLabelIndex.No]: {
        //     await this.disable()
        //     break
        //   }
        //   default: {
        //     // Disable for the current session.
        //     this.disabledInCurrentSession = true
        //   }
        // }
    }
    async shouldShowBanner(launchCounter) {
        if (!this.enabled || this.disabledInCurrentSession) {
            return false;
        }
        if (!launchCounter) {
            launchCounter = await this.getPythonLSLaunchCounter();
        }
        const threshold = await this.getPythonLSLaunchThresholdCounter();
        return launchCounter >= threshold;
    }
    async disable() {
        await this.persistentState.createGlobalPersistentState(LSSurveyStateKeys.ShowBanner, false).updateValue(false);
    }
    async launchSurvey() {
        const launchCounter = await this.getPythonLSLaunchCounter();
        let lsVersion = await this.getPythonLSVersion();
        lsVersion = encodeURIComponent(lsVersion);
        this.browserService.launch(`https://www.research.net/r/LJZV9BZ?n=${launchCounter}&v=${lsVersion}`);
    }
    async incrementPythonLanguageServiceLaunchCounter() {
        const state = this.persistentState.createGlobalPersistentState(LSSurveyStateKeys.ShowAttemptCounter, 0);
        await state.updateValue(state.value + 1);
        return state.value;
    }
    async getPythonLSVersion(fallback = 'unknown') {
        const langServiceLatestFolder = await this.lsService.getCurrentLanguageServerDirectory();
        return langServiceLatestFolder ? langServiceLatestFolder.version.raw : fallback;
    }
    async getPythonLSLaunchCounter() {
        const state = this.persistentState.createGlobalPersistentState(LSSurveyStateKeys.ShowAttemptCounter, 0);
        return state.value;
    }
    async getPythonLSLaunchThresholdCounter() {
        const state = this.persistentState.createGlobalPersistentState(LSSurveyStateKeys.ShowAfterCompletionCount, undefined);
        if (state.value === undefined) {
            await state.updateValue(random_1.getRandomBetween(this.minCompletionsBeforeShow, this.maxCompletionsBeforeShow));
        }
        return state.value;
    }
};
LanguageServerSurveyBanner = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_2.IApplicationShell)),
    __param(1, inversify_1.inject(types_3.IPersistentStateFactory)),
    __param(2, inversify_1.inject(types_3.IBrowserService)),
    __param(3, inversify_1.inject(types_1.ILanguageServerFolderService))
], LanguageServerSurveyBanner);
exports.LanguageServerSurveyBanner = LanguageServerSurveyBanner;
//# sourceMappingURL=languageServerSurveyBanner.js.map