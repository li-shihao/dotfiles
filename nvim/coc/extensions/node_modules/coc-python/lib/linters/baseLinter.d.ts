import { OutputChannel, Uri } from 'coc.nvim';
import { CancellationToken, TextDocument } from 'vscode-languageserver-protocol';
import { ExecutionInfo, IConfigurationService, ILogger, IPythonSettings, Product } from '../common/types';
import { IServiceContainer } from '../ioc/types';
import { ILinter, ILinterInfo, ILintMessage, LinterId, LintMessageSeverity } from './types';
export interface IRegexGroup {
    line: number;
    column: number;
    code: string;
    message: string;
    type: string;
}
export declare function matchNamedRegEx(data: string, regex: string): IRegexGroup | undefined;
export declare function parseLine(line: string, regex: string, linterID: LinterId, colOffset?: number): ILintMessage | undefined;
export declare abstract class BaseLinter implements ILinter {
    protected readonly outputChannel: OutputChannel;
    protected readonly serviceContainer: IServiceContainer;
    protected readonly columnOffset: number;
    protected readonly configService: IConfigurationService;
    private errorHandler;
    private _pythonSettings;
    private _info;
    private workspace;
    protected readonly pythonSettings: IPythonSettings;
    constructor(product: Product, outputChannel: OutputChannel, serviceContainer: IServiceContainer, columnOffset?: number);
    readonly info: ILinterInfo;
    lint(document: TextDocument, cancellation: CancellationToken): Promise<ILintMessage[]>;
    protected getWorkspaceRootPath(document: TextDocument): string;
    protected readonly logger: ILogger;
    protected abstract runLinter(document: TextDocument, cancellation: CancellationToken): Promise<ILintMessage[]>;
    protected parseMessagesSeverity(error: string, categorySeverity: any): LintMessageSeverity;
    protected run(args: string[], document: TextDocument, cancellation: CancellationToken, regEx?: string): Promise<ILintMessage[]>;
    protected parseMessages(output: string, _document: TextDocument, _token: CancellationToken, regEx: string): Promise<ILintMessage[]>;
    protected handleError(error: Error, resource: Uri, execInfo: ExecutionInfo): Promise<void>;
    private parseLine;
    private parseLines;
    private displayLinterResultHeader;
}
