import { OutputChannel, Uri } from 'coc.nvim';
import { ExecutionInfo, IInstaller, ILogger, Product } from '../../common/types';
import { IServiceContainer } from '../../ioc/types';
import { IErrorHandler } from '../types';
export declare abstract class BaseErrorHandler implements IErrorHandler {
    protected product: Product;
    protected outputChannel: OutputChannel;
    protected serviceContainer: IServiceContainer;
    protected logger: ILogger;
    protected installer: IInstaller;
    private handler?;
    constructor(product: Product, outputChannel: OutputChannel, serviceContainer: IServiceContainer);
    protected readonly nextHandler: IErrorHandler | undefined;
    setNextHandler(handler: IErrorHandler): void;
    abstract handleError(error: Error, resource: Uri, execInfo: ExecutionInfo): Promise<boolean>;
}
