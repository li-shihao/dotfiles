"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../common/process/types");
const types_2 = require("../types");
const baseErrorHandler_1 = require("./baseErrorHandler");
class NotInstalledErrorHandler extends baseErrorHandler_1.BaseErrorHandler {
    constructor(product, outputChannel, serviceContainer) {
        super(product, outputChannel, serviceContainer);
    }
    async handleError(error, resource, execInfo) {
        const pythonExecutionService = await this.serviceContainer.get(types_1.IPythonExecutionFactory).create({ resource });
        const isModuleInstalled = await pythonExecutionService.isModuleInstalled(execInfo.moduleName);
        if (isModuleInstalled) {
            return this.nextHandler ? this.nextHandler.handleError(error, resource, execInfo) : false;
        }
        this.installer.promptToInstall(this.product, resource)
            .catch(this.logger.logError.bind(this, 'NotInstalledErrorHandler.promptToInstall'));
        const linterManager = this.serviceContainer.get(types_2.ILinterManager);
        const info = linterManager.getLinterInfo(execInfo.product);
        const customError = `Linter '${info.id}' is not installed. Please install it or select another linter".`;
        this.outputChannel.appendLine(`\n${customError}\n${error}`);
        this.logger.logWarning(customError, error);
        return true;
    }
}
exports.NotInstalledErrorHandler = NotInstalledErrorHandler;
//# sourceMappingURL=notInstalled.js.map