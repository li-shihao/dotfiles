import { Uri } from 'coc.nvim';
import { IApplicationShell, IWorkspaceService } from '../common/application/types';
import { IConfigurationService, IInstaller, Product } from '../common/types';
import { IAvailableLinterActivator, ILinterInfo } from './types';
export declare class AvailableLinterActivator implements IAvailableLinterActivator {
    private appShell;
    private installer;
    private workspaceConfig;
    private configService;
    constructor(appShell: IApplicationShell, installer: IInstaller, workspaceConfig: IWorkspaceService, configService: IConfigurationService);
    /**
     * Check if it is possible to enable an otherwise-unconfigured linter in
     * the current workspace, and if so ask the user if they want that linter
     * configured explicitly.
     *
     * @param linterInfo The linter to check installation status.
     * @param resource Context for the operation (required when in multi-root workspaces).
     *
     * @returns true if configuration was updated in any way, false otherwise.
     */
    promptIfLinterAvailable(linterInfo: ILinterInfo, resource?: Uri): Promise<boolean>;
    /**
     * Raise a dialog asking the user if they would like to explicitly configure a
     * linter or not in their current workspace.
     *
     * @param linterInfo The linter to ask the user to enable or not.
     *
     * @returns true if the user requested a configuration change, false otherwise.
     */
    promptToConfigureAvailableLinter(linterInfo: ILinterInfo): Promise<boolean>;
    /**
     * Check if the linter itself is available in the workspace's Python environment or
     * not.
     *
     * @param linterProduct Linter to check in the current workspace environment.
     * @param resource Context information for workspace.
     */
    isLinterAvailable(linterProduct: Product, resource?: Uri): Promise<boolean | undefined>;
    /**
     * Check if the given linter has been configured by the user in this workspace or not.
     *
     * @param linterInfo Linter to check for configuration status.
     * @param resource Context information.
     *
     * @returns true if the linter has not been configured at the user, workspace, or workspace-folder scope. false otherwise.
     */
    isLinterUsingDefaultConfiguration(linterInfo: ILinterInfo, resource?: Uri): boolean;
    /**
     * Check if this feature is enabled yet.
     *
     * This is a feature of the vscode-python extension that will become enabled once the
     * Python Language Server becomes the default, replacing Jedi as the default. Testing
     * the global default setting for `"python.jediEnabled": false` enables it.
     *
     * @returns true if the global default for python.jediEnabled is false.
     */
    readonly isFeatureEnabled: boolean;
}
