import { Uri } from 'coc.nvim';
import { IWorkspaceService } from '../common/application/types';
import { ExecutionInfo, IConfigurationService, Product } from '../common/types';
import { ILinterInfo, LinterId } from './types';
export declare class LinterInfo implements ILinterInfo {
    protected configService: IConfigurationService;
    private _id;
    private _product;
    private _configFileNames;
    constructor(product: Product, id: LinterId, configService: IConfigurationService, configFileNames?: string[]);
    readonly id: LinterId;
    readonly product: Product;
    readonly pathSettingName: string;
    readonly argsSettingName: string;
    readonly enabledSettingName: string;
    readonly configFileNames: string[];
    enableAsync(enabled: boolean, resource?: Uri): Promise<void>;
    isEnabled(resource?: Uri): boolean;
    pathName(resource?: Uri): string;
    linterArgs(resource?: Uri): string[];
    getExecutionInfo(customArgs: string[], resource?: Uri): ExecutionInfo;
}
export declare class PylintLinterInfo extends LinterInfo {
    private readonly workspaceService;
    constructor(configService: IConfigurationService, workspaceService: IWorkspaceService, configFileNames?: string[]);
    isEnabled(resource?: Uri): boolean;
}
