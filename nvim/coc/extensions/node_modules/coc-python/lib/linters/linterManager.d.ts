import { OutputChannel, Uri } from 'coc.nvim';
import { IWorkspaceService } from '../common/application/types';
import { Product } from '../common/types';
import { IServiceContainer } from '../ioc/types';
import { ILinter, ILinterInfo, ILinterManager } from './types';
export declare class LinterManager implements ILinterManager {
    private serviceContainer;
    private readonly workspaceService;
    protected linters: ILinterInfo[];
    private configService;
    private checkedForInstalledLinters;
    constructor(serviceContainer: IServiceContainer, workspaceService: IWorkspaceService);
    getAllLinterInfos(): ILinterInfo[];
    getLinterInfo(product: Product): ILinterInfo;
    isLintingEnabled(silent: boolean, resource?: Uri): Promise<boolean>;
    enableLintingAsync(enable: boolean, resource?: Uri): Promise<void>;
    getActiveLinters(silent: boolean, resource?: Uri): Promise<ILinterInfo[]>;
    setActiveLintersAsync(products: Product[], resource?: Uri): Promise<void>;
    createLinter(product: Product, outputChannel: OutputChannel, serviceContainer: IServiceContainer, resource?: Uri): Promise<ILinter>;
    protected enableUnconfiguredLinters(resource?: Uri): Promise<void>;
}
