import { ExecutionInfo, Product } from '../common/types';
import { IServiceContainer } from '../ioc/types';
import { Uri, OutputChannel, DiagnosticCollection, Extension } from 'coc.nvim';
import { TextDocument, CancellationToken } from 'vscode-languageserver-protocol';
export interface IErrorHandler {
    handleError(error: Error, resource: Uri, execInfo: ExecutionInfo): Promise<boolean>;
}
export declare type LinterId = 'flake8' | 'mypy' | 'pep8' | 'prospector' | 'pydocstyle' | 'pylama' | 'pylint' | 'bandit';
export interface ILinterInfo {
    readonly id: LinterId;
    readonly product: Product;
    readonly pathSettingName: string;
    readonly argsSettingName: string;
    readonly enabledSettingName: string;
    readonly configFileNames: string[];
    enableAsync(enabled: boolean, resource?: Uri): Promise<void>;
    isEnabled(resource?: Uri): boolean;
    pathName(resource?: Uri): string;
    linterArgs(resource?: Uri): string[];
    getExecutionInfo(customArgs: string[], resource?: Uri): ExecutionInfo;
}
export interface ILinter {
    readonly info: ILinterInfo;
    lint(document: TextDocument, cancellation: CancellationToken): Promise<ILintMessage[]>;
}
export declare const IAvailableLinterActivator: unique symbol;
export interface IAvailableLinterActivator {
    promptIfLinterAvailable(linter: ILinterInfo, resource?: Uri): Promise<boolean>;
}
export declare const ILinterManager: unique symbol;
export interface ILinterManager {
    getAllLinterInfos(): ILinterInfo[];
    getLinterInfo(product: Product): ILinterInfo;
    getActiveLinters(silent: boolean, resource?: Uri): Promise<ILinterInfo[]>;
    isLintingEnabled(silent: boolean, resource?: Uri): Promise<boolean>;
    enableLintingAsync(enable: boolean, resource?: Uri): Promise<void>;
    setActiveLintersAsync(products: Product[], resource?: Uri): Promise<void>;
    createLinter(product: Product, outputChannel: OutputChannel, serviceContainer: IServiceContainer, resource?: Uri): Promise<ILinter>;
}
export interface ILintMessage {
    line: number;
    column: number;
    code: string | undefined;
    message: string;
    type: string;
    severity?: LintMessageSeverity;
    provider: string;
}
export declare enum LintMessageSeverity {
    Hint = 0,
    Error = 1,
    Warning = 2,
    Information = 3
}
export declare const ILintingEngine: unique symbol;
export interface ILintingEngine {
    readonly diagnostics: DiagnosticCollection;
    lintOpenPythonFiles(): Promise<DiagnosticCollection>;
    lintDocument(document: TextDocument): Promise<void>;
    linkJupyterExtension(jupyter: Extension<any> | undefined): Promise<void>;
    clearDiagnostics(document: TextDocument): void;
}
