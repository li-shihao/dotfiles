"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const inversify_1 = require("inversify");
const os_1 = require("os");
const path = __importStar(require("path"));
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const types_1 = require("../common/application/types");
const constants_1 = require("../common/constants");
const types_2 = require("../common/platform/types");
const types_3 = require("../common/process/types");
const types_4 = require("../common/types");
const types_5 = require("../ioc/types");
let SortImportsEditingProvider = class SortImportsEditingProvider {
    constructor(serviceContainer) {
        this.serviceContainer = serviceContainer;
        this.documentManager = serviceContainer.get(types_1.IDocumentManager);
        this.configurationService = serviceContainer.get(types_4.IConfigurationService);
        this.pythonExecutionFactory = serviceContainer.get(types_3.IPythonExecutionFactory);
        this.processServiceFactory = serviceContainer.get(types_3.IProcessServiceFactory);
        this.editorUtils = serviceContainer.get(types_4.IEditorUtils);
    }
    async provideDocumentSortImportsEdits(uri, token) {
        let doc = coc_nvim_1.workspace.getDocument(coc_nvim_1.workspace.bufnr);
        if (doc.uri != uri.toString()) {
            await coc_nvim_1.workspace.jumpTo(uri.toString());
        }
        doc = await coc_nvim_1.workspace.document;
        if (doc.lineCount <= 1) {
            return;
        }
        // isort does have the ability to read from the process input stream and return the formatted code out of the output stream.
        // However they don't support returning the diff of the formatted text when reading data from the input stream.
        // Yes getting text formatted that way avoids having to create a temporary file, however the diffing will have
        // to be done here in node (extension), i.e. extension cpu, i.e. less responsive solution.
        const importScript = path.join(constants_1.EXTENSION_ROOT_DIR, 'pythonFiles', 'sortImports.py');
        const fsService = this.serviceContainer.get(types_2.IFileSystem);
        const tmpFile = doc.dirty ? await fsService.createTemporaryFile(path.extname(coc_nvim_1.Uri.parse(doc.uri).fsPath)) : undefined;
        if (tmpFile) {
            await fsService.writeFile(tmpFile.filePath, doc.getDocumentContent());
        }
        const settings = this.configurationService.getSettings(uri);
        const isort = settings.sortImports.path;
        const filePath = tmpFile ? tmpFile.filePath : coc_nvim_1.Uri.parse(doc.uri).fsPath;
        const args = [filePath, '--diff'].concat(settings.sortImports.args);
        let diffPatch;
        if (token && token.isCancellationRequested) {
            return;
        }
        try {
            if (typeof isort === 'string' && isort.length > 0) {
                // Lets just treat this as a standard tool.
                const processService = await this.processServiceFactory.create(coc_nvim_1.Uri.parse(doc.uri));
                diffPatch = (await processService.exec(isort, args, { throwOnStdErr: true, token })).stdout;
            }
            else {
                const processExeService = await this.pythonExecutionFactory.create({ resource: coc_nvim_1.Uri.parse(doc.uri) });
                diffPatch = (await processExeService.exec([importScript].concat(args), { throwOnStdErr: true, token })).stdout;
            }
            return this.editorUtils.getWorkspaceEditsFromPatch(doc.getDocumentContent(), diffPatch, coc_nvim_1.Uri.parse(doc.uri));
        }
        finally {
            if (tmpFile) {
                tmpFile.dispose();
            }
        }
    }
    registerCommands() {
        const cmdManager = this.serviceContainer.get(types_1.ICommandManager);
        const disposable = cmdManager.registerCommand(constants_1.Commands.Sort_Imports, this.sortImports, this);
        this.serviceContainer.get(types_4.IDisposableRegistry).push(disposable);
    }
    async sortImports(uri) {
        if (!uri) {
            const doc = await coc_nvim_1.workspace.document;
            if (!doc || doc.filetype !== constants_1.PYTHON_LANGUAGE) {
                coc_nvim_1.workspace.showMessage('Please open a Python file to sort the imports.', 'error');
                return;
            }
            uri = coc_nvim_1.Uri.parse(doc.uri);
        }
        const document = await this.documentManager.openTextDocument(uri);
        if (document.lineCount <= 1) {
            return;
        }
        const doc = coc_nvim_1.workspace.getDocument(coc_nvim_1.workspace.bufnr);
        // Hack, if the document doesn't contain an empty line at the end, then add it
        // Else the library strips off the last line
        const lastLine = doc.getline(document.lineCount - 1);
        if (lastLine.trim().length > 0) {
            const edit = { changes: {} };
            const position = vscode_languageserver_protocol_1.Position.create(document.lineCount - 1, lastLine.length);
            edit.changes[uri.toString()] = [vscode_languageserver_protocol_1.TextEdit.insert(position, os_1.EOL)];
            await coc_nvim_1.workspace.applyEdit(edit);
        }
        try {
            const changes = await this.provideDocumentSortImportsEdits(uri);
            if (!changes || Object.keys(changes.changes).length === 0) {
                return;
            }
            await coc_nvim_1.workspace.applyEdit(changes);
        }
        catch (error) {
            const message = typeof error === 'string' ? error : (error.message ? error.message : error);
            const outputChannel = this.serviceContainer.get(types_4.IOutputChannel, constants_1.STANDARD_OUTPUT_CHANNEL);
            outputChannel.appendLine(error);
            const logger = this.serviceContainer.get(types_4.ILogger);
            logger.logError(`Failed to format imports for '${uri.fsPath}'.`, error);
            coc_nvim_1.workspace.showMessage(message, 'error');
        }
    }
};
SortImportsEditingProvider = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_5.IServiceContainer))
], SortImportsEditingProvider);
exports.SortImportsEditingProvider = SortImportsEditingProvider;
//# sourceMappingURL=importSortProvider.js.map