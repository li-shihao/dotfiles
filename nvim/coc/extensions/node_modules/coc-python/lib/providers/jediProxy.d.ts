import { CancellationToken, CompletionItemKind, Disposable, SymbolKind } from 'vscode-languageserver-protocol';
import { IServiceContainer } from '../ioc/types';
export declare enum CommandType {
    Arguments = 0,
    Completions = 1,
    Hover = 2,
    Usages = 3,
    Definitions = 4,
    Symbols = 5
}
export declare class JediProxy implements Disposable {
    private extensionRootDir;
    private serviceContainer;
    private proc?;
    private pythonSettings;
    private cmdId;
    private lastKnownPythonInterpreter;
    private previousData;
    private commands;
    private commandQueue;
    private spawnRetryAttempts;
    private additionalAutoCompletePaths;
    private workspacePath;
    private languageServerStarted;
    private initialized;
    private environmentVariablesProvider;
    private logger;
    private ignoreJediMemoryFootprint;
    private pidUsageFailures;
    private lastCmdIdProcessed?;
    private lastCmdIdProcessedForPidUsage?;
    private proposeNewLanguageServerPopup;
    private readonly disposables;
    constructor(extensionRootDir: string, workspacePath: string, serviceContainer: IServiceContainer);
    private static getProperty;
    dispose(): void;
    getNextCommandId(): number;
    sendCommand<T extends ICommandResult>(cmd: ICommand): Promise<T>;
    private initialize;
    private shouldCheckJediMemoryFootprint;
    private checkJediMemoryFootprint;
    private checkJediMemoryFootprintImpl;
    private onDidChangeInterpreter;
    private environmentVariablesChangeHandler;
    private startLanguageServer;
    private restartLanguageServer;
    private clearPendingRequests;
    private killProcess;
    private handleError;
    private spawnProcess;
    private getCommandHandler;
    private onCompletion;
    private onDefinition;
    private onHover;
    private onSymbols;
    private onUsages;
    private onArguments;
    private checkQueueLength;
    private createPayload;
    private getPathFromPythonCommand;
    private buildAutoCompletePaths;
    private getEnvironmentVariablesProvider;
    private getConfig;
    private safeResolve;
}
export interface ICommand {
    telemetryEvent?: string;
    command: CommandType;
    source?: string;
    fileName: string;
    lineIndex: number;
    columnIndex: number;
}
export interface ICommandError {
    message: string;
}
export interface ICommandResult {
    requestId: number;
}
export interface ICompletionResult extends ICommandResult {
    items: IAutoCompleteItem[];
}
export interface IHoverResult extends ICommandResult {
    items: IHoverItem[];
}
export interface IDefinitionResult extends ICommandResult {
    definitions: IDefinition[];
}
export interface IReferenceResult extends ICommandResult {
    references: IReference[];
}
export interface ISymbolResult extends ICommandResult {
    definitions: IDefinition[];
}
export interface IArgumentsResult extends ICommandResult {
    definitions: ISignature[];
}
export interface ISignature {
    name: string;
    docstring: string;
    description: string;
    paramindex: number;
    params: IArgument[];
}
export interface IArgument {
    name: string;
    value: string;
    docstring: string;
    description: string;
}
export interface IReference {
    name: string;
    fileName: string;
    columnIndex: number;
    lineIndex: number;
    moduleName: string;
}
export interface IAutoCompleteItem {
    type: CompletionItemKind;
    rawType: CompletionItemKind;
    kind: SymbolKind;
    text: string;
    description: string;
    raw_docstring: string;
    rightLabel: string;
}
export interface IDefinitionRange {
    startLine: number;
    startColumn: number;
    endLine: number;
    endColumn: number;
}
export interface IDefinition {
    rawType: string;
    type: CompletionItemKind;
    kind: SymbolKind;
    text: string;
    fileName: string;
    container: string;
    range: IDefinitionRange;
}
export interface IHoverItem {
    kind: SymbolKind;
    text: string;
    description: string;
    docstring: string;
    signature: string;
}
export declare class JediProxyHandler<R extends ICommandResult> implements Disposable {
    private jediProxy;
    private commandCancellationTokenSources;
    readonly JediProxy: JediProxy;
    constructor(jediProxy: JediProxy);
    dispose(): void;
    sendCommand(cmd: ICommand, _token?: CancellationToken): Promise<R | undefined>;
    sendCommandNonCancellableCommand(cmd: ICommand, token?: CancellationToken): Promise<R | undefined>;
}
