// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const path_1 = __importDefault(require("path"));
const types_1 = require("../common/application/types");
const constants_1 = require("../common/constants");
const types_2 = require("../common/platform/types");
const types_3 = require("../common/types");
const contracts_1 = require("../interpreter/contracts");
const types_4 = require("../linters/types");
const function_1 = require("../common/function");
class LinterProvider {
    constructor(context, serviceContainer) {
        this.context = context;
        this.disposables = [];
        this.fs = serviceContainer.get(types_2.IFileSystem);
        this.engine = serviceContainer.get(types_4.ILintingEngine);
        this.linterManager = serviceContainer.get(types_4.ILinterManager);
        this.interpreterService = serviceContainer.get(contracts_1.IInterpreterService);
        this.documents = serviceContainer.get(types_1.IDocumentManager);
        this.configuration = serviceContainer.get(types_3.IConfigurationService);
        this.workspaceService = serviceContainer.get(types_1.IWorkspaceService);
        this.disposables.push(this.interpreterService.onDidChangeInterpreter(() => this.engine.lintOpenPythonFiles()));
        this.documents.onDidOpenTextDocument(e => this.onDocumentOpened(e), this.context.subscriptions);
        this.documents.onDidCloseTextDocument(e => this.onDocumentClosed(e), this.context.subscriptions);
        this.documents.onDidSaveTextDocument(e => this.onDocumentSaved(e), this.context.subscriptions);
        const disposable = this.workspaceService.onDidChangeConfiguration(this.lintSettingsChangedHandler.bind(this));
        this.disposables.push(disposable);
        // On workspace reopen we don't get `onDocumentOpened` since it is first opened
        // and then the extension is activated. So schedule linting pass now.
        if (!constants_1.isTestExecution()) {
            setTimeout(() => this.engine.lintOpenPythonFiles().catch(function_1.emptyFn), 1200);
        }
    }
    dispose() {
        this.disposables.forEach(d => d.dispose());
    }
    isDocumentOpen(uri) {
        return coc_nvim_1.workspace.getDocument(uri) != null;
    }
    lintSettingsChangedHandler(e) {
        // Look for python files that belong to the specified workspace folder.
        coc_nvim_1.workspace.textDocuments.forEach(document => {
            if (e.affectsConfiguration('python.linting', document.uri)) {
                this.engine.lintDocument(document).catch(function_1.emptyFn);
            }
        });
    }
    onDocumentOpened(document) {
        this.engine.lintDocument(document).catch(function_1.emptyFn);
    }
    onDocumentSaved(document) {
        const settings = this.configuration.getSettings(coc_nvim_1.Uri.parse(document.uri));
        if (document.languageId === 'python' && settings.linting.enabled && settings.linting.lintOnSave) {
            this.engine.lintDocument(document).catch(function_1.emptyFn);
            return;
        }
        this.linterManager.getActiveLinters(false, coc_nvim_1.Uri.parse(document.uri))
            .then(linters => {
            const fileName = path_1.default.basename(coc_nvim_1.Uri.parse(document.uri).fsPath).toLowerCase();
            const watchers = linters.filter(info => info.configFileNames.indexOf(fileName) >= 0);
            if (watchers.length > 0) {
                setTimeout(() => this.engine.lintOpenPythonFiles(), 1000);
            }
        }).catch(function_1.emptyFn);
    }
    onDocumentClosed(document) {
        if (!document || !coc_nvim_1.Uri.parse(document.uri).fsPath || !document.uri) {
            return;
        }
        // Check if this document is still open as a duplicate editor.
        if (!this.isDocumentOpen(document.uri)) {
            this.engine.clearDiagnostics(document);
        }
    }
}
exports.LinterProvider = LinterProvider;
//# sourceMappingURL=linterProvider.js.map