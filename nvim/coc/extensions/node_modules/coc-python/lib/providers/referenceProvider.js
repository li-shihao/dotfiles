'use strict';
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const proxy = __importStar(require("./jediProxy"));
const coc_nvim_1 = require("coc.nvim");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
class PythonReferenceProvider {
    constructor(jediFactory) {
        this.jediFactory = jediFactory;
    }
    static parseData(data) {
        if (data && data.references.length > 0) {
            // tslint:disable-next-line:no-unnecessary-local-variable
            const references = data.references.filter(ref => {
                if (!ref || typeof ref.columnIndex !== 'number' || typeof ref.lineIndex !== 'number'
                    || typeof ref.fileName !== 'string' || ref.columnIndex === -1 || ref.lineIndex === -1 || ref.fileName.length === 0) {
                    return false;
                }
                return true;
            }).map(ref => {
                const definitionResource = coc_nvim_1.Uri.file(ref.fileName);
                const range = vscode_languageserver_protocol_1.Range.create(ref.lineIndex, ref.columnIndex, ref.lineIndex, ref.columnIndex);
                return vscode_languageserver_protocol_1.Location.create(definitionResource.toString(), range);
            });
            return references;
        }
        return [];
    }
    async provideReferences(document, position, _context, token) {
        const doc = coc_nvim_1.workspace.getDocument(document.uri);
        const filename = coc_nvim_1.Uri.parse(doc.uri).fsPath;
        if (doc.getline(position.line).match(/^\s*\/\//)) {
            return;
        }
        const range = doc.getWordRangeAtPosition(position);
        if (!range) {
            return;
        }
        const isEmpty = range.start.line == range.end.line && range.start.character == range.end.character;
        const columnIndex = isEmpty ? position.character : range.end.character;
        const cmd = {
            command: proxy.CommandType.Usages,
            fileName: filename,
            columnIndex,
            lineIndex: position.line
        };
        if (doc.dirty) {
            cmd.source = doc.getDocumentContent();
        }
        const data = await this.jediFactory.getJediProxyHandler(coc_nvim_1.Uri.parse(document.uri)).sendCommand(cmd, token);
        return data ? PythonReferenceProvider.parseData(data) : undefined;
    }
}
exports.PythonReferenceProvider = PythonReferenceProvider;
//# sourceMappingURL=referenceProvider.js.map