"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const constants_1 = require("../common/constants");
const editor_1 = require("../common/editor");
const types_1 = require("../common/types");
const proxy_1 = require("../refactor/proxy");
class PythonRenameProvider {
    constructor(serviceContainer) {
        this.serviceContainer = serviceContainer;
        this.outputChannel = serviceContainer.get(types_1.IOutputChannel, constants_1.STANDARD_OUTPUT_CHANNEL);
        this.configurationService = serviceContainer.get(types_1.IConfigurationService);
    }
    provideRenameEdits(document, position, newName, _token) {
        return coc_nvim_1.workspace.nvim.command('wa').then(() => {
            return this.doRename(document, position, newName);
        });
    }
    doRename(document, position, newName) {
        let doc = coc_nvim_1.workspace.getDocument(document.uri);
        if (doc.getline(position.line).match(/^\s*\/\//)) {
            return;
        }
        const range = doc.getWordRangeAtPosition(position);
        const isEmpty = range.start.line == range.end.line && range.start.character == range.end.character;
        if (!range || isEmpty) {
            return;
        }
        const oldName = document.getText(range);
        if (oldName === newName) {
            return;
        }
        const workspaceRoot = coc_nvim_1.workspace.rootPath;
        const pythonSettings = this.configurationService.getSettings(coc_nvim_1.Uri.file(workspaceRoot));
        const proxy = new proxy_1.RefactorProxy(constants_1.EXTENSION_ROOT_DIR, pythonSettings, workspaceRoot, this.serviceContainer);
        return proxy.rename(document, newName, coc_nvim_1.Uri.parse(document.uri).fsPath, range).then(response => {
            const fileDiffs = response.results.map(fileChanges => fileChanges.diff);
            return editor_1.getWorkspaceEditsFromPatch(fileDiffs, workspaceRoot);
        }).catch(reason => {
            if (reason === 'Not installed') {
                const installer = this.serviceContainer.get(types_1.IInstaller);
                installer.promptToInstall(types_1.Product.rope, coc_nvim_1.Uri.parse(document.uri))
                    .catch(ex => console.error('Python Extension: promptToInstall', ex));
                return Promise.reject('');
            }
            else {
                coc_nvim_1.workspace.showMessage(reason, 'error');
                this.outputChannel.appendLine(reason);
            }
            return Promise.reject(reason);
        });
    }
}
exports.PythonRenameProvider = PythonRenameProvider;
//# sourceMappingURL=renameProvider.js.map