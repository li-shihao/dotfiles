import { Disposable } from 'coc.nvim';
import { Range, TextDocument } from 'vscode-languageserver-protocol';
import { IPythonSettings } from '../common/types';
import { IServiceContainer } from '../ioc/types';
export declare class RefactorProxy implements Disposable {
    private workspaceRoot;
    private serviceContainer;
    private _process?;
    private _extensionDir;
    private _previousOutData;
    private _previousStdErrData;
    private _startedSuccessfully;
    private _commandResolve?;
    private _commandReject;
    private initialized;
    constructor(extensionDir: string, _pythonSettings: IPythonSettings, workspaceRoot: string, serviceContainer: IServiceContainer);
    dispose(): void;
    private getOffsetAt;
    rename<T>(document: TextDocument, name: string, filePath: string, range: Range): Promise<T>;
    extractVariable<T>(document: TextDocument, name: string, filePath: string, range: Range): Promise<T>;
    extractMethod<T>(document: TextDocument, name: string, filePath: string, range: Range): Promise<T>;
    private sendCommand;
    private initialize;
    private handleStdError;
    private handleError;
    private onData;
}
