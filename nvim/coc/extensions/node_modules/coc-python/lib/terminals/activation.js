// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const coc_nvim_1 = require("coc.nvim");
const types_1 = require("../common/application/types");
const types_2 = require("../common/terminal/types");
const types_3 = require("../common/types");
let TerminalAutoActivation = class TerminalAutoActivation {
    constructor(terminalManager, disposableRegistry, activator, workspaceService) {
        this.terminalManager = terminalManager;
        this.activator = activator;
        this.workspaceService = workspaceService;
        disposableRegistry.push(this);
    }
    dispose() {
        if (this.handler) {
            this.handler.dispose();
            this.handler = undefined;
        }
    }
    register() {
        if (this.handler) {
            return;
        }
        this.handler = this.terminalManager.onDidOpenTerminal(this.activateTerminal, this);
    }
    async activateTerminal(terminal) {
        // If we have just one workspace, then pass that as the resource.
        // Until upstream VSC issue is resolved https://github.com/Microsoft/vscode/issues/63052.
        // const workspaceFolder =
        //   this.workspaceService.hasWorkspaceFolders && this.workspaceService.workspaceFolders!.length > 0
        //     ? this.workspaceService.workspaceFolders![0].uri
        //     : undefined
        await this.activator.activateEnvironmentInTerminal(terminal, coc_nvim_1.Uri.file(coc_nvim_1.workspace.rootPath));
    }
};
TerminalAutoActivation = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_1.ITerminalManager)),
    __param(1, inversify_1.inject(types_3.IDisposableRegistry)),
    __param(2, inversify_1.inject(types_2.ITerminalActivator)),
    __param(3, inversify_1.inject(types_1.IWorkspaceService))
], TerminalAutoActivation);
exports.TerminalAutoActivation = TerminalAutoActivation;
//# sourceMappingURL=activation.js.map