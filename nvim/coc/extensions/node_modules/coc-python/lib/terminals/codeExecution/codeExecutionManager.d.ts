import { Disposable, Event } from 'coc.nvim';
import { ICommandManager, IDocumentManager } from '../../common/application/types';
import { IFileSystem } from '../../common/platform/types';
import { IServiceContainer } from '../../ioc/types';
import { ICodeExecutionManager } from '../../terminals/types';
export declare class CodeExecutionManager implements ICodeExecutionManager {
    private commandManager;
    private documentManager;
    private disposableRegistry;
    private fileSystem;
    private serviceContainer;
    private eventEmitter;
    constructor(commandManager: ICommandManager, documentManager: IDocumentManager, disposableRegistry: Disposable[], fileSystem: IFileSystem, serviceContainer: IServiceContainer);
    readonly onExecutedCode: Event<string>;
    registerCommands(): void;
    private executeFileInTerminal;
    private executeSelectionInTerminal;
    private executeSelectionInDjangoShell;
    private executeSelection;
}
