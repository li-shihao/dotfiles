// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const inversify_1 = require("inversify");
const types_1 = require("../../common/application/types");
const constants_1 = require("../../common/constants");
const types_2 = require("../../common/platform/types");
const types_3 = require("../../common/types");
const misc_1 = require("../../common/utils/misc");
const types_4 = require("../../ioc/types");
const types_5 = require("../../terminals/types");
let CodeExecutionManager = class CodeExecutionManager {
    constructor(commandManager, documentManager, disposableRegistry, fileSystem, 
    // @inject(IPythonExtensionBanner) @named(BANNER_NAME_INTERACTIVE_SHIFTENTER) private readonly shiftEnterBanner: IPythonExtensionBanner,
    serviceContainer) {
        this.commandManager = commandManager;
        this.documentManager = documentManager;
        this.disposableRegistry = disposableRegistry;
        this.fileSystem = fileSystem;
        this.serviceContainer = serviceContainer;
        this.eventEmitter = new coc_nvim_1.Emitter();
    }
    get onExecutedCode() {
        return this.eventEmitter.event;
    }
    registerCommands() {
        this.disposableRegistry.push(this.commandManager.registerCommand(constants_1.Commands.Exec_In_Terminal, this.executeFileInTerminal.bind(this)));
        this.disposableRegistry.push(this.commandManager.registerCommand(constants_1.Commands.Exec_Selection_In_Terminal, this.executeSelectionInTerminal.bind(this)));
        this.disposableRegistry.push(this.commandManager.registerCommand(constants_1.Commands.Exec_Selection_In_Django_Shell, this.executeSelectionInDjangoShell.bind(this)));
    }
    async executeFileInTerminal(file) {
        const codeExecutionHelper = this.serviceContainer.get(types_5.ICodeExecutionHelper);
        file = file instanceof coc_nvim_1.Uri ? file : undefined;
        const fileToExecute = file ? file : await codeExecutionHelper.getFileToExecute();
        if (!fileToExecute) {
            return;
        }
        await coc_nvim_1.workspace.nvim.command('noa wa');
        // try {
        //   const contents = await this.fileSystem.readFile(fileToExecute.fsPath)
        //   this.eventEmitter.fire(contents)
        // } catch {
        //   // Ignore any errors that occur for firing this event. It's only used
        //   // for telemetry
        //   noop()
        // }
        const executionService = this.serviceContainer.get(types_5.ICodeExecutionService, 'standard');
        await executionService.executeFile(fileToExecute);
    }
    async executeSelectionInTerminal() {
        const executionService = this.serviceContainer.get(types_5.ICodeExecutionService, 'standard');
        await this.executeSelection(executionService);
        // Prompt one time to ask if they want to send shift-enter to the Interactive Window
        // this.shiftEnterBanner.showBanner().catch(emptyFn)
    }
    async executeSelectionInDjangoShell() {
        const executionService = this.serviceContainer.get(types_5.ICodeExecutionService, 'djangoShell');
        await this.executeSelection(executionService);
    }
    async executeSelection(executionService) {
        const { nvim } = coc_nvim_1.workspace;
        const mode = await nvim.call('visualmode');
        if (!mode)
            return;
        const codeExecutionHelper = this.serviceContainer.get(types_5.ICodeExecutionHelper);
        const codeToExecute = await codeExecutionHelper.getSelectedTextToExecute(mode);
        const normalizedCode = await codeExecutionHelper.normalizeLines(codeToExecute);
        if (!normalizedCode || normalizedCode.trim().length === 0) {
            return;
        }
        try {
            this.eventEmitter.fire(normalizedCode);
        }
        catch (_a) {
            // Ignore any errors that occur for firing this event. It's only used
            // for telemetry
            misc_1.noop();
        }
        const doc = coc_nvim_1.workspace.getDocument(coc_nvim_1.workspace.bufnr);
        await executionService.execute(normalizedCode, coc_nvim_1.Uri.parse(doc.uri));
    }
};
CodeExecutionManager = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_1.ICommandManager)),
    __param(1, inversify_1.inject(types_1.IDocumentManager)),
    __param(2, inversify_1.inject(types_3.IDisposableRegistry)),
    __param(3, inversify_1.inject(types_2.IFileSystem)),
    __param(4, inversify_1.inject(types_4.IServiceContainer))
], CodeExecutionManager);
exports.CodeExecutionManager = CodeExecutionManager;
//# sourceMappingURL=codeExecutionManager.js.map