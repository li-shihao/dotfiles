"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const path = __importStar(require("path"));
const coc_nvim_1 = require("coc.nvim");
const contextKey_1 = require("../../common/contextKey");
let DjangoContextInitializer = class DjangoContextInitializer {
    constructor(documentManager, workpaceService, fileSystem, commandManager) {
        this.documentManager = documentManager;
        this.workpaceService = workpaceService;
        this.fileSystem = fileSystem;
        this.workspaceContextKeyValues = new Map();
        this.lastCheckedWorkspace = '';
        this.disposables = [];
        this.isDjangoProject = new contextKey_1.ContextKey('python.isDjangoProject', commandManager);
        // tslint:disable-next-line: no-console
        this.ensureContextStateIsSet().catch(ex => console.error('Python Extension: ensureState', ex));
        // this.disposables.push(this.workpaceService.onDidChangeWorkspaceFolders(() => this.updateContextKeyBasedOnActiveWorkspace()))
    }
    dispose() {
        this.disposables.forEach(disposable => disposable.dispose());
    }
    // private updateContextKeyBasedOnActiveWorkspace() {
    //   if (this.monitoringActiveTextEditor) {
    //     return
    //   }
    //   this.monitoringActiveTextEditor = true
    //   this.disposables.push(this.documentManager.onDidChangeActiveTextEditor(() => this.ensureContextStateIsSet()))
    // }
    getActiveWorkspace() {
        return coc_nvim_1.workspace.rootPath;
    }
    async ensureContextStateIsSet() {
        const activeWorkspace = this.getActiveWorkspace();
        if (!activeWorkspace) {
            return this.isDjangoProject.set(false);
        }
        if (this.lastCheckedWorkspace === activeWorkspace) {
            return;
        }
        if (this.workspaceContextKeyValues.has(activeWorkspace)) {
            await this.isDjangoProject.set(this.workspaceContextKeyValues.get(activeWorkspace));
        }
        else {
            const exists = await this.fileSystem.fileExists(path.join(activeWorkspace, 'manage.py'));
            await this.isDjangoProject.set(exists);
            this.workspaceContextKeyValues.set(activeWorkspace, exists);
            this.lastCheckedWorkspace = activeWorkspace;
        }
    }
};
DjangoContextInitializer = __decorate([
    inversify_1.injectable()
], DjangoContextInitializer);
exports.DjangoContextInitializer = DjangoContextInitializer;
//# sourceMappingURL=djangoContext.js.map