"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = require("coc.nvim");
const inversify_1 = require("inversify");
const path_1 = __importDefault(require("path"));
const constants_1 = require("../../common/constants");
const types_1 = require("../../common/process/types");
const types_2 = require("../../common/types");
const types_3 = require("../../ioc/types");
let CodeExecutionHelper = class CodeExecutionHelper {
    constructor(serviceContainer) {
        this.processServiceFactory = serviceContainer.get(types_1.IProcessServiceFactory);
        this.configurationService = serviceContainer.get(types_2.IConfigurationService);
    }
    async normalizeLines(code, resource) {
        try {
            if (code.trim().length === 0) {
                return '';
            }
            const pythonPath = this.configurationService.getSettings(resource).pythonPath;
            const args = [path_1.default.join(constants_1.EXTENSION_ROOT_DIR, 'pythonFiles', 'normalizeForInterpreter.py'), code];
            const processService = await this.processServiceFactory.create(resource);
            const proc = await processService.exec(pythonPath, args, { throwOnStdErr: true });
            return proc.stdout;
        }
        catch (ex) {
            // tslint:disable-next-line: no-console
            console.error(ex, 'Python: Failed to normalize code for execution in terminal');
            return code;
        }
    }
    async getFileToExecute() {
        const doc = coc_nvim_1.workspace.getDocument(coc_nvim_1.workspace.bufnr);
        if (!doc || doc.filetype != 'python' || doc.schema !== 'file') {
            coc_nvim_1.workspace.showMessage('Python file required to run in terminal', 'error');
            return;
        }
        await coc_nvim_1.workspace.nvim.command('write');
        return coc_nvim_1.Uri.parse(doc.uri);
    }
    async getSelectedTextToExecute(mode) {
        let doc = coc_nvim_1.workspace.getDocument(coc_nvim_1.workspace.bufnr);
        if (!doc)
            return;
        let range = await coc_nvim_1.workspace.getSelectedRange(mode, doc.textDocument);
        if (range)
            return doc.textDocument.getText(range);
    }
};
CodeExecutionHelper = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_3.IServiceContainer))
], CodeExecutionHelper);
exports.CodeExecutionHelper = CodeExecutionHelper;
//# sourceMappingURL=helper.js.map