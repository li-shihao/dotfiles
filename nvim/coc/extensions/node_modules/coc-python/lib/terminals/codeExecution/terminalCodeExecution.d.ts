import { Disposable, Uri } from 'coc.nvim';
import { IWorkspaceService } from '../../common/application/types';
import { IPlatformService } from '../../common/platform/types';
import { ITerminalServiceFactory } from '../../common/terminal/types';
import { IConfigurationService } from '../../common/types';
import { ICodeExecutionService } from '../../terminals/types';
export declare class TerminalCodeExecutionProvider implements ICodeExecutionService {
    protected readonly terminalServiceFactory: ITerminalServiceFactory;
    protected readonly configurationService: IConfigurationService;
    protected readonly workspace: IWorkspaceService;
    protected readonly disposables: Disposable[];
    protected readonly platformService: IPlatformService;
    protected terminalTitle: string;
    private _terminalService;
    private replActive?;
    constructor(terminalServiceFactory: ITerminalServiceFactory, configurationService: IConfigurationService, workspace: IWorkspaceService, disposables: Disposable[], platformService: IPlatformService);
    executeFile(file: Uri): Promise<void>;
    execute(code: string, resource?: Uri): Promise<void>;
    initializeRepl(resource?: Uri): Promise<void>;
    getReplCommandArgs(resource?: Uri): {
        command: string;
        args: string[];
    };
    private getTerminalService;
    private setCwdForFileExecution;
}
