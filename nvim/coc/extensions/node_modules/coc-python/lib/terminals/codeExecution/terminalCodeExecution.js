// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const path = __importStar(require("path"));
const types_1 = require("../../common/application/types");
const types_2 = require("../../common/platform/types");
const types_3 = require("../../common/terminal/types");
const types_4 = require("../../common/types");
const string_1 = require("../../common/string");
let TerminalCodeExecutionProvider = class TerminalCodeExecutionProvider {
    constructor(terminalServiceFactory, configurationService, workspace, disposables, platformService) {
        this.terminalServiceFactory = terminalServiceFactory;
        this.configurationService = configurationService;
        this.workspace = workspace;
        this.disposables = disposables;
        this.platformService = platformService;
    }
    async executeFile(file) {
        const pythonSettings = this.configurationService.getSettings(file);
        await this.setCwdForFileExecution(file);
        const command = this.platformService.isWindows ? pythonSettings.pythonPath.replace(/\\/g, '/') : pythonSettings.pythonPath;
        const launchArgs = pythonSettings.terminal.launchArgs;
        await this.getTerminalService(file).sendCommand(command, launchArgs.concat(string_1.fileToCommandArgument(file.fsPath)));
    }
    async execute(code, resource) {
        if (!code || code.trim().length === 0) {
            return;
        }
        await this.initializeRepl();
        await this.getTerminalService(resource).sendText(code);
    }
    async initializeRepl(resource) {
        if (this.replActive && await this.replActive) {
            await this._terminalService.show();
            return;
        }
        this.replActive = new Promise(async (resolve) => {
            const replCommandArgs = this.getReplCommandArgs(resource);
            await this.getTerminalService(resource).sendCommand(replCommandArgs.command, replCommandArgs.args);
            // Give python repl time to start before we start sending text.
            setTimeout(() => resolve(true), 1000);
        });
        await this.replActive;
    }
    getReplCommandArgs(resource) {
        const pythonSettings = this.configurationService.getSettings(resource);
        const command = this.platformService.isWindows ? pythonSettings.pythonPath.replace(/\\/g, '/') : pythonSettings.pythonPath;
        const args = pythonSettings.terminal.launchArgs.slice();
        return { command, args };
    }
    getTerminalService(resource) {
        if (!this._terminalService) {
            this._terminalService = this.terminalServiceFactory.getTerminalService(resource, this.terminalTitle);
            this.disposables.push(this._terminalService.onDidCloseTerminal(() => {
                this.replActive = undefined;
            }));
        }
        return this._terminalService;
    }
    async setCwdForFileExecution(file) {
        const pythonSettings = this.configurationService.getSettings(file);
        if (!pythonSettings.terminal.executeInFileDir) {
            return;
        }
        const fileDirPath = path.dirname(file.fsPath);
        await this.getTerminalService(file).sendText(`cd ${string_1.fileToCommandArgument(fileDirPath)}`);
    }
};
TerminalCodeExecutionProvider = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(types_3.ITerminalServiceFactory)),
    __param(1, inversify_1.inject(types_4.IConfigurationService)),
    __param(2, inversify_1.inject(types_1.IWorkspaceService)),
    __param(3, inversify_1.inject(types_4.IDisposableRegistry)),
    __param(4, inversify_1.inject(types_2.IPlatformService))
], TerminalCodeExecutionProvider);
exports.TerminalCodeExecutionProvider = TerminalCodeExecutionProvider;
//# sourceMappingURL=terminalCodeExecution.js.map