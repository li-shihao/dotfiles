"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_1 = require("../common/utils/fs");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
// tslint:disable:no-require-imports no-var-requires no-suspicious-comment
// tslint:disable:no-any
// TODO: Turn these into imports.
const LineByLineReader = require('line-by-line');
const NamedRegexp = require('named-js-regexp');
const fuzzy = require('fuzzy');
const IsFileRegEx = /\tkind:file\tline:\d+$/g;
const LINE_REGEX = '(?<name>\\w+)\\t(?<file>.*)\\t\\/\\^(?<code>.*)\\$\\/;"\\tkind:(?<type>\\w+)\\tline:(?<line>\\d+)$';
function matchNamedRegEx(data, regex) {
    const compiledRegexp = NamedRegexp(regex, 'g');
    const rawMatch = compiledRegexp.exec(data);
    if (rawMatch !== null) {
        return rawMatch.groups();
    }
    return null;
}
exports.matchNamedRegEx = matchNamedRegEx;
const CTagKinMapping = new Map();
CTagKinMapping.set('_array', vscode_languageserver_protocol_1.SymbolKind.Array);
CTagKinMapping.set('_boolean', vscode_languageserver_protocol_1.SymbolKind.Boolean);
CTagKinMapping.set('_class', vscode_languageserver_protocol_1.SymbolKind.Class);
CTagKinMapping.set('_classes', vscode_languageserver_protocol_1.SymbolKind.Class);
CTagKinMapping.set('_constant', vscode_languageserver_protocol_1.SymbolKind.Constant);
CTagKinMapping.set('_constants', vscode_languageserver_protocol_1.SymbolKind.Constant);
CTagKinMapping.set('_constructor', vscode_languageserver_protocol_1.SymbolKind.Constructor);
CTagKinMapping.set('_enum', vscode_languageserver_protocol_1.SymbolKind.Enum);
CTagKinMapping.set('_enums', vscode_languageserver_protocol_1.SymbolKind.Enum);
CTagKinMapping.set('_enumeration', vscode_languageserver_protocol_1.SymbolKind.Enum);
CTagKinMapping.set('_enumerations', vscode_languageserver_protocol_1.SymbolKind.Enum);
CTagKinMapping.set('_field', vscode_languageserver_protocol_1.SymbolKind.Field);
CTagKinMapping.set('_fields', vscode_languageserver_protocol_1.SymbolKind.Field);
CTagKinMapping.set('_file', vscode_languageserver_protocol_1.SymbolKind.File);
CTagKinMapping.set('_files', vscode_languageserver_protocol_1.SymbolKind.File);
CTagKinMapping.set('_function', vscode_languageserver_protocol_1.SymbolKind.Function);
CTagKinMapping.set('_functions', vscode_languageserver_protocol_1.SymbolKind.Function);
CTagKinMapping.set('_member', vscode_languageserver_protocol_1.SymbolKind.Function);
CTagKinMapping.set('_interface', vscode_languageserver_protocol_1.SymbolKind.Interface);
CTagKinMapping.set('_interfaces', vscode_languageserver_protocol_1.SymbolKind.Interface);
CTagKinMapping.set('_key', vscode_languageserver_protocol_1.SymbolKind.Key);
CTagKinMapping.set('_keys', vscode_languageserver_protocol_1.SymbolKind.Key);
CTagKinMapping.set('_method', vscode_languageserver_protocol_1.SymbolKind.Method);
CTagKinMapping.set('_methods', vscode_languageserver_protocol_1.SymbolKind.Method);
CTagKinMapping.set('_module', vscode_languageserver_protocol_1.SymbolKind.Module);
CTagKinMapping.set('_modules', vscode_languageserver_protocol_1.SymbolKind.Module);
CTagKinMapping.set('_namespace', vscode_languageserver_protocol_1.SymbolKind.Namespace);
CTagKinMapping.set('_namespaces', vscode_languageserver_protocol_1.SymbolKind.Namespace);
CTagKinMapping.set('_number', vscode_languageserver_protocol_1.SymbolKind.Number);
CTagKinMapping.set('_numbers', vscode_languageserver_protocol_1.SymbolKind.Number);
CTagKinMapping.set('_null', vscode_languageserver_protocol_1.SymbolKind.Null);
CTagKinMapping.set('_object', vscode_languageserver_protocol_1.SymbolKind.Object);
CTagKinMapping.set('_package', vscode_languageserver_protocol_1.SymbolKind.Package);
CTagKinMapping.set('_packages', vscode_languageserver_protocol_1.SymbolKind.Package);
CTagKinMapping.set('_property', vscode_languageserver_protocol_1.SymbolKind.Property);
CTagKinMapping.set('_properties', vscode_languageserver_protocol_1.SymbolKind.Property);
CTagKinMapping.set('_objects', vscode_languageserver_protocol_1.SymbolKind.Object);
CTagKinMapping.set('_string', vscode_languageserver_protocol_1.SymbolKind.String);
CTagKinMapping.set('_variable', vscode_languageserver_protocol_1.SymbolKind.Variable);
CTagKinMapping.set('_variables', vscode_languageserver_protocol_1.SymbolKind.Variable);
CTagKinMapping.set('_projects', vscode_languageserver_protocol_1.SymbolKind.Package);
CTagKinMapping.set('_defines', vscode_languageserver_protocol_1.SymbolKind.Module);
CTagKinMapping.set('_labels', vscode_languageserver_protocol_1.SymbolKind.Interface);
CTagKinMapping.set('_macros', vscode_languageserver_protocol_1.SymbolKind.Function);
CTagKinMapping.set('_types (structs and records)', vscode_languageserver_protocol_1.SymbolKind.Class);
CTagKinMapping.set('_subroutine', vscode_languageserver_protocol_1.SymbolKind.Method);
CTagKinMapping.set('_subroutines', vscode_languageserver_protocol_1.SymbolKind.Method);
CTagKinMapping.set('_types', vscode_languageserver_protocol_1.SymbolKind.Class);
CTagKinMapping.set('_programs', vscode_languageserver_protocol_1.SymbolKind.Class);
CTagKinMapping.set('_Object\'s method', vscode_languageserver_protocol_1.SymbolKind.Method);
CTagKinMapping.set('_Module or functor', vscode_languageserver_protocol_1.SymbolKind.Module);
CTagKinMapping.set('_Global variable', vscode_languageserver_protocol_1.SymbolKind.Variable);
CTagKinMapping.set('_Type name', vscode_languageserver_protocol_1.SymbolKind.Class);
CTagKinMapping.set('_A function', vscode_languageserver_protocol_1.SymbolKind.Function);
CTagKinMapping.set('_A constructor', vscode_languageserver_protocol_1.SymbolKind.Constructor);
CTagKinMapping.set('_An exception', vscode_languageserver_protocol_1.SymbolKind.Class);
CTagKinMapping.set('_A \'structure\' field', vscode_languageserver_protocol_1.SymbolKind.Field);
CTagKinMapping.set('_procedure', vscode_languageserver_protocol_1.SymbolKind.Function);
CTagKinMapping.set('_procedures', vscode_languageserver_protocol_1.SymbolKind.Function);
CTagKinMapping.set('_constant definitions', vscode_languageserver_protocol_1.SymbolKind.Constant);
CTagKinMapping.set('_javascript functions', vscode_languageserver_protocol_1.SymbolKind.Function);
CTagKinMapping.set('_singleton methods', vscode_languageserver_protocol_1.SymbolKind.Method);
const newValuesAndKeys = {};
CTagKinMapping.forEach((value, key) => {
    newValuesAndKeys[key.substring(1)] = value;
});
Object.keys(newValuesAndKeys).forEach(key => {
    CTagKinMapping.set(key, newValuesAndKeys[key]);
});
function parseTags(workspaceFolder, tagFile, query, token) {
    return fs_1.fsExistsAsync(tagFile).then(exists => {
        if (!exists) {
            return Promise.resolve([]);
        }
        return new Promise((resolve, reject) => {
            const lr = new LineByLineReader(tagFile);
            let lineNumber = 0;
            const tags = [];
            lr.on('error', (err) => {
                reject(err);
            });
            lr.on('line', (line) => {
                lineNumber = lineNumber + 1;
                if (token.isCancellationRequested) {
                    lr.close();
                    return;
                }
                const tag = parseTagsLine(workspaceFolder, line, query);
                if (tag) {
                    tags.push(tag);
                }
                if (tags.length >= 100) {
                    lr.close();
                }
            });
            lr.on('end', () => {
                resolve(tags);
            });
        });
    });
}
exports.parseTags = parseTags;
function parseTagsLine(workspaceFolder, line, searchPattern) {
    if (IsFileRegEx.test(line)) {
        return;
    }
    const match = matchNamedRegEx(line, LINE_REGEX);
    if (!match) {
        return;
    }
    if (!fuzzy.test(searchPattern, match.name)) {
        return;
    }
    let file = match.file;
    if (!path_1.default.isAbsolute(file)) {
        file = path_1.default.resolve(workspaceFolder, '.vscode', file);
    }
    const symbolKind = CTagKinMapping.get(match.type) || vscode_languageserver_protocol_1.SymbolKind.Null;
    return {
        fileName: file,
        code: match.code,
        position: vscode_languageserver_protocol_1.Position.create(Number(match.line) - 1, 0),
        symbolName: match.name,
        symbolKind
    };
}
//# sourceMappingURL=parser.js.map