import { Document } from 'coc.nvim';
import { Position, Range } from 'vscode-languageserver-types';
import { Snippet, SnippetEdit } from './types';
export interface Config {
    extends: {
        [index: string]: string[];
    };
    [key: string]: any;
}
export default abstract class BaseProvider {
    protected config: Config;
    constructor(config: Config);
    abstract init(): Promise<void>;
    abstract getSnippets(filetype: string): Promise<Snippet[]>;
    abstract getSnippetFiles(filetype: string): Promise<string[]>;
    abstract getTriggerSnippets(document: Document, position: Position, autoTrigger?: boolean): Promise<SnippetEdit[]>;
    abstract resolveSnippetBody(snippet: Snippet, range: Range, line: string): Promise<string>;
    checkContext(_context: string): Promise<any>;
    protected getExtendsFiletypes(filetype: string, exists?: Set<string>): string[];
    getFiletypes(filetype: string): string[];
}
